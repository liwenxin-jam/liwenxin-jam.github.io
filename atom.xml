<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>前端工程狮_jam</title>
  
  <subtitle>人都会成长，过程在自己</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://liwenxin-jam.github.io/"/>
  <updated>2021-07-05T13:22:46.262Z</updated>
  <id>https://liwenxin-jam.github.io/</id>
  
  <author>
    <name>黎文欣</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>如何阅读一本书 - 莫提默·J.艾德勒</title>
    <link href="https://liwenxin-jam.github.io/2021/07/04/%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BB%E4%B8%80%E6%9C%AC%E4%B9%A6/"/>
    <id>https://liwenxin-jam.github.io/2021/07/04/如何阅读一本书/</id>
    <published>2021-07-04T09:33:48.000Z</published>
    <updated>2021-07-05T13:22:46.262Z</updated>
    
    <content type="html"><![CDATA[<p>法国学者帕斯卡尔（Pascal）在三百年前就说过：“读得太快或太慢，都一无所获。”现在既然速读已经形成全国性的狂热，新版的《如何阅读一本书》就针对这个问题，提出不同速度的阅读法才是解决之道。我们的目标是要读得更好，永远更好，不过，有时候要读得慢一点，有时候要读得快一点。既然任何一种阅读都是一种活动，那就必须要有一些主动的活力。完全被动，就阅读不了——我们不可能在双眼停滞、头脑昏睡的状况下阅读。</p><ul><li><p>作者写书的初衷：这是一本为阅读的人，或是想要成为阅读的人而写的书。尤其是想要阅读书的人。说得更具体一点，这本书是为那些想把读书的主要目的当作是增进理解能力的人而写。</p></li><li><p>阅读的目标：为获得资讯而读，以及为求得理解而读。</p></li></ul><blockquote><p>四个层次，一共有四种层次的阅读。我们称之为层次，而不称为种类的原因是，严格来说，种类是样样都不相同的，而层次却是再高的层次也包含了较低层次的特性。也就是说，阅读的层次是渐进的。</p></blockquote><h3 id="1-基础阅读（elementary-reading）特点在强调识字"><a href="#1-基础阅读（elementary-reading）特点在强调识字" class="headerlink" title="1. 基础阅读（elementary reading）特点在强调识字"></a>1. 基础阅读（elementary reading）特点在强调识字</h3><ul><li>第一层次的阅读所问的问题是：“这个句子在说什么？”</li><li>蒙田说：“初学者的无知在于未学，而学者的无知在于学后。”</li><li>阅读就是学习：指导型的学习（指导型的学习是“辅助型的自我发现学习”），以及自我发现型的学习之间的差异（或辅助型与非辅助型自我发现学习）。不论是哪一种方式，只有真正学习到的人才是主动的学习者。</li><li>“阅读”这两个字已经出现过许多不同的意义。让我们挑出其中三个意义：当我们谈到“阅读”时，可能是指（1）为娱乐而阅读；（2）为获得资讯而阅读；（3）为追求理解力而阅读。</li><li>在什么样的状况下，我们会为了增进理解而阅读？有两种状况：<ol><li>第一是一开始时不相等的理解程度。在对一本书的理解力上，作者一定要比读者来得“高杆”，写书时一定要用可读的形式来传达他有而读者所无的洞见。</li><li>其次，阅读的人一定要把不相等的理解力克服到一定程度之内，虽然不能说全盘了解，但总是要达到与作者相当的程度。一旦达到相同的理解程度，就完成了清楚的沟通（达成共识是作者与读者要一起努力的事。因为这是阅读与写作的艺术要追求的终极成就，所以我们可以将达成共识看作是一种使用文字的技巧，以达到沟通知识的目的。）。简单来说，我们只能从比我们“更高杆”的人身上学习。</li></ol></li><li>继续学习与发现，我们就要懂得如何让书本来教导我们。事实上，这就是本书最主要的目的<ol><li>阅读准备阶段——相当于学前教育或幼稚园的学习经验</li><li>认字——相当于一年级学生典型的学习经验</li><li>字汇的增长及对课文的运用——通常是，四年级读写能力</li><li>小学或初中毕业的读写能力（成熟期）</li></ol></li></ul><h3 id="2-检视阅读（inspectionalreading）特点在强调时间"><a href="#2-检视阅读（inspectionalreading）特点在强调时间" class="headerlink" title="2. 检视阅读（inspectionalreading）特点在强调时间"></a>2. 检视阅读（inspectionalreading）特点在强调时间</h3><ul><li>在这个层次要问的典型问题就是：“这本书在谈什么？”这是个表象的问题。还有些类似的问题是：“这本书的架构如何？”或是：“这本书包含哪些部分？”</li><li>用另一种方式来形容这个层次的阅读，就是在一定的时间之内，抓出一本书的重点——通常是很短，而且总是（就定义上说）过短，很难掌握一本书所有重点。</li><li>两个步骤——第一个是浏览（目录、序言），第二个是粗浅地阅读（全文）。浏览能帮助你准备做分析阅读的第一个步骤：你能确定自己在读的是什么主题，能说明这是什么样的书，并拟出大纲架构。粗浅的阅读对分析阅读的第一步骤也有帮助。基本上这是进入第二步骤的准备动作。在第二个步骤中，你要能够与作者达成共识，说明他的主旨，跟随他的论述，才能够诠释整本书的内容。</li><li>什么叫对的方向？答案是一个很重要又有帮助的阅读规则，但却经常被忽略。这个规则很简单：头一次面对一本难读的书的时候，从头到尾先读完一遍，碰到不懂的地方不要停下来查询或思索。</li><li>检视阅读是系统化略读（skimming systematically）的一门艺术。</li></ul><h3 id="3-分析阅读-特点在无限时间追寻理解的"><a href="#3-分析阅读-特点在无限时间追寻理解的" class="headerlink" title="3. 分析阅读 特点在无限时间追寻理解的"></a>3. 分析阅读 特点在无限时间追寻理解的</h3><ul><li><p>分析阅读就是全盘的阅读、完整的阅读，或是说优质的阅读——你能做到的最好的阅读方式。如果说检视阅读是在有限的时间内，最好也最完整的阅读，那么分析阅读就是在无限的时间里，最好也最完整的阅读。</p></li><li><p>弗兰西斯·培根曾经说过：“有些书可以浅尝即止，有些书是要生吞活剥，只有少数的书是要咀嚼与消化的。”分析阅读就是要咀嚼与消化一本书。</p></li><li><p>找出一本书在谈些什么的四个规则：</p><ol><li>依照书本的种类与主题作分类。</li><li>用最简短的句子说出整本书在谈些什么。</li><li>按照顺序与关系，列出全书的重要部分。将全书的纲要拟出来之后，再将各个部分的纲要也一一列出。</li><li>找出作者在问的问题，或作者想要解决的问题。</li></ol></li><li><p>“用你自己的话来说”，是测验你懂不懂一个句子的主旨的最佳方法。如果要求你针对作者所写的某个句子作解释，而你只会重复他的话，或在前后顺序上作一些小小的改变，你最好怀疑自己是否真的了解了这句话。理想上，你应该能用完全不同的用语说出同样的意义。当然，这个理想的精确度又可以分成许多程度。但是如果你无法放下作者所使用的字句，那表示他所传给你的，只是这个“字”，而不是他的“思想或知识”。你知道的只是他的用字，而不是他的思想。他想要跟你沟通的是知识，而你获得的只是一些文字而已。</p></li><li><p>分析阅读的三阶段</p><ol><li><p>分析阅读的第一阶段：找出一本书在谈些什么的规则（1）依照书的种类与主题来分类。（2）使用最简短的文字说明整本书在谈些什么。（3）将主要部分按顺序与关联性列举出来。将全书的大纲列举出来，并将各个部分的大纲也列出来。（4）确定作者想要解决的问题。</p></li><li><p>分析阅读的第二阶段：诠释一本书的内容规则（5）诠释作者的关键字，与他达成共识。（6）由最重要的句子中，抓住作者的重要主旨。（7）知道作者的论述是什么，从内容中找出相关的句子，再重新架构出来。（8）确定作者已经解决了哪些问题，还有哪些是没解决的。再判断哪些是作者知道他没解决的问题。</p></li><li><p>分析阅读的第三阶段：像是沟通知识一样地评论一本书的规则</p><p>A．智慧礼节的一般规则（9）除非你已经完成大纲架构，也能诠释整本书了，否则不要轻易批评。（在你说出：“我读懂了!”之前，不要说你同意、不同意或暂缓评论。）（10）不要争强好胜，非辩到底不可。（11）在说出评论之前，你要能证明自己区别得出真正的知识与个人观点的不同。</p><p>B．批评观点的特别标准（12）证明作者的知识不足。（13）证明作者的知识错误。（14）证明作者不合逻辑。（15）证明作者的分析与理由是不完整的。</p></li></ol></li></ul><h3 id="4-主题阅读（syntopical-reading）"><a href="#4-主题阅读（syntopical-reading）" class="headerlink" title="4.主题阅读（syntopical reading）"></a>4.主题阅读（syntopical reading）</h3><ul><li>主题阅读的讨论</li><li>五个步骤<ol><li>找到相关的章节。</li><li>带引作者与你达成共识。</li><li>厘清问题。</li><li>界定议题。</li><li>分析讨论。</li></ol></li><li>主题阅读的练习实例：进步论</li></ul><h3 id="阅读的艺术"><a href="#阅读的艺术" class="headerlink" title="阅读的艺术"></a>阅读的艺术</h3><ul><li>俗话说：“你必须读出言外之意，才会有更大的收获。”而所谓阅读的规则，就是用一种比较正式的说法来说明这件事而已。此外，我们也鼓励你“写出言外之意”。不这么做，就难以达到最有效的阅读的境界。<strong>阅读的艺术</strong>就是要以适当的顺序提出适当的问题。关于一本书，你一定要提出四个主要的问题。</li></ul><ol><li>整体来说，这本书到底在谈些什么？你一定要想办法找出这本书的主题，作者如何依次发展这个主题，如何逐步从核心主题分解出从属的关键议题来。</li><li>作者细部说了什么，怎么说的？你一定要想办法找出主要的想法、声明与论点。这些组合成作者想要传达的特殊讯息。</li><li>这本书说得有道理吗？是全部有道理，还是部分有道理？除非你能回答前两个问题，否则你没法回答这个问题。在你判断这本书是否有道理之前，你必须先了解整本书在说些什么才行。然而，等你了解了一本书，如果你又读得很认真的话，你会觉得有责任为这本书做个自己的判断。光是知道作者的想法是不够的。</li><li>这本书跟你有什么关系？如果这本书给了你一些资讯，你一定要问问这些资讯有什么意义。为什么这位作者会认为知道这件事很重要？你真的有必要去了解吗？如果这本书不只提供了资讯，还启发了你，就更有必要找出其他相关的、更深的含意或建议，以获得更多的启示。</li></ol><h3 id="阅读不同读物的方法-书中提供讨论不展开，需要的时候再做深入了解"><a href="#阅读不同读物的方法-书中提供讨论不展开，需要的时候再做深入了解" class="headerlink" title="阅读不同读物的方法 (书中提供讨论不展开，需要的时候再做深入了解)"></a>阅读不同读物的方法 (书中提供讨论不展开，需要的时候再做深入了解)</h3><ul><li>第三篇是全书增加最多的部分，详加说明了以不同阅读方法接触不同读物之道——如何阅读实用性与理论性作品、想象的文学（抒情诗、史诗、小说、戏剧）、历史、科学与数学、社会科学与哲学，以及参考书、报章杂志，甚至广告。</li></ul><ol><li>如何阅读实用型的书</li><li>如何阅读想象文学</li><li>阅读故事、戏剧与诗的一些建议</li><li>如何阅读历史书（如何阅读传记与自传）</li><li>如何阅读科学与数学</li><li>如何阅读哲学书（如何阅读“经书”）</li><li>如何阅读社会科学</li></ol><h3 id="建议阅读书目"><a href="#建议阅读书目" class="headerlink" title="建议阅读书目"></a>建议阅读书目</h3><p>有作者提供的书单，考虑较多，这里不在一一列举</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;法国学者帕斯卡尔（Pascal）在三百年前就说过：“读得太快或太慢，都一无所获。”现在既然速读已经形成全国性的狂热，新版的《如何阅读一本书》就针对这个问题，提出不同速度的阅读法才是解决之道。我们的目标是要读得更好，永远更好，不过，有时候要读得慢一点，有时候要读得快一点。既然
      
    
    </summary>
    
      <category term="学习" scheme="https://liwenxin-jam.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="自我成长" scheme="https://liwenxin-jam.github.io/tags/%E8%87%AA%E6%88%91%E6%88%90%E9%95%BF/"/>
    
  </entry>
  
  <entry>
    <title>沟通训练营</title>
    <link href="https://liwenxin-jam.github.io/2021/04/22/%E6%B2%9F%E9%80%9A%E8%AE%AD%E7%BB%83%E8%90%A5/"/>
    <id>https://liwenxin-jam.github.io/2021/04/22/沟通训练营/</id>
    <published>2021-04-22T12:59:52.000Z</published>
    <updated>2021-05-18T14:27:15.423Z</updated>
    
    <content type="html"><![CDATA[<p>集体学习，沟通训练营，个人整理笔记</p><h2 id="1-结构化倾听：怎样听懂对方的真实意图？"><a href="#1-结构化倾听：怎样听懂对方的真实意图？" class="headerlink" title="1. 结构化倾听：怎样听懂对方的真实意图？"></a><strong>1. 结构化倾听：怎样听懂对方的真实意图？</strong></h2><ul><li>成功的沟通并不是建立在多说话和说漂亮话的基础上，而是建立在能不能和他人形成信任关系的基础上。如果你在意的是漂亮的话术，那么你恰恰是在关闭沟通。<ul><li>在无限游戏的视角下，沟通从来都不会失败，我们只是可以努力地去建立一个又一个的新的沟通。<ol><li>良好的沟通不在于此刻，而在于未来要面对的所有时间。</li><li>良好的沟通也不是你和对面这个人之间的事，而是你和整个世界之间的事。</li><li>良好的沟通不在于你是否能达成眼前的目的，而在于你能否不断地自我塑造。</li></ol></li><li><strong>书单《有限与无限的游戏》</strong><ol><li>一千个人眼里有一千个哈姆雷特，游戏可以理解为博弈</li><li>场景如婚姻，如果争吵是为了离婚就是有限，如果是为了关系更好延续，获得幸福，就是无限</li><li>美团创始人王兴对这本书评价，有限游戏在边界内玩，无限游戏却是和边界玩，探索、改变边界本身。</li></ol></li><li><strong>区别</strong><ol><li>有限游戏以取胜为目的，三种边界：时空、人员、规则</li><li>无限游戏以延续游戏为目的，扩展边界：消除时空、人员边界，不停修改规则</li></ol></li></ul></li></ul><h2 id="2-结构化理解：怎么让对方相信我听懂了？"><a href="#2-结构化理解：怎么让对方相信我听懂了？" class="headerlink" title="2. 结构化理解：怎么让对方相信我听懂了？"></a><strong>2. 结构化理解：怎么让对方相信我听懂了？</strong></h2><ul><li><p><strong>三步确认法</strong></p><ol><li>确认事实</li><li>响应情绪</li><li>明确行动 </li></ol><ul><li><strong>有效确认</strong> = 确认事实 + 响应情绪 + 明确行动</li><li><strong>情绪化的路标：</strong>总、总是、经常、千万别、每次、从不、从来、都是、肯定、必须</li><li><strong>反向叙述</strong>，就是用自己的话把对方的要求再说一遍，通过反述和追问把信息量套出来。这才叫有效确认了对方的信息，对方才确认你真的听懂了。</li><li><strong>小技巧：</strong>当对方说完一段话之后，你要像一个拳击裁判一样，内心默默数秒。数三秒，1、2、3再开口。</li></ul></li></ul><h2 id="3-积极回应：怎样有针对性地做反馈"><a href="#3-积极回应：怎样有针对性地做反馈" class="headerlink" title="3.  积极回应：怎样有针对性地做反馈"></a><strong>3.  积极回应：怎样有针对性地做反馈</strong></h2><ul><li><strong>四步确认法</strong> = 确认需求+肯定需求的合理性+不超过三项的行动计 划+开放性结尾</li><li><strong>积极回应艰难沟通和回应</strong><ol><li><strong>换时间</strong>：先不明确回确答复，而是请问我需要在什么时间之前答复您？</li><li><strong>换场合</strong>：公开场合换到私密空间再交流请求，对方同意你的申请会大大增加</li><li><strong>换角色</strong>：从回应者变成主持人的方法，让更多的人，都参与到对话当中来</li></ol></li><li><strong>假话绝不说，真话不全说</strong></li><li><strong>回应的第一句，永远是给对方传递一个肯定</strong><ol><li>您刚刚说的这些太有启发了</li><li>你的意见对我一直都很重要</li><li>您提的这个问题，对我们的帮助很大</li></ol></li></ul><h2 id="4-开放性：怎样创造共识？"><a href="#4-开放性：怎样创造共识？" class="headerlink" title="4. 开放性：怎样创造共识？"></a><strong>4. 开放性：怎样创造共识？</strong></h2><ul><li><strong>开放性</strong> = 扩大共识 + 消除盲区</li><li><strong>乔哈里窗</strong>，是心理学家乔瑟夫·勒夫和哈里·英汉姆提出的一个模型。它把人们的信息划分为四种类型<ol><li>我知道、你也知道的信息，这是沟通中的共识区，因为我们的信息完全对称</li><li>我不知道、但是你知道的信息，叫做我的盲区</li><li>我知道、但你不知道的信息，叫做你的盲区</li><li>是特别可怕的一类，咱俩都不知道的信息，这是我们共同的盲区</li></ol></li><li><strong>沟通的意义</strong>，就是不断同步我们双方的信息流，让共识区慢慢变大，让盲区越来越小</li><li><strong>少说你，多说我、我们</strong>，“你”字激发了对方的防御状态，接下来说的任何话，在他心里都是抵触的。而当我们用“我们”开头的时候，就把我和你建立成了一个共同体。我们不是对立关系，不是你的工作没做好，而是我们共同面临一个大挑战，我们怎么样才能解决这个问题</li><li><strong>所有的谈话都应该留下开放性的结尾</strong>，例如当对方说完话，”是个思路”、”有启发”</li></ul><h2 id="5-目标感：怎样达成目标？"><a href="#5-目标感：怎样达成目标？" class="headerlink" title="5. 目标感：怎样达成目标？"></a><strong>5. 目标感：怎样达成目标？</strong></h2><ul><li>目标感的<strong>本质是方案力</strong>，也就是提供解决方案的能力</li><li>把<strong>“我的目标”</strong>翻译成<strong>“我们的方案”</strong></li><li>句式：<strong>我们有一个目标要达成，对比我有一个方案</strong></li><li>艰难的沟通，可以把视角拉长到六个月后</li></ul><h2 id="6-建设性：怎样导向行动？"><a href="#6-建设性：怎样导向行动？" class="headerlink" title="6. 建设性：怎样导向行动？"></a><strong>6. 建设性：怎样导向行动？</strong></h2><ul><li><strong>建议性</strong> = <strong>把沟通导向行动</strong><ul><li>方法一：来，我们抓抓落实</li><li>方法二：请对方给自己提一个需求</li></ul></li><li><strong>绝不使用负面词汇</strong></li><li>松浦弥太郎讲过一段话。他说，永远不要抱怨说自己没时间、没钱。因为在有限的时间和金钱内把目标达成，就是你的责任。你的那些负面词汇潜在的意思，就是给自己找一个借口：我不干是有原因的。我可以不行动。这就会给人留下一个非常不好的印象</li></ul><h2 id="7-卡位：怎样破冰？"><a href="#7-卡位：怎样破冰？" class="headerlink" title="7. 卡位：怎样破冰？"></a><strong>7. 卡位：怎样破冰？</strong></h2><ul><li>职场破冰，本质上不为了是展现自己，而是为了赢得信任</li><li>赢得信任，就是让对方觉得对我有掌控感</li><li><strong>破冰三步骤</strong><ul><li>第一步：在对方的世界里，实现精准卡位</li><li>第二步：展现你对对方的关切</li><li>第三步：把自己的一部分交给对方</li></ul></li><li><strong>双线定位法：</strong>自我介绍不能是单维的，必须是一根经线、一根纬线<ul><li>在对方的世界里定个位 = 我是谁 + 双方的共同关系</li></ul></li><li>展现关切是为了缩短社交距离，但是不能缩短到没有距离</li><li>什么叫把我的一部分交给TA？<ul><li>最轻：交换电话号码</li><li>较重：我为你落实一件事</li><li>最重：共享一个小秘密</li></ul></li><li>创业成功最关键的个人要素是什么？<ul><li><strong>工程思维</strong> = <strong>科学思维 + 干 + 生天</strong> (火星救援，我一定要用科学在这个星球干出生天)，如埃隆-马斯克、任正非</li><li><strong>结构、约束和取舍</strong>是工程师思维的三大法宝</li><li>科学的核心是发现，工程的配制是实现</li></ul></li></ul><h2 id="8-追光：怎样赞美一个人？"><a href="#8-追光：怎样赞美一个人？" class="headerlink" title="8. 追光：怎样赞美一个人？"></a><strong>8. 追光：怎样赞美一个人？</strong></h2><ul><li>用行动而不是用语言，来表达赞美</li><li><strong>一个嗯度</strong>，从一开始的嗯嗯，慢慢到是啊、对啊、天啊、原来是这样</li><li><strong>摸机率</strong> = 单位时间里摸手机的次数</li><li><strong>让对方被看见</strong><ul><li>做笔记</li><li>拍照</li></ul></li><li><strong>赞美</strong> = 发现并指出对方的独特行为<ul><li>从差异中发现内容，就是看TA和别人有什么不一样</li><li>是赞美行为，而不是天赋</li><li>赞美三大要领（九字箴言）：轻轻地、深深地、常常地<ul><li>轻轻地：赞美的时候，不要给别人造成负担</li><li>深深地：把对方的优点嵌入到我的生命中，不是你真棒，是你的优秀深深地影响了我</li><li>常常地：给自己提个要求，任何场景都要给别人一个正反馈</li></ul></li></ul></li></ul><h2 id="9-建模：怎样激励一个人？"><a href="#9-建模：怎样激励一个人？" class="headerlink" title="9. 建模：怎样激励一个人？"></a>9. <strong>建模：怎样激励一个人？</strong></h2><ul><li>激励不是表扬，而是表扬的升级</li><li>激励是领导力的核心</li><li><strong>激励</strong> = 赞美 + 行为建模</li><li>激励和激励也不一样，因为它传递的力量也不一样。通过场合的升级变化，我传递给对方的力量强度是可以不断升级的</li></ul><h2 id="10-击穿：怎样说服一个人？"><a href="#10-击穿：怎样说服一个人？" class="headerlink" title="10. 击穿：怎样说服一个人？"></a><strong>10. 击穿：怎样说服一个人？</strong></h2><ul><li><strong>说服</strong> = 说话有分量 + 击穿心理阈值</li><li><strong>说话有分量</strong>：简单来说，就是强准备。即使人微，也不言轻。用超强准备所形成的心理和信息的优势，来碾压对方</li><li><strong>击穿心理阈值</strong>：说服不是在一瞬间完成的。它是一个沟通流，对方从接收信息到转变观念需要一个过程。</li><li>击穿心理阈值的办法有两种：<ul><li><strong>吹风</strong></li><li><strong>慢熬</strong></li></ul></li><li>熬的正确方式是：挖掘，不断调整可变条件，创造一个新局面</li><li><strong>可视化</strong>：能用场景或图片加强说服力、渲染力，避免文档过于抽象</li></ul><h2 id="11-结界：怎样辅导一个人？"><a href="#11-结界：怎样辅导一个人？" class="headerlink" title="11. 结界：怎样辅导一个人？"></a>11. 结界：怎样辅导一个人？</h2><ul><li><strong>教行动方法，不教价值观</strong></li><li>教价值观念存在两个问题<ul><li>无法透明，你并不知道对方真实的想法</li><li>无法度量，你在这说半天，到底教没教会，你根据不知道</li></ul></li><li>辅导别人，不能停留在理念的沟通上，理念要落地，价值观念也要翻译成行动方法，才有可能辅导成功</li><li><strong>辅导 = 植入目标 + 发现盲区</strong></li><li>植入目标，就是给对方一个正向的拉力，给他听你说话的动力，这是启动辅导的前提，当我们是共同体的时候，辅导是自然发生的</li><li>辅导不是责备，是要以教会他为目标，让他五个月之后变得更好</li><li>发现盲区，当你在职场上，看到一个不好的行为的时候，应该先默认为对方是不懂、不会，而不是意愿和态度出了问题</li><li><strong>你得先定位原因，才能去辅导他</strong></li><li>结界：为沟通创造一个小结界，你不能边干事、边辅导</li></ul><h2 id="12-支持：怎样安慰一个人？"><a href="#12-支持：怎样安慰一个人？" class="headerlink" title="12. 支持：怎样安慰一个人？"></a>12. 支持：怎样安慰一个人？</h2><ul><li>安慰要的是同理心，而不是同情心</li><li><strong>安慰 = 轻度介入 + 提供支持</strong></li><li>轻度介入：安慰是一种被动沟通，在职场上，只有当别人需要我们的安慰的时候，我才能提供安慰</li><li>提供支持两种方式 <ul><li>情绪支持，转移注意力</li><li>提供同类经验</li></ul></li><li><strong>安慰两大原则</strong><ul><li>轻度介入，当对方需要安慰的时候你才提供安慰</li><li>提供社会支持，而不是告诉他应该怎么做</li></ul></li></ul><h2 id="13-刷新：怎样批评一个人？"><a href="#13-刷新：怎样批评一个人？" class="headerlink" title="13. 刷新：怎样批评一个人？"></a>13. 刷新：怎样批评一个人？</h2><ul><li><strong>批评不是责备，而是刷新</strong></li><li>批评 = 刷新，不是告诉他哪错了，而是告诉他怎么对，不是让他服，而是让他好</li><li><strong>五步批评法</strong><ul><li>控制环境，事情发生之后，第一时间批评，一对一或极小范围内批评</li><li>定义问题<ul><li>我对你的什么行为不满意？</li><li>发生了什么？</li><li>你怎么看这件事儿？</li><li>你都试了什么办法？</li><li>需要我做什么？</li><li>还有吗？</li></ul></li><li>刷新动作，重要的不是怎么不对，而是怎么才能对</li><li>设定反馈点，做对了，正反馈，没做对，做辅导</li><li>完成重启，让TA带着目标走，而不是带着批评走</li></ul></li></ul><h2 id="14-直给：怎样提意见？"><a href="#14-直给：怎样提意见？" class="headerlink" title="14. 直给：怎样提意见？"></a>14. 直给：怎样提意见？</h2><ul><li>如果你对一个人有管理权，也负有管理责任，你就能批评他</li><li>如果你对他没有管理权，也负不了责任，你对他就只能提意见</li><li>批评这个工具只适用于一种对象，就是你管辖范围之内的员工</li><li><strong>提意见 = 提建议</strong></li><li><strong>提意见 = 定义双方关系 + 提供具体建议</strong><ul><li>第一个要领：提意见之前，一定要先问问对方是否需要</li><li>第二个要领：跟对方约一个时间，让他有心理准备</li><li>第三个要领：事前打草稿</li></ul></li><li>提意见只有一个目标是100%正确的，就是我要获得对方的信任，我要极大地加强我们双方之间的关系</li><li><strong>提意见的沟通的目标</strong><ul><li>定义双方关系，一定要证明这事和我有关系，我是作为共同体的一分子来发言的，而不是一个评判者</li><li>给出具体建议，当一个问题你也不知道咋解决的时候，这个意见我劝你就别提。只要没有带出具体的方案提意见，对方一定会认为你在刷存在感</li><li>检验一个建议好不好的标准，是你愿不愿意把自己放进去</li><li>不论我提的意见是什么，我的核心目标一定是促进关系</li></ul></li><li>提意见常态化<ul><li>咱们得有同理心，如果对方给你提了一个意见，他的心理压力是很大的</li><li>如果别人给你提了一个意见，一定要给对方反馈</li><li>是一个提醒。如果你是接收意见的人，一定要留痕。但反过来，如果你是提意见的人，你可尽量别留痕</li></ul></li></ul><h2 id="15-透明：怎样作绩效谈话？"><a href="#15-透明：怎样作绩效谈话？" class="headerlink" title="15. 透明：怎样作绩效谈话？"></a>15. 透明：怎样作绩效谈话？</h2><ul><li>绩效面谈，是你对团队的绩效水平、工作方式进行干预的最重要的时刻</li><li><strong>绩效面谈 = 透明化 + 换框架</strong></li><li>两个任务：<ul><li>给下属充分展示透明化的决心和态度</li><li>给下属换一个更大的视野框架</li></ul></li><li>展现透明化的绩效面谈技巧<ul><li><strong>事前沟通：</strong>给对方掌控感，让对方有准备度</li><li><strong>利用环境沟通：</strong>不说话的沟通，学会利用环境</li></ul></li><li>换框架：从日常工作里“拔”出来</li><li>知道 为什么而战的士兵是不可战胜的</li><li>让对方总结</li><li>发个邮件，抄送给人力资源</li></ul><h2 id="16-控场：怎样主持会议？"><a href="#16-控场：怎样主持会议？" class="headerlink" title="16. 控场：怎样主持会议？"></a>16. 控场：怎样主持会议？</h2><ul><li>会议主持人就是牧羊人</li><li>当你是一个会议主持人的时候，你一定要时刻提醒自己，我是一个牧羊人</li><li><strong>主持会议 = 设计 + 控场</strong></li><li><strong>行为设计四招</strong><ul><li>场地</li><li>时间</li><li>环境</li><li>规则</li></ul></li><li><strong>三星开会法则</strong><ul><li>八个必须<ul><li>凡是会议，必有准备</li><li>凡是会议，必有主题</li><li>凡是会议，必有纪律</li><li>凡是会议，会前必有议程</li><li>凡是会议，必有结果</li><li>凡是会议，必有训练</li><li>凡是会议，必有守时</li><li>凡是会议，必有记录</li></ul></li><li><strong>三个公式</strong><ul><li>光是开会，会后没有人落实等于零</li><li>会议上布置了工作，但是会后不进行检查，等于零</li><li>抓住了不落实的事，同时追究不落实的人，等于落实</li></ul></li></ul></li><li><strong>会议控场四招</strong><ul><li>第一：会前积极跑动</li><li>第二：开场自我赋能</li><li>第三：会中敢于干预</li><li>第四：结束出口成章</li></ul></li><li><strong>会前和领导沟通清单</strong><ul><li>这个会您希望怎么开？</li><li>有什么需要我注意的？</li><li>您给我的主持提提要求？</li><li>您有什么想强调的？</li><li>您希望会议多长时间内结束？</li><li>您的发言安排在什么时候？</li></ul></li></ul><h2 id="17-承诺：怎样进行道歉？"><a href="#17-承诺：怎样进行道歉？" class="headerlink" title="17. 承诺：怎样进行道歉？"></a>17. 承诺：怎样进行道歉？</h2><ul><li>不是“我错了”，而是“你是对的”</li><li>因为道歉的终极奥义，不是跟对方承认</li><li><strong>道歉 = 关闭过去 + 开启未来</strong></li><li><strong>道歉的完整流程</strong>，不要回避道歉，越是艰难的，越要在当下解决<ul><li>诚恳，道歉的时候，一定要当面谈，实在见不了见的就打电话</li><li>完全接纳对方的情绪，肯定对方感受的合理性，在道歉的时候，不能出现否定句</li><li>开启未来：接下来我准备怎么办</li><li>上个请教，上个小礼物，一定要便宜，它要实现的功能，是不给对方增加负担，但是让对方看到你想要改变的决心</li></ul></li><li>不原谅怎么办？<ul><li>我们跟对方道歉，不仅仅是为了他，也是为了这个疤痕不在自己身上留着。所以，不论对方是个什么样的人，道歉该做的事，我都要做全套。这是我对我自己的交代。</li></ul></li><li><strong>大事向领导请求支援，小事打个时间隔断</strong></li><li><strong>道歉三大原则</strong><ul><li>坦然地接受对方的道歉</li><li>是你一定要阻止对方把问题升级</li><li>是如果涉及到外部关系，那应该秉公处理的，就秉公处理</li></ul></li></ul><h2 id="18-补网：怎样调解矛盾"><a href="#18-补网：怎样调解矛盾" class="headerlink" title="18. 补网：怎样调解矛盾"></a>18. 补网：怎样调解矛盾</h2><ul><li>调解矛盾不是解扣，而是补网</li><li>把自己定位为社会网络的枢纽节点</li><li>救火队要先打隔离带，防止蔓延</li><li><strong>调解矛盾 = 释放情绪 + 否定情绪 + 重建目标 + 最小改善</strong></li><li><strong>让对方重新“入轨”</strong><ul><li>释放情绪：引导对方彻底倾诉</li><li>否定情绪：给对方制造一个认知失调</li><li>重建目标：逼问被遮蔽的目标</li><li>最小改善：设置一个当下去做的改善行动</li></ul></li></ul><h2 id="19-示弱：怎样请求帮助？"><a href="#19-示弱：怎样请求帮助？" class="headerlink" title="19. 示弱：怎样请求帮助？"></a>19. 示弱：怎样请求帮助？</h2><ul><li>求助的内核，是发起协作</li><li>钱钟书先生说，男妇之间最好的起点是借书和吃饭，<strong>“一借一还，一请一去，情份就结下了”</strong></li><li>心理学上有个富兰克林效应，说<strong>人总会倾向于帮助自己帮助过的人</strong></li><li><strong>求助 = 别人帮得了 +自己值得帮</strong></li><li>别人帮得了，在求助之前，你要先营造条件，让对方能帮得了你<ul><li>我觉得你帮得了，但对方并不觉得</li><li>要在时间精力上可启动</li><li>在职责边界内可启动</li><li>要在关系程度内可启动</li></ul></li><li>自己值得帮<ul><li>先干为敬，先证明自己在这件事上已经付出了极大的努力</li><li>真诚领情，把感谢的场合升级</li><li>被拒绝了怎么办？<strong>请别人帮忙，不帮是本分，帮了是人情</strong></li></ul></li></ul><h2 id="20-洗牌：怎样拒绝一个人？"><a href="#20-洗牌：怎样拒绝一个人？" class="headerlink" title="20. 洗牌：怎样拒绝一个人？"></a>20. 洗牌：怎样拒绝一个人？</h2><ul><li>拒绝要拒绝的事，团结该团结的人，这两条是完全可以和谐统一的</li><li>表达拒绝，记住“洗牌”，洗牌不会给双方带来新牌，但是洗牌可以把已有的东西重新排列组合</li><li><p><strong>拒绝= 开门见山 + 移花接木</strong></p><ul><li><strong>开门见山</strong><ul><li>简单来说，就是拒绝一定要直接</li><li>表达立场，在你拒绝别人的时候，第一句话就应该先表明立场，直接拒绝</li><li>给个理由，你可以给没信息量的理由，“我忙不过来”，“我不想去”，这都不得罪人，但你不要撒谎。最好只用一个理由，来说明你的拒绝</li></ul></li><li><strong>移花接木</strong><ul><li>重新发牌，给个替代方案</li><li>Yes后面带了个条件，如果你怎么样，我才怎么样。这叫不找借口，提条件</li><li>如果能……的话，我可以同意，如果对方接受了你的条件，那你就得履行自己的承诺</li><li><strong>Yes, if</strong><ul><li>延迟交付</li><li>交换条件</li></ul></li></ul></li><li>拒绝的时候，可以谈条件，但是不能谈无关条件，更不能谈威胁性的条件</li><li>当你去给别人提要求的时候，手里就应该准备个次优方案</li></ul></li></ul><h2 id="21-备场：怎样即兴发言？"><a href="#21-备场：怎样即兴发言？" class="headerlink" title="21. 备场：怎样即兴发言？"></a>21. 备场：怎样即兴发言？</h2><ul><li>没有无准备的谈话</li><li>半准备发言<ul><li>参加前的准备</li><li>做笔记的准备</li><li>争取时间的准备</li></ul></li><li><strong>即兴发言 = 万能开头 + 谈感受(讲虚)/谈行动(讲实，例如今天我特别有收获/启发，我回去要干一件什么事儿)</strong></li><li>准备一个万能开头<ul><li>用自黑的方式做自我介绍</li><li>赞美一个细节</li></ul></li><li>即兴发言的三个提醒<ul><li>你所有的材料一定来自现场</li><li>观察一个特殊性</li><li>千万不要长篇大论</li></ul></li></ul><h2 id="22-界面：怎样和人闲谈"><a href="#22-界面：怎样和人闲谈" class="headerlink" title="22. 界面：怎样和人闲谈"></a>22. 界面：怎样和人闲谈</h2><ul><li>打靶式沟通</li><li>涟漪式沟通</li><li><strong>闲谈 = 传递尊重 + 传递价值</strong><ul><li>上个请教，你请教的东西，必须要是对方擅长的领域</li><li>多给一点，多给一些关键信息</li><li>深度破冰</li><li>管理人设<ul><li>不是要贴什么标签，而是想好绝对不贴什么标签</li><li>不管你是什么人设，你都不要谈或者少谈三观问题</li></ul></li></ul></li><li>闲谈是温和且发散的沟通</li><li>沟通是双目标系统<ul><li>以行动为目标</li><li>以关系为目标</li></ul></li></ul><h2 id="23-呈现：怎样作汇报-提案"><a href="#23-呈现：怎样作汇报-提案" class="headerlink" title="23. 呈现：怎样作汇报/提案"></a>23. 呈现：怎样作汇报/提案</h2><ul><li>汇报提案：不是请示，而是预演</li><li><strong>提案 = 融目标 + 抢进度 + 提诉求</strong></li><li>两个小技巧<ul><li>大方向和细节沟通要分开</li><li>制造听觉锤</li></ul></li><li>抢进度可不是为了增强你的说服力，而是为了增强你的责任担当<ul><li>把实质性成果的工作往前做</li><li>把展现自己决心的工作往前做</li></ul></li><li>你要推销的不是方案，而是你自己</li></ul><h2 id="24-MOT：怎样做晋升答辩？"><a href="#24-MOT：怎样做晋升答辩？" class="headerlink" title="24. MOT：怎样做晋升答辩？"></a>24. MOT：怎样做晋升答辩？</h2><ul><li>竞聘不是为了赢</li><li>竞聘的本质，不是和对手竞争，而是向组织请战</li><li><strong>竞聘 = 请战</strong></li><li>注意五个大坑<ul><li>不要说前任的坏处，要肯定现有战场</li><li>不要摆过去的功劳，要讲未来的打算</li><li>不要说对未来的畅想，要说对示来的抓手</li><li>讲自己的准备，要突出你的特质</li><li>不管有没有把握当选，要准备一个败选方案</li></ul></li><li>高手过招，拼到底就是谁的目标更坚定</li><li>世界各有计划，但是，我们有自己的计划</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;集体学习，沟通训练营，个人整理笔记&lt;/p&gt;
&lt;h2 id=&quot;1-结构化倾听：怎样听懂对方的真实意图？&quot;&gt;&lt;a href=&quot;#1-结构化倾听：怎样听懂对方的真实意图？&quot; class=&quot;headerlink&quot; title=&quot;1. 结构化倾听：怎样听懂对方的真实意图？&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
      <category term="笔记" scheme="https://liwenxin-jam.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="杂篇" scheme="https://liwenxin-jam.github.io/tags/%E6%9D%82%E7%AF%87/"/>
    
  </entry>
  
  <entry>
    <title>typescript学习笔记</title>
    <link href="https://liwenxin-jam.github.io/2020/03/20/typescript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://liwenxin-jam.github.io/2020/03/20/typescript学习笔记/</id>
    <published>2020-03-20T15:09:25.000Z</published>
    <updated>2021-06-16T04:13:00.648Z</updated>
    
    <content type="html"><![CDATA[<p>个人typescript学习笔记，加深记忆使用，方便自己查阅。分为基础篇、进阶篇、爬坑篇，客官各取所需</p><h2 id="基础篇"><a href="#基础篇" class="headerlink" title="基础篇"></a>基础篇</h2><h3 id="00-开发环境搭建"><a href="#00-开发环境搭建" class="headerlink" title="00. 开发环境搭建"></a>00. 开发环境搭建</h3><ul><li>它是 JavaScript 的一个超集，而且本质上向这个语言添加了可选的静态类型和基于类的面向对象编程</li></ul><ol><li>nodejs环境 <a href="https://nodejs.org/en/" target="_blank" rel="noopener">nodejs官网</a></li><li>全局安装typescript</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g typescript</span><br></pre></td></tr></table></figure><ol start="3"><li>编译ts文件</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tsc test.ts</span><br><span class="line"><span class="comment">// 开启监测模式</span></span><br><span class="line">tsc test.ts -w</span><br></pre></td></tr></table></figure><ol start="4"><li>生成tsconfig.json 配置文件</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc --init</span><br></pre></td></tr></table></figure><h3 id="01-原始数据类型"><a href="#01-原始数据类型" class="headerlink" title="01. 原始数据类型"></a>01. 原始数据类型</h3><ul><li>原始数据类型包括：布尔值(boolean)、数值(number)、字符串(string)、null、undefined 以及 ES6 中的新类型 Symbol 和 BigInt</li><li>非原始类型是指除前面所列的原始类型之外的类型，如数组(array)、元组(tuple)、枚举(enum)、任意类型(any)、空类型(void)、永不存在的值类型(never)</li><li>通过 new String() 创建引用类型字符串变量，而 String() 创建值类型字符串变量</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Uses the JavaScript String object</span></span><br><span class="line"><span class="keyword">var</span> str: <span class="built_in">String</span> = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">"Hello world"</span>); </span><br><span class="line"><span class="comment">// Uses the TypeScript string type</span></span><br><span class="line"><span class="keyword">var</span> str: <span class="built_in">string</span> = <span class="built_in">String</span>(<span class="string">"Hello World"</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 不等价，Type 'Boolean' is not assignable to type 'boolean'.</span></span><br><span class="line"><span class="keyword">let</span> createdByNewBoolean: <span class="built_in">boolean</span> = <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Symbols是不可改变且唯一的</span></span><br><span class="line"><span class="keyword">let</span> sym2 = Symbol(<span class="string">"key"</span>); <span class="comment">// 可选的字符串key</span></span><br><span class="line"><span class="keyword">let</span> sym3 = Symbol(<span class="string">"key"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(sym2 === sym3); <span class="comment">// false, symbols是唯一的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// JavaScript 中可以用 Number 表示的最大整数为 2^53 - 1，可以写为 Number.MAX_SAFE_INTEGER。如果超过了这个界限，可以用 BigInt来表示，它可以表示任意大的整数</span></span><br><span class="line"><span class="keyword">const</span> biggest = <span class="built_in">Number</span>.MAX_SAFE_INTEGER</span><br><span class="line"><span class="keyword">const</span> biggest1 = biggest + <span class="number">1</span></span><br><span class="line"><span class="keyword">const</span> biggest2 = biggest + <span class="number">2</span></span><br><span class="line">biggest1 === biggest2 <span class="comment">// true 超过精度</span></span><br><span class="line"><span class="comment">// 使用BigInt情况下</span></span><br><span class="line"><span class="keyword">const</span> biggest = BigInt(<span class="built_in">Number</span>.MAX_SAFE_INTEGER)</span><br><span class="line"><span class="keyword">const</span> biggest1 = biggest + <span class="number">1n</span></span><br><span class="line"><span class="keyword">const</span> biggest2 = biggest + <span class="number">2n</span></span><br><span class="line">biggest1 === biggest2 <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意参数的arguments类数组不是真正的数组</span></span><br><span class="line"><span class="comment">/* 类数组 VS 数组</span></span><br><span class="line"><span class="comment">- 相同点：</span></span><br><span class="line"><span class="comment">都可用下标访问每个元素</span></span><br><span class="line"><span class="comment">都有length属性</span></span><br><span class="line"><span class="comment">- 不同点：</span></span><br><span class="line"><span class="comment">数组对象的类型是Array，类数组对象的类型是Object；</span></span><br><span class="line"><span class="comment">类数组对象不能直接调用数组API；</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">let</span> arr1: <span class="built_in">string</span>[]</span><br><span class="line"><span class="comment">// 数组泛型 Array&lt;T&gt;</span></span><br><span class="line"><span class="keyword">let</span> arr2: <span class="built_in">Array</span>&lt;<span class="built_in">string</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// tuple(元组)，元组类型允许表示一个已知元素数量和类型的数组，各元素的类型不必相同。 比如，你可以定义一对值分别为 string和number类型的元组</span></span><br><span class="line"><span class="comment">// Declare a tuple type</span></span><br><span class="line"><span class="keyword">let</span> x: [<span class="built_in">string</span>, <span class="built_in">number</span>];</span><br><span class="line"><span class="comment">// Initialize it</span></span><br><span class="line">x = [<span class="string">'hello'</span>, <span class="number">10</span>]; <span class="comment">// OK</span></span><br><span class="line"><span class="comment">// Initialize it incorrectly</span></span><br><span class="line">x = [<span class="number">10</span>, <span class="string">'hello'</span>]; <span class="comment">// Error</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 针对一些常量做命名规范，默认情况下，从0开始为元素编号</span></span><br><span class="line"><span class="keyword">enum</span> Color &#123;Red = <span class="number">1</span>, Green, Blue&#125;</span><br><span class="line"><span class="keyword">let</span> c: Color = Color.Green;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明一个void类型的变量没有什么大用，因为你只能为它赋予undefined和null，但如果方法没有返回值，可以声明为void</span></span><br><span class="line"><span class="keyword">let</span> unusable: <span class="built_in">void</span> = <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回never的函数必须存在无法达到的终点，如果真的来到了，证明代码逻辑有问题，跳过了某些判断，来到了它不该到达的地方，例如union type + switch default</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">error</span>(<span class="params">message: <span class="built_in">string</span></span>): <span class="title">never</span> </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="02-TypeScript断言"><a href="#02-TypeScript断言" class="headerlink" title="02. TypeScript断言"></a>02. TypeScript断言</h3><ul><li>通过类型断言这种方式可以告诉编译器，“相信我，我知道自己在干什么”。类型断言好比其他语言里的类型转换，但是不进行特殊的数据检查和解构。它没有运行时的影响，只是在编译阶段起作用。</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// “尖括号” 语法</span></span><br><span class="line"><span class="keyword">let</span> someValue: <span class="built_in">any</span> = <span class="string">"this is a string"</span>;</span><br><span class="line"><span class="keyword">let</span> strLength: <span class="built_in">number</span> = (&lt;<span class="built_in">string</span>&gt;someValue).length;</span><br><span class="line"><span class="comment">// as 语法</span></span><br><span class="line"><span class="keyword">let</span> someValue: <span class="built_in">any</span> = <span class="string">"this is a string"</span>;</span><br><span class="line"><span class="keyword">let</span> strLength: <span class="built_in">number</span> = (someValue <span class="keyword">as</span> <span class="built_in">string</span>).length;</span><br></pre></td></tr></table></figure><h3 id="03-TypeScript类型守卫"><a href="#03-TypeScript类型守卫" class="headerlink" title="03. TypeScript类型守卫"></a>03. TypeScript类型守卫</h3><ul><li><p>类型保护是可执行运行时检查的一种表达式，用于确保该类型在一定的范围内。换句话说，类型保护可以保证一个字符串是一个字符串，尽管它的值也可以是一个数值。类型保护与特性检测并不是完全不同，其主要思想是尝试检测属性、方法或原型，以确定如何处理值。目前主要有四种的方式来实现类型保护。</p><ul><li>in 关键字</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Admin &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  privileges: <span class="built_in">string</span>[];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> Employee &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  startDate: <span class="built_in">Date</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 联合类型</span></span><br><span class="line"><span class="keyword">type</span> UnknownEmployee = Employee | Admin;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printEmployeeInformation</span>(<span class="params">emp: UnknownEmployee</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Name: "</span> + emp.name);</span><br><span class="line">  <span class="comment">// 使用前先判断是否存在，不然编译器会警告过不去校验</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="string">"privileges"</span> <span class="keyword">in</span> emp) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Privileges: "</span> + emp.privileges);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="string">"startDate"</span> <span class="keyword">in</span> emp) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Start Date: "</span> + emp.startDate);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>typeof关键字</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">padLeft</span>(<span class="params">value: <span class="built_in">string</span>, padding: <span class="built_in">string</span> | <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 先判断具体类型是属于哪个联合守卫</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> padding === <span class="string">"number"</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Array</span>(padding + <span class="number">1</span>).join(<span class="string">" "</span>) + value;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> padding === <span class="string">"string"</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> padding + value;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`Expected string or number, got '<span class="subst">$&#123;padding&#125;</span>'.`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>instanceof关键字</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接口</span></span><br><span class="line"><span class="keyword">interface</span> Padder &#123;</span><br><span class="line">  <span class="comment">// 待implements继承具体实现的方法定义</span></span><br><span class="line">  getPaddingString(): <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Number继承类</span></span><br><span class="line"><span class="keyword">class</span> NumberPadder <span class="keyword">implements</span> Padder &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> numSpaces: <span class="built_in">number</span></span>) &#123;&#125;</span><br><span class="line">  <span class="comment">// 具体实现</span></span><br><span class="line">  getPaddingString() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Array</span>(<span class="keyword">this</span>.numSpaces + <span class="number">1</span>).join(<span class="string">" "</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// String继承类</span></span><br><span class="line"><span class="keyword">class</span> StringPadder <span class="keyword">implements</span> Padder &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> value: <span class="built_in">string</span></span>) &#123;&#125;</span><br><span class="line">  getPaddingString() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 实例</span></span><br><span class="line"><span class="keyword">let</span> padder: Padder = <span class="keyword">new</span> NumberPadder(<span class="number">6</span>);</span><br><span class="line"><span class="keyword">if</span> (padder <span class="keyword">instanceof</span> NumberPadder) &#123;</span><br><span class="line">  <span class="comment">// padder的类型收窄为 'NumberPadder'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>自定义类型保护的类型谓词，个人感觉有点鸡肋</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isNumber</span>(<span class="params">x: <span class="built_in">any</span></span>): <span class="title">x</span> <span class="title">is</span> <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> x === <span class="string">"number"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isString</span>(<span class="params">x: <span class="built_in">any</span></span>): <span class="title">x</span> <span class="title">is</span> <span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> x === <span class="string">"string"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="04-联合类型和类型别名"><a href="#04-联合类型和类型别名" class="headerlink" title="04. 联合类型和类型别名"></a>04. 联合类型和类型别名</h3><ul><li>联合类型用 <code>|</code> 联接，通常与 <code>null</code> 或 <code>undefined</code> 一起使用</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sayHello = <span class="function">(<span class="params">name: <span class="built_in">string</span> | <span class="literal">undefined</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> value: <span class="built_in">string</span> | <span class="built_in">number</span></span><br><span class="line"><span class="comment">// 以下两个是等价的</span></span><br><span class="line"><span class="keyword">let</span> obj: &#123; name: <span class="built_in">string</span>, age: <span class="built_in">number</span> &#125;</span><br><span class="line"><span class="keyword">let</span> obj: &#123; name: <span class="built_in">string</span> &#125; &amp; &#123; age: <span class="built_in">number</span> &#125;</span><br></pre></td></tr></table></figure><ul><li>类型别名用来给一个类型起个新名字</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 描述一个对象的类型</span></span><br><span class="line"><span class="keyword">type</span> myType = &#123;</span><br><span class="line">    name: <span class="built_in">string</span>,</span><br><span class="line">    age: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> obj: myType = &#123;</span><br><span class="line">    name: <span class="string">'xx'</span>,</span><br><span class="line">    age: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> MyType = <span class="built_in">string</span></span><br><span class="line"><span class="keyword">let</span> s1: <span class="built_in">string</span></span><br><span class="line"><span class="keyword">let</span> s2: MyType</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> data = <span class="number">1</span> | <span class="number">2</span> | <span class="number">3</span></span><br><span class="line"><span class="keyword">let</span> data1 = data</span><br><span class="line"><span class="keyword">let</span> data2 = data</span><br><span class="line"></span><br><span class="line"><span class="comment">// type定义某种类型或者数据</span></span><br><span class="line"><span class="keyword">type</span> Message = <span class="built_in">string</span> | <span class="built_in">string</span>[];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> greet = <span class="function">(<span class="params">message: Message</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="05-TypeScript交叉类型"><a href="#05-TypeScript交叉类型" class="headerlink" title="05. TypeScript交叉类型"></a>05. TypeScript交叉类型</h3><ul><li>交叉类型用 <code>&amp;</code> 联接</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> IPerson &#123;</span><br><span class="line">  id: <span class="built_in">string</span>;</span><br><span class="line">  age: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> IWorker &#123;</span><br><span class="line">  companyId: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> IStaff = IPerson &amp; IWorker;</span><br><span class="line"><span class="comment">// 三个属性缺一不可</span></span><br><span class="line"><span class="keyword">const</span> staff: IStaff = &#123;</span><br><span class="line">  id: <span class="string">'E1006'</span>,</span><br><span class="line">  age: <span class="number">33</span>,</span><br><span class="line">  companyId: <span class="string">'EFT'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.dir(staff)</span><br></pre></td></tr></table></figure><h3 id="06-TypeScript函数"><a href="#06-TypeScript函数" class="headerlink" title="06. TypeScript函数"></a>06. TypeScript函数</h3><ul><li>参数类型和返回类型</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createUserId</span>(<span class="params">name: <span class="built_in">string</span>, id: <span class="built_in">number</span></span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> name + id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>可选参数(名称后面加上问号?) 和 默认参数<ul><li>在 ES6 中，我们允许给函数的参数添加默认值，TypeScript 会将添加了默认值的参数识别为可选参数</li><li>在函数参数可选参数必须接在必需参数后面。换句话说，可选参数后面不允许再出现必需参数了</li></ul></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可选参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createUserId</span>(<span class="params">name: <span class="built_in">string</span>, id: <span class="built_in">number</span>, age?: <span class="built_in">number</span></span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> name + id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createUserId</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  name: <span class="built_in">string</span> = "Semlinker",</span></span></span><br><span class="line"><span class="function"><span class="params">  id: <span class="built_in">number</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  age?: <span class="built_in">number</span></span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> name + id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj: &#123; name: <span class="built_in">string</span>, age?: <span class="built_in">number</span> &#125;</span><br><span class="line">obj = &#123; name: <span class="string">'张三'</span> &#125;</span><br><span class="line">obj = &#123; name: <span class="string">'李四'</span>, age: <span class="number">18</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 动态匹配key-value</span></span><br><span class="line"><span class="keyword">let</span> dynamicObj: &#123; name: <span class="built_in">string</span>, [propName: <span class="built_in">string</span>]: <span class="built_in">any</span> &#125;</span><br><span class="line">dynamicObj = &#123; name: <span class="string">'张三'</span> &#125;</span><br><span class="line">dynamicObj = &#123; name: <span class="string">'李四'</span>, age: <span class="number">18</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildName</span>(<span class="params">firstName: <span class="built_in">string</span>, lastName?: <span class="built_in">string</span></span>) </span></span><br><span class="line"><span class="function"><span class="function"><span class="keyword">function</span> <span class="title">buildName</span>(<span class="params">firstName: <span class="built_in">string</span>, lastName: <span class="built_in">string</span> = 'Cat'</span>)</span></span></span><br></pre></td></tr></table></figure><ul><li>剩余参数，ES6 中，可以使用 …rest 的方式获取函数中的剩余参数（rest 参数），rest 参数只能是最后一个参数</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">push</span>(<span class="params">array: <span class="built_in">any</span>[], ...items</span>)  </span>&#123;</span><br><span class="line">  items.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">    array.push(item);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = [];</span><br><span class="line">push(a, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><ul><li>函数重载</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数重载或方法重载是使用相同名称和不同参数数量或类型创建多个方法的一种能力。要解决前面遇到的问题，方法就是为同一个函数提供多个函数类型定义来进行函数重载，编译器会根据这个列表去处理函数的调用。</span></span><br><span class="line"><span class="keyword">class</span> Calculator &#123;</span><br><span class="line">  add(a: <span class="built_in">number</span>, b: <span class="built_in">number</span>): <span class="built_in">number</span>;</span><br><span class="line">  add(a: <span class="built_in">string</span>, b: <span class="built_in">string</span>): <span class="built_in">string</span>;</span><br><span class="line">  add(a: <span class="built_in">string</span>, b: <span class="built_in">number</span>): <span class="built_in">string</span>;</span><br><span class="line">  add(a: <span class="built_in">number</span>, b: <span class="built_in">string</span>): <span class="built_in">string</span>;</span><br><span class="line">  add(a: Combinable, b: Combinable) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> a === <span class="string">"string"</span> || <span class="keyword">typeof</span> b === <span class="string">"string"</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> a.toString() + b.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> calculator = <span class="keyword">new</span> Calculator();</span><br><span class="line"><span class="keyword">const</span> result = calculator.add(<span class="string">"Semlinker"</span>, <span class="string">" Kakuqo"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重载，TypeScript 会优先从最前面的函数定义开始匹配，所以多个函数定义如果有包含关系，需要优先把精确的定义写在前面。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverse</span>(<span class="params">x: <span class="built_in">number</span></span>): <span class="title">number</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverse</span>(<span class="params">x: <span class="built_in">string</span></span>): <span class="title">string</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverse</span>(<span class="params">x: <span class="built_in">number</span> | <span class="built_in">string</span></span>): <span class="title">number</span> | <span class="title">string</span>  | <span class="title">void</span> </span>&#123;</span><br><span class="line">   <span class="comment">// 根据入参类型返回出参类型 </span></span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">typeof</span> x === <span class="string">'number'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Number</span>(x.toString().split(<span class="string">''</span>).reverse().join(<span class="string">''</span>));</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> x === <span class="string">'string'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> x.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="07-TypeScript数组"><a href="#07-TypeScript数组" class="headerlink" title="07. TypeScript数组"></a>07. TypeScript数组</h3><ul><li>数组解构</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x: <span class="built_in">number</span>; <span class="keyword">let</span> y: <span class="built_in">number</span>; <span class="keyword">let</span> z: <span class="built_in">number</span>;</span><br><span class="line"><span class="keyword">let</span> five_array = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">[x,y,z] = five_array;</span><br></pre></td></tr></table></figure><ul><li>数组展开运算符</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> two_array = [<span class="number">0</span>, <span class="number">1</span>];</span><br><span class="line"><span class="keyword">let</span> five_array = [...two_array, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br></pre></td></tr></table></figure><ul><li>数组遍历</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> colors: <span class="built_in">string</span>[] = [<span class="string">"red"</span>, <span class="string">"green"</span>, <span class="string">"blue"</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i of colors) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="08-TypeScript对象"><a href="#08-TypeScript对象" class="headerlink" title="08. TypeScript对象"></a>08. TypeScript对象</h3><ul><li>对象解构</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  name: <span class="string">"Semlinker"</span>,</span><br><span class="line">  gender: <span class="string">"Male"</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123; name, gender &#125; = person;</span><br></pre></td></tr></table></figure><ul><li>对象展开运算符</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  name: <span class="string">"Semlinker"</span>,</span><br><span class="line">  gender: <span class="string">"Male"</span>,</span><br><span class="line">  address: <span class="string">"Xiamen"</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 组装对象</span></span><br><span class="line"><span class="keyword">let</span> personWithAge = &#123; ...person, age: <span class="number">33</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取除了某些项外的其它项</span></span><br><span class="line"><span class="keyword">let</span> &#123; name, ...rest &#125; = person;</span><br></pre></td></tr></table></figure><h3 id="09-编译上下文"><a href="#09-编译上下文" class="headerlink" title="09. 编译上下文"></a>09. 编译上下文</h3><ul><li>tsconfig.json，用于标识 TypeScript 项目的根路径，用于配置 TypeScript 编译器，用于指定编译的文件<ul><li>files - 设置要编译的文件的名称；</li><li>include - 设置需要进行编译的文件，支持路径模式匹配；</li><li>exclude - 设置无需进行编译的文件，支持路径模式匹配；</li><li>compilerOptions - 设置与编译流程相关的选项。</li></ul></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"compilerOptions"</span>: &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 基本选项 */</span></span><br><span class="line">    <span class="attr">"target"</span>: <span class="string">"es5"</span>,                       <span class="comment">// 指定 ECMAScript 目标版本: 'ES3' (default), 'ES5', 'ES6'/'ES2015', 'ES2016', 'ES2017', or 'ESNEXT'</span></span><br><span class="line">    <span class="attr">"module"</span>: <span class="string">"commonjs"</span>,                  <span class="comment">// 指定使用模块: 'commonjs', 'amd', 'system', 'umd' or 'es2015'</span></span><br><span class="line">    <span class="attr">"lib"</span>: [],                             <span class="comment">// 指定要包含在编译中的库文件</span></span><br><span class="line">    <span class="attr">"allowJs"</span>: <span class="literal">true</span>,                       <span class="comment">// 允许编译 javascript 文件</span></span><br><span class="line">    <span class="attr">"checkJs"</span>: <span class="literal">true</span>,                       <span class="comment">// 报告 javascript 文件中的错误</span></span><br><span class="line">    <span class="attr">"jsx"</span>: <span class="string">"preserve"</span>,                     <span class="comment">// 指定 jsx 代码的生成: 'preserve', 'react-native', or 'react'</span></span><br><span class="line">    <span class="attr">"declaration"</span>: <span class="literal">true</span>,                   <span class="comment">// 生成相应的 '.d.ts' 文件</span></span><br><span class="line">    <span class="attr">"sourceMap"</span>: <span class="literal">true</span>,                     <span class="comment">// 生成相应的 '.map' 文件</span></span><br><span class="line">    <span class="attr">"outFile"</span>: <span class="string">"./"</span>,                       <span class="comment">// 将输出文件合并为一个文件</span></span><br><span class="line">    <span class="attr">"outDir"</span>: <span class="string">"./"</span>,                        <span class="comment">// 指定输出目录</span></span><br><span class="line">    <span class="attr">"rootDir"</span>: <span class="string">"./"</span>,                       <span class="comment">// 用来控制输出目录结构 --outDir.</span></span><br><span class="line">    <span class="attr">"removeComments"</span>: <span class="literal">true</span>,                <span class="comment">// 删除编译后的所有的注释</span></span><br><span class="line">    <span class="attr">"noEmit"</span>: <span class="literal">true</span>,                        <span class="comment">// 不生成输出文件</span></span><br><span class="line">    <span class="attr">"importHelpers"</span>: <span class="literal">true</span>,                 <span class="comment">// 从 tslib 导入辅助工具函数</span></span><br><span class="line">    <span class="attr">"isolatedModules"</span>: <span class="literal">true</span>,               <span class="comment">// 将每个文件做为单独的模块 （与 'ts.transpileModule' 类似）.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 严格的类型检查选项 */</span></span><br><span class="line">    <span class="attr">"strict"</span>: <span class="literal">true</span>,                        <span class="comment">// 启用所有严格类型检查选项</span></span><br><span class="line">    <span class="attr">"noImplicitAny"</span>: <span class="literal">true</span>,                 <span class="comment">// 在表达式和声明上有隐含的 any类型时报错</span></span><br><span class="line">    <span class="attr">"strictNullChecks"</span>: <span class="literal">true</span>,              <span class="comment">// 启用严格的 null 检查</span></span><br><span class="line">    <span class="attr">"noImplicitThis"</span>: <span class="literal">true</span>,                <span class="comment">// 当 this 表达式值为 any 类型的时候，生成一个错误</span></span><br><span class="line">    <span class="attr">"alwaysStrict"</span>: <span class="literal">true</span>,                  <span class="comment">// 以严格模式检查每个模块，并在每个文件里加入 'use strict'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 额外的检查 */</span></span><br><span class="line">    <span class="attr">"noUnusedLocals"</span>: <span class="literal">true</span>,                <span class="comment">// 有未使用的变量时，抛出错误</span></span><br><span class="line">    <span class="attr">"noUnusedParameters"</span>: <span class="literal">true</span>,            <span class="comment">// 有未使用的参数时，抛出错误</span></span><br><span class="line">    <span class="attr">"noImplicitReturns"</span>: <span class="literal">true</span>,             <span class="comment">// 并不是所有函数里的代码都有返回值时，抛出错误</span></span><br><span class="line">    <span class="attr">"noFallthroughCasesInSwitch"</span>: <span class="literal">true</span>,    <span class="comment">// 报告 switch 语句的 fallthrough 错误。（即，不允许 switch 的 case 语句贯穿）</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 模块解析选项 */</span></span><br><span class="line">    <span class="attr">"moduleResolution"</span>: <span class="string">"node"</span>,            <span class="comment">// 选择模块解析策略： 'node' (Node.js) or 'classic' (TypeScript pre-1.6)</span></span><br><span class="line">    <span class="attr">"baseUrl"</span>: <span class="string">"./"</span>,                       <span class="comment">// 用于解析非相对模块名称的基目录</span></span><br><span class="line">    <span class="attr">"paths"</span>: &#123;&#125;,                           <span class="comment">// 模块名到基于 baseUrl 的路径映射的列表</span></span><br><span class="line">    <span class="attr">"rootDirs"</span>: [],                        <span class="comment">// 根文件夹列表，其组合内容表示项目运行时的结构内容</span></span><br><span class="line">    <span class="attr">"typeRoots"</span>: [],                       <span class="comment">// 包含类型声明的文件列表</span></span><br><span class="line">    <span class="attr">"types"</span>: [],                           <span class="comment">// 需要包含的类型声明文件名列表</span></span><br><span class="line">    <span class="attr">"allowSyntheticDefaultImports"</span>: <span class="literal">true</span>,  <span class="comment">// 允许从没有设置默认导出的模块中默认导入。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Source Map Options */</span></span><br><span class="line">    <span class="attr">"sourceRoot"</span>: <span class="string">"./"</span>,                    <span class="comment">// 指定调试器应该找到 TypeScript 文件而不是源文件的位置</span></span><br><span class="line">    <span class="attr">"mapRoot"</span>: <span class="string">"./"</span>,                       <span class="comment">// 指定调试器应该找到映射文件而不是生成文件的位置</span></span><br><span class="line">    <span class="attr">"inlineSourceMap"</span>: <span class="literal">true</span>,               <span class="comment">// 生成单个 soucemaps 文件，而不是将 sourcemaps 生成不同的文件</span></span><br><span class="line">    <span class="attr">"inlineSources"</span>: <span class="literal">true</span>,                 <span class="comment">// 将代码与 sourcemaps 生成到一个文件中，要求同时设置了 --inlineSourceMap 或 --sourceMap 属性</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 其他选项 */</span></span><br><span class="line">    <span class="attr">"experimentalDecorators"</span>: <span class="literal">true</span>,        <span class="comment">// 启用装饰器</span></span><br><span class="line">    <span class="attr">"emitDecoratorMetadata"</span>: <span class="literal">true</span>          <span class="comment">// 为装饰器提供元数据的支持</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="进阶篇"><a href="#进阶篇" class="headerlink" title="进阶篇"></a>进阶篇</h2><h3 id="10-TypeScript接口"><a href="#10-TypeScript接口" class="headerlink" title="10. TypeScript接口"></a>10. TypeScript接口</h3><ul><li>接口形式，interface接口一般首字母大写。有的编程语言中会建议接口的名称加上 I 前缀</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  age: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> Semlinker: Person = &#123;</span><br><span class="line">  name: <span class="string">"Semlinker"</span>,</span><br><span class="line">  age: <span class="number">33</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>可选 ｜ 只读属性</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">  <span class="comment">// 注意，readonly只读的约束存在于第一次给对象赋值的时候，而不是第一次给只读属性赋值的时候</span></span><br><span class="line">  readonly name: <span class="built_in">string</span>;</span><br><span class="line">  age?: <span class="built_in">number</span>;</span><br><span class="line">  [propName: <span class="built_in">string</span>]: <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>只读属性用于限制只能在对象刚刚创建的时候修改其值。此外 TypeScript 还提供了 <code>ReadonlyArray&lt;T&gt;</code> 类型，它与 <code>Array&lt;T&gt;</code> 相似，只是把所有可变方法去掉了，因此可以确保数组创建后再也不能被修改</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> ro: ReadonlyArray&lt;<span class="built_in">number</span>&gt; = a;</span><br><span class="line">ro[<span class="number">0</span>] = <span class="number">12</span>; <span class="comment">// error!</span></span><br><span class="line">ro.push(<span class="number">5</span>); <span class="comment">// error!</span></span><br><span class="line">ro.length = <span class="number">100</span>; <span class="comment">// error!</span></span><br><span class="line">a = ro; <span class="comment">// error!</span></span><br></pre></td></tr></table></figure><h3 id="11-TypeScript类"><a href="#11-TypeScript类" class="headerlink" title="11. TypeScript类"></a>11. TypeScript类</h3><ul><li>通过 <code>Class</code> 关键字来定义一个类，定义类需要注意开闭原则(Open Closed Principle)，实体应该对扩展开放，对修改关闭</li><li>成员属性与静态属性，成员方法与静态方法有什么区别？</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">    <span class="comment">// public(公共)、protected(保护)、private(私有)，默认不写是公共属性public</span></span><br><span class="line">    <span class="comment">// public允许类、子类、类外部访问修改</span></span><br><span class="line">    <span class="comment">// protected只允许类、子类访问修改</span></span><br><span class="line">    <span class="comment">// private只允许类自身访问修改，能提高代码健壮性，通过暴露方法去实现get和set</span></span><br><span class="line">    <span class="comment">// public name: string</span></span><br><span class="line">    name: <span class="built_in">string</span></span><br><span class="line">    <span class="comment">// 构造函数，每个实例单独存在</span></span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 静态属性，允许类直接访问</span></span><br><span class="line">    <span class="keyword">static</span> readonly age: <span class="built_in">number</span> = <span class="number">18</span>;</span><br><span class="line">    <span class="comment">// 实例属性，不允许类直接访问</span></span><br><span class="line">    desc: <span class="built_in">string</span> = <span class="string">'hello world'</span>;</span><br><span class="line">    sayHi() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Hi'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> Person(<span class="string">'aa'</span>)</span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> Person(<span class="string">'bb'</span>)</span><br><span class="line"><span class="comment">// 错误，不允许直接访问实例属性</span></span><br><span class="line"><span class="comment">// console.log(Person.name)</span></span><br><span class="line">p1.desc = <span class="string">'hello typescript'</span></span><br><span class="line"><span class="built_in">console</span>.log(p1.desc)</span><br><span class="line"><span class="built_in">console</span>.log(p2.desc)</span><br></pre></td></tr></table></figure><ul><li>访问器，我们可以通过 <code>getter</code> 和 <code>setter</code> 方法来实现数据的封装和有效性校验，防止出现异常数据</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义变量</span></span><br><span class="line"><span class="keyword">let</span> passcode = <span class="string">"Hello TypeScript"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Employee &#123;</span><br><span class="line">  <span class="keyword">private</span> _fullName: <span class="built_in">string</span>;</span><br><span class="line">  <span class="comment">// 获取数据</span></span><br><span class="line">  <span class="keyword">get</span> fullName(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._fullName;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// 赋值数据</span></span><br><span class="line">  <span class="keyword">set</span> fullName(newName: <span class="built_in">string</span>) &#123;</span><br><span class="line">    <span class="comment">// 校验是否合规或是否允许写入</span></span><br><span class="line">    <span class="keyword">if</span> (passcode &amp;&amp; passcode == <span class="string">"Hello TypeScript"</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>._fullName = newName;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"Error: Unauthorized update of employee!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> employee = <span class="keyword">new</span> Employee();</span><br><span class="line">employee.fullName = <span class="string">"Semlinker"</span>;</span><br><span class="line"><span class="keyword">if</span> (employee.fullName) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(employee.fullName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>类的继承，extends、super</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父类</span></span><br><span class="line"><span class="keyword">class</span> Animal &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">theName: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = theName;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  move(distanceInMeters: <span class="built_in">number</span> = <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span> moved <span class="subst">$&#123;distanceInMeters&#125;</span>m.`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类</span></span><br><span class="line"><span class="keyword">class</span> Snake <span class="keyword">extends</span> Animal &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">super</span>(name);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  move(distanceInMeters = <span class="number">5</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Slithering..."</span>);</span><br><span class="line">    <span class="keyword">super</span>.move(distanceInMeters);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sam = <span class="keyword">new</span> Snake(<span class="string">"Sammy the Python"</span>);</span><br><span class="line">sam.move();</span><br></pre></td></tr></table></figure><ul><li>抽象类abstract</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 抽象类和其它类区别不大，只是不能创建实例，专门用来被继承</span></span><br><span class="line"><span class="comment">  * 抽象类可以添加抽象方法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> Animal &#123;</span><br><span class="line">    name: <span class="built_in">string</span></span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.name = name</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 抽象方法只能定义在抽象类中，没有方法体，必须在派生类具体实现</span></span><br><span class="line">    <span class="keyword">abstract</span> sayHello(): <span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 错误，抽象类无法被实例化</span></span><br><span class="line"><span class="comment">// const animal = new Animal</span></span><br><span class="line"><span class="keyword">class</span> Dog <span class="keyword">extends</span> Animal &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="keyword">super</span>(name)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 子类必须对抽象方法进行重写</span></span><br><span class="line">  sayHello() &#123;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>继承extends类</li></ul><ol><li>实现一个新的类，从父类或者接口实现所有的属性和方法，同时可以重写属性和方法，包含一些新的功能，注意super的用法</li><li>一个类不能extends多个类，但是可以通过接口然后让一个类去implements多个接口，class A extends B implements C,D,E </li><li>extends可以继承父类的方法，也可以重写他，但是要注意的是，如果父类是抽象类，内部有抽象的方法，子类在extends的时候，如果子类不是抽象类，那么子类就一定要对父类中的抽象方法进行重写。但如果子类也是抽象类，则可以不可考虑重写。extends支持子类，孙类……即可以继承多代</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父类animal</span></span><br><span class="line"><span class="keyword">class</span> Animal &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子类dog</span></span><br><span class="line"><span class="keyword">class</span> Dog <span class="keyword">extends</span> Animal &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">        <span class="keyword">super</span>(name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子类cat</span></span><br><span class="line"><span class="keyword">class</span> Cat <span class="keyword">extends</span> Animal &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">        <span class="keyword">super</span>(name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>继承implements接口</li></ul><ol><li>class A implements B，B是interface类型的，B里面的方法默认可以理解为都是abstract类型的方法，implements接口的子类必须实现接口定义的方法</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 接口只定义对象的结构，所有属性都不能有实际的值</span></span><br><span class="line"><span class="comment">  * 所有方法都是抽象方法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">interface</span> myInter &#123;</span><br><span class="line">    name: <span class="built_in">string</span></span><br><span class="line">    sayHello(): <span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现接口就是让类满足接口的要求</span></span><br><span class="line"><span class="keyword">class</span> MyClass <span class="keyword">implements</span> myInter &#123;</span><br><span class="line">    name: <span class="built_in">string</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    sayHello() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Hello'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="12-TypeScript泛型"><a href="#12-TypeScript泛型" class="headerlink" title="12. TypeScript泛型"></a>12. TypeScript泛型</h3><ul><li><h4 id="泛型是指不确定的类型，泛型变量，使用大写字母-A-Z-定义的类型变量都属于泛型。泛型可以帮助我们避免重复的代码以及对不特定类型的支持-类型校验"><a href="#泛型是指不确定的类型，泛型变量，使用大写字母-A-Z-定义的类型变量都属于泛型。泛型可以帮助我们避免重复的代码以及对不特定类型的支持-类型校验" class="headerlink" title="泛型是指不确定的类型，泛型变量，使用大写字母 A-Z 定义的类型变量都属于泛型。泛型可以帮助我们避免重复的代码以及对不特定类型的支持(类型校验)"></a>泛型是指不确定的类型，泛型变量，使用大写字母 A-Z 定义的类型变量都属于泛型。泛型可以帮助我们避免重复的代码以及对不特定类型的支持(类型校验)</h4><ul><li>T（Type）：表示一个 TypeScript 类型</li><li>K（Key）：表示对象中的键类型</li><li>V（Value）：表示对象中的值类型</li><li>E（Element）：表示元素类型</li></ul></li><li><h4 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h4></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> GenericIdentityFn&lt;T&gt; &#123;</span><br><span class="line">  <span class="comment">// &lt;T&gt;(arg: T): T;</span></span><br><span class="line">(arg: T): T;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>泛型类</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义不确定类型的泛型类</span></span><br><span class="line"><span class="keyword">class</span> GenericNumber&lt;T&gt; &#123;</span><br><span class="line">  zeroValue: T;</span><br><span class="line">  add: <span class="function">(<span class="params">x: T, y: T</span>) =&gt;</span> T;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// T在定义的时候是不确定的，只有在实例化类的时候才能确定它最终是类型的数据</span></span><br><span class="line"><span class="keyword">let</span> myGenericNumber = <span class="keyword">new</span> GenericNumber&lt;<span class="built_in">number</span>&gt;();</span><br><span class="line">myGenericNumber.zeroValue = <span class="number">0</span>;</span><br><span class="line">myGenericNumber.add = <span class="function"><span class="keyword">function</span> (<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等价下边泛型方法，但定义any会丢失掉typescript的类型校验</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">params: <span class="built_in">any</span></span>): <span class="title">any</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> params</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// T是任意类型，只有调用执行的时候才知道，自动对类型进行推断</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>&lt;<span class="title">T</span>&gt;(<span class="params">params: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> params</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn2</span>&lt;<span class="title">T</span>, <span class="title">K</span>&gt;(<span class="params">a: T, b: K</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(b)</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 泛型支持继承</span></span><br><span class="line"><span class="keyword">interface</span> Inter &#123;</span><br><span class="line">    length: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn3</span>&lt;<span class="title">T</span> <span class="title">extends</span> <span class="title">String</span>&gt;(<span class="params">a: T</span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.length</span><br><span class="line">&#125;</span><br><span class="line">fn3(<span class="string">'123'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 泛型类</span></span><br><span class="line"><span class="keyword">class</span> MyClass&lt;T&gt; &#123;</span><br><span class="line">    name: T</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">name: T</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> mc = <span class="keyword">new</span> MyClass&lt;<span class="built_in">string</span>&gt;(<span class="string">'abc'</span>)</span><br></pre></td></tr></table></figure><ul><li><h4 id="泛型工具类型"><a href="#泛型工具类型" class="headerlink" title="泛型工具类型"></a>泛型工具类型</h4><ul><li>typeof ，可以用来获取一个变量声明或对象的类型</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  age: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sem: Person = &#123; name: <span class="string">'semlinker'</span>, age: <span class="number">30</span> &#125;;</span><br><span class="line"><span class="keyword">type</span> Sem = <span class="keyword">typeof</span> sem; <span class="comment">// -&gt; Person</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toArray</span>(<span class="params">x: <span class="built_in">number</span></span>): <span class="title">Array</span>&lt;<span class="title">number</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// js typeof 用来检测一个变量的类型，会返回 undefined、boolean、string、number、object(null)、function</span></span><br><span class="line"><span class="keyword">type</span> Func = <span class="keyword">typeof</span> toArray; <span class="comment">// -&gt; (x: number) =&gt; number[]</span></span><br></pre></td></tr></table></figure><ul><li>keyof，可以用来获取一个对象中的所有 key 值</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> K1 = keyof Person; <span class="comment">// "name" | "age"</span></span><br><span class="line"><span class="keyword">type</span> K2 = keyof Person[]; <span class="comment">// "length" | "toString" | "pop" | "push" | "concat" | "join" </span></span><br><span class="line"><span class="keyword">type</span> K3 = keyof &#123; [x: <span class="built_in">string</span>]: Person &#125;;  <span class="comment">// string | number</span></span><br><span class="line"><span class="comment">// 只允许赋值类型声明的key</span></span><br><span class="line"><span class="keyword">const</span> key: K1 = <span class="string">'name'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(key) <span class="comment">// name</span></span><br></pre></td></tr></table></figure><ul><li>in，遍历枚举类型</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Keys = <span class="string">"a"</span> | <span class="string">"b"</span> | <span class="string">"c"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Obj =  &#123;</span><br><span class="line">  [p <span class="keyword">in</span> Keys]: <span class="built_in">any</span></span><br><span class="line">&#125; <span class="comment">// -&gt; &#123; a: any, b: any, c: any &#125;</span></span><br></pre></td></tr></table></figure><ul><li>infer，声明一个类型变量并且对它进行使用</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> ReturnType&lt;T&gt; = T <span class="keyword">extends</span> (</span><br><span class="line">  ...args: <span class="built_in">any</span>[]</span><br><span class="line">) =&gt; infer R ? R : <span class="built_in">any</span>;</span><br></pre></td></tr></table></figure><ul><li>extends</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> ILengthwise &#123;</span><br><span class="line">  length: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loggingIdentity</span>&lt;<span class="title">T</span> <span class="title">extends</span> <span class="title">ILengthwise</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(arg.length);</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 现在这个泛型函数被定义了约束，因此它不再是适用于任意类型</span></span><br><span class="line">loggingIdentity(<span class="number">3</span>);  <span class="comment">// Error, number doesn't have a .length property</span></span><br><span class="line"><span class="comment">// 这时我们需要传入符合约束类型的值，必须包含必须的属性</span></span><br><span class="line">loggingIdentity(&#123; length: <span class="number">10</span>, value: <span class="number">3</span> &#125;);</span><br></pre></td></tr></table></figure><ul><li>Partial，Partial<t> 的作用就是将某个类型里的属性全部变为可选项 ?</t></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 首先通过 keyof T 拿到 T 的所有属性名，然后使用 in 进行遍历，将值赋给 P，最后通过 T[P] 取得相应的属性值。中间的 ? 号，用于将所有属性变为可选</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * node_modules/typescript/lib/lib.es5.d.ts</span></span><br><span class="line"><span class="comment"> * Make all properties in T optional</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">type</span> Partial&lt;T&gt; = &#123;</span><br><span class="line">  [P <span class="keyword">in</span> keyof T]?: T[P];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h3 id="13-TypeScript装饰器"><a href="#13-TypeScript装饰器" class="headerlink" title="13. TypeScript装饰器"></a>13. TypeScript装饰器</h3><ul><li>装饰器是什么<ul><li>它是一个表达式(方法)，可以注入到类、方法、属性参数上来扩展类、属性、方法、参数的功能</li><li>该表达式被执行后，返回一个函数</li><li>函数的入参分别为 target、name 和 descriptor</li><li>执行该函数后，可能返回 descriptor 对象，用于配置 target 对象</li><li>普通装饰器(无法传参)、装饰器工厂(可传参)</li></ul></li><li>装饰器的分类<ul><li>类装饰器（Class decorators），应用于类构造函数，可以用来监视、修改或替换类定义，传入一个参数</li><li>属性装饰器（Property decorators）</li><li>方法装饰器（Method decorators）</li><li>参数装饰器（Parameter decorators）</li></ul></li><li>执行顺序：属性装饰器(从后到前) -&gt; 方法装饰器(从后到前) -&gt; 方法参数装饰器(从右到左) -&gt; 类装饰器(从后到前)</li><li>类装饰器<ul><li>target: TFunction - 被装饰的类</li></ul></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不传参的情况下</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params">target</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 当前装饰的类</span></span><br><span class="line">  <span class="built_in">console</span>.log(target); </span><br><span class="line">  <span class="comment">// 动态扩展一个greet方法</span></span><br><span class="line">  target.prototype.greet = <span class="function"><span class="keyword">function</span> (<span class="params"></span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Hello TS!"</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传参的情况下</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Greeter</span>(<span class="params">greeting: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">target</span>) </span>&#123;</span><br><span class="line">    target.prototype.greet = <span class="function"><span class="keyword">function</span> (<span class="params"></span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(greeting);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不传参的情况下，普通装饰器</span></span><br><span class="line"><span class="comment">// @Greeter</span></span><br><span class="line"><span class="comment">// 带参数的情况下，装饰器工厂</span></span><br><span class="line"><span class="meta">@Greeter</span>(<span class="string">"Hello TS!"</span>) <span class="comment">// 多个装饰器，写在前面的后执行</span></span><br><span class="line"><span class="keyword">class</span> Greeting &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 内部实现</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myGreeting = <span class="keyword">new</span> Greeting();</span><br><span class="line">myGreeting.greet(); <span class="comment">// console output: 'Hello TS!';</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 类重载，类的构造函数作为其唯一的参数，它会使用提供的构造函数来替换类的声明</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logClass</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(target);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">class</span> <span class="keyword">extends</span> target &#123;</span><br><span class="line">    apiUrl: <span class="built_in">string</span> = <span class="string">'我是修改后的数据'</span></span><br><span class="line">    <span class="comment">// 方法也可以重载</span></span><br><span class="line">    getData() &#123;</span><br><span class="line">      <span class="keyword">this</span>.apiUrl += <span class="string">'---'</span>;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.apiUrl);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@logClass</span></span><br><span class="line"><span class="keyword">class</span> HttpClient &#123;</span><br><span class="line">  <span class="keyword">public</span> apiUrl: <span class="built_in">string</span> | <span class="literal">undefined</span></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.apiUrl = <span class="string">'我是构造函数里面的apiUrl'</span></span><br><span class="line">  &#125;</span><br><span class="line">  getData() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.apiUrl);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> http = <span class="keyword">new</span> HttpClient();</span><br><span class="line">http.getData();</span><br></pre></td></tr></table></figure><ul><li>属性装饰器，可以用来监视、修改或替换类定义，两个参数<ul><li>target: Object - 被装饰的类，对于静态成员来说是类的构造函数，对于实例成员是类的原型对象</li><li>propertyKey: string | symbol - 被装饰类的属性名，成员的名字</li></ul></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 属性装饰器</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logProperty</span>(<span class="params">params: <span class="built_in">any</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">target: <span class="built_in">any</span>, attr:<span class="built_in">any</span></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(target); </span><br><span class="line">    <span class="built_in">console</span>.log(attr); <span class="comment">// url</span></span><br><span class="line">    <span class="comment">// 等价于在target.prototype</span></span><br><span class="line">    target[attr] = params;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> HttpClient &#123;</span><br><span class="line">  <span class="meta">@logProperty</span>(<span class="string">'http://baidu.com'</span>) </span><br><span class="line">  <span class="keyword">public</span> url: <span class="built_in">string</span> | <span class="literal">undefined</span>;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">  getData() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.url);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> http = <span class="keyword">new</span> HttpClient();</span><br><span class="line">http.getData();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 属性装饰器</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logProperty</span>(<span class="params">target: <span class="built_in">any</span>, key: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">delete</span> target[key];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> backingField = <span class="string">"_"</span> + key;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(target, backingField, &#123;</span><br><span class="line">    writable: <span class="literal">true</span>,  <span class="comment">// 可覆写</span></span><br><span class="line">    enumerable: <span class="literal">true</span>, <span class="comment">// 可枚举</span></span><br><span class="line">    configurable: <span class="literal">true</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// property getter</span></span><br><span class="line">  <span class="keyword">const</span> getter = <span class="function"><span class="keyword">function</span> (<span class="params"><span class="keyword">this</span>: <span class="built_in">any</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> currVal = <span class="keyword">this</span>[backingField];</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Get: <span class="subst">$&#123;key&#125;</span> =&gt; <span class="subst">$&#123;currVal&#125;</span>`</span>);</span><br><span class="line">    <span class="keyword">return</span> currVal;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// property setter</span></span><br><span class="line">  <span class="keyword">const</span> setter = <span class="function"><span class="keyword">function</span> (<span class="params"><span class="keyword">this</span>: <span class="built_in">any</span>, newVal: <span class="built_in">any</span></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Set: <span class="subst">$&#123;key&#125;</span> =&gt; <span class="subst">$&#123;newVal&#125;</span>`</span>);</span><br><span class="line">    <span class="keyword">this</span>[backingField] = newVal;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Create new property with getter and setter</span></span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(target, key, &#123;</span><br><span class="line">    <span class="keyword">get</span>: getter,</span><br><span class="line">    <span class="keyword">set</span>: setter,</span><br><span class="line">    enumerable: <span class="literal">true</span>,</span><br><span class="line">    configurable: <span class="literal">true</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Person &#123; </span><br><span class="line">  <span class="meta">@logProperty</span></span><br><span class="line">  <span class="keyword">public</span> name: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name : <span class="built_in">string</span></span>) &#123; </span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> Person(<span class="string">"semlinker"</span>);</span><br><span class="line">p1.name = <span class="string">"kakuqo"</span>;</span><br></pre></td></tr></table></figure><ul><li>方法装饰器，可以用来监视、修改或替换类定义，三个参数<ul><li>target: Object - 被装饰的类，对于静态成员来说是类的构造函数，对于实例成员是类的原型对象</li><li>propertyKey: string | symbol - 成员的名称(方法名)</li><li>descriptor: TypePropertyDescript - 成员的属性描述符</li></ul></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logMethod</span>(<span class="params">params: <span class="built_in">any</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">target:<span class="built_in">any</span>, methodName: <span class="built_in">string</span>, descript: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(target);</span><br><span class="line">    <span class="built_in">console</span>.log(methodName);</span><br><span class="line">    <span class="built_in">console</span>.log(descript);</span><br><span class="line">    target.apiUrl = <span class="string">'xxx'</span>;</span><br><span class="line">    target.run = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'run'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> HttpClient &#123;</span><br><span class="line">  <span class="keyword">public</span> url: <span class="built_in">string</span> | <span class="literal">undefined</span>;</span><br><span class="line">  <span class="keyword">constructor</span> (<span class="params"></span>) &#123;&#125;</span><br><span class="line">  <span class="meta">@logMethod</span>(<span class="string">'www.baidu.com'</span>)</span><br><span class="line">  getData() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.url);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> http = <span class="keyword">new</span> HttpClient();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.apiUrl);</span><br><span class="line">http.run();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">LogOutput</span>(<span class="params">tarage: <span class="built_in">Function</span>, key: <span class="built_in">string</span>, descriptor: <span class="built_in">any</span></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 原先的方法，保留指向</span></span><br><span class="line">  <span class="keyword">let</span> originalMethod = descriptor.value;</span><br><span class="line">  <span class="keyword">let</span> newMethod = <span class="function"><span class="keyword">function</span>(<span class="params">...args: <span class="built_in">any</span>[]</span>): <span class="title">any</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 将参数全部转成字符串类型，或者将一些数据转成特定类型再计算</span></span><br><span class="line">    <span class="comment">// args = args.map(value =&gt; &#123;</span></span><br><span class="line">    <span class="comment">//  return String(value);</span></span><br><span class="line">    <span class="comment">// &#125;)</span></span><br><span class="line">    <span class="comment">// 计算结果</span></span><br><span class="line">    <span class="keyword">let</span> result: <span class="built_in">any</span> = originalMethod.apply(<span class="keyword">this</span>, args);</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">this</span>.loggedOutput) &#123;</span><br><span class="line">      <span class="keyword">this</span>.loggedOutput = <span class="keyword">new</span> <span class="built_in">Array</span>&lt;<span class="built_in">any</span>&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.loggedOutput.push(&#123;</span><br><span class="line">      method: key,</span><br><span class="line">      parameters: args,</span><br><span class="line">      output: result,</span><br><span class="line">      timestamp: <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 将新方法重定向</span></span><br><span class="line">  descriptor.value = newMethod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Calculator &#123;</span><br><span class="line">  <span class="meta">@LogOutput</span></span><br><span class="line">  double (num: <span class="built_in">number</span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> num * <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> calc = <span class="keyword">new</span> Calculator();</span><br><span class="line">calc.double(<span class="number">11</span>);</span><br><span class="line"><span class="comment">// console ouput: [&#123;method: "double", output: 22, ...&#125;]</span></span><br><span class="line"><span class="built_in">console</span>.log(calc.loggedOutput);</span><br></pre></td></tr></table></figure><ul><li>方法参数装饰器，可以使用参数装饰器为类的原型增加一些元素数据，三个参数<ul><li>target: Object - 被装饰的方法，对于静态成员来说是类的构造函数，对于实例成员是类的原型对象</li><li>propertyKey: string | symbol - 参数的名称</li><li>parameterIndex: number - 方法中参数的索引值</li></ul></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logParams</span>(<span class="params">params: <span class="built_in">any</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">target: <span class="built_in">any</span>, paramName: <span class="built_in">string</span>, paramIndex: <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(params); <span class="comment">// xxxx</span></span><br><span class="line">    <span class="built_in">console</span>.log(target); <span class="comment">// &#123;getData: f, constructor: f&#125;</span></span><br><span class="line">    <span class="built_in">console</span>.log(paramName); <span class="comment">// getData</span></span><br><span class="line">    <span class="built_in">console</span>.log(paramIndex); <span class="comment">// 0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> HttpClient &#123;</span><br><span class="line">  <span class="keyword">public</span> url: <span class="built_in">string</span> | <span class="literal">undefined</span>;</span><br><span class="line">  <span class="keyword">constructor</span> (<span class="params"></span>) &#123;&#125;</span><br><span class="line">  <span class="meta">@logMethod</span>(<span class="string">'www.baidu.com'</span>)</span><br><span class="line">  <span class="comment">// 多个装饰器，写在前面的后执行</span></span><br><span class="line">  getData(<span class="meta">@logParams</span>(<span class="string">'xxxx'</span>) uuid: <span class="built_in">any</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.uuid);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> http = <span class="keyword">new</span> HttpClient();</span><br><span class="line">http.getData();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Log</span>(<span class="params">target: <span class="built_in">Function</span>, key: <span class="built_in">string</span>, parameterIndex: <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> functionLogged = key || target.prototype.<span class="keyword">constructor</span>.name;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`The parameter in position <span class="subst">$&#123;parameterIndex&#125;</span> at <span class="subst">$&#123;functionLogged&#125;</span> has</span></span><br><span class="line"><span class="string">been decorated`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Greeter &#123;</span><br><span class="line">  greeting: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="meta">@Log</span> phrase: <span class="built_in">string</span></span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.greeting = phrase; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// console output: The parameter in position 0 </span></span><br><span class="line"><span class="comment">// at Greeter has been decorated</span></span><br></pre></td></tr></table></figure><h2 id="爬坑篇"><a href="#爬坑篇" class="headerlink" title="爬坑篇"></a>爬坑篇</h2><h3 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h3><ul><li>判断对象是否存在某个属性</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">obj.propName</span><br><span class="line">obj.hasOwnProperty(propName)</span><br><span class="line">obj?.propName</span><br></pre></td></tr></table></figure><ul><li>判断某个元素是否存在</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(arr ?? []).forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>！作用</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 后面加!代表这个元素不可能为空，跳过校验</span></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'id'</span>).text!.getElementsByTagName(<span class="string">'div'</span>);</span><br></pre></td></tr></table></figure><ul><li>$refs问题</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> $refs!: &#123;</span><br><span class="line">tableW: HTMLElement</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">this</span>.myTable = <span class="keyword">this</span>.$refs.tableW;</span><br></pre></td></tr></table></figure><h3 id="any-和-unknown-区别"><a href="#any-和-unknown-区别" class="headerlink" title="any 和 unknown 区别"></a>any 和 unknown 区别</h3><ol><li>在任意值上访问任何属性都是允许的</li><li>允许调用任何方法</li><li>变量如果在声明的时候，未指定其类型，那么它会被识别为任意值类型（类型推论）</li></ol><ul><li>相同点：都为顶级类型</li><li>不同点：</li></ul><ol><li><p>任何类型的值都可以赋值给 any 类型，类型 any 也可被可赋值给每一种类型（使用 any，我们将会失去通常由 TypeScript 的静态类型系统所给予的所有保护。因此，如果我们无法使用更具体的类型或 unknown，则只能将其用作最后的手段）</p></li><li><p>unknown 类型是 any 的类型安全版本。每当你想使用 any 时，应该先试着用 unknown，在对 unknown 类型的值执行任何操作之前，必须先通过以下方法限定其类型</p><ol><li><p>类型断言</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">value.toFixed(<span class="number">2</span>)</span><br><span class="line">(value <span class="keyword">as</span> <span class="built_in">number</span>).toFixed(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类型断言只能够「欺骗」TypeScript 编译器，无法避免运行时的错误，反而滥用类型断言可能会导致运行时错误</span></span><br><span class="line"><span class="keyword">interface</span> Cat &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    run(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> Fish &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    swim(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">swim</span>(<span class="params">animal: Cat | Fish</span>) </span>&#123;</span><br><span class="line">    (animal <span class="keyword">as</span> Fish).swim();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> tom: Cat = &#123;</span><br><span class="line">    name: <span class="string">'Tom'</span>,</span><br><span class="line">    run() &#123; <span class="built_in">console</span>.log(<span class="string">'run'</span>) &#125;</span><br><span class="line">&#125;;</span><br><span class="line">swim(tom);</span><br></pre></td></tr></table></figure></li><li><p>相等</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">value * <span class="number">5</span>;</span><br><span class="line"><span class="comment">// equality</span></span><br><span class="line"><span class="keyword">if</span> (value === <span class="number">123</span>) &#123; </span><br><span class="line">    value * <span class="number">5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>类型防护/类型收缩</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> value === <span class="string">'string'</span></span><br></pre></td></tr></table></figure></li><li><p>断言函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reg <span class="keyword">instanceof</span> <span class="built_in">RegExp</span></span><br></pre></td></tr></table></figure></li></ol></li></ol><h3 id="type-和-interface-区别"><a href="#type-和-interface-区别" class="headerlink" title="type 和 interface 区别"></a>type 和 interface 区别</h3><ol><li>相同点：都可以描述一个对象或者函数</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// interface</span></span><br><span class="line"><span class="keyword">interface</span> User &#123;</span><br><span class="line">  name: <span class="built_in">string</span></span><br><span class="line">  age: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> SetUser &#123;</span><br><span class="line">  (name: <span class="built_in">string</span>, age: <span class="built_in">number</span>): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type</span></span><br><span class="line"><span class="keyword">type</span> User = &#123;</span><br><span class="line">  name: <span class="built_in">string</span></span><br><span class="line">  age: <span class="built_in">number</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> SetUser = (name: <span class="built_in">string</span>, age: <span class="built_in">number</span>): <span class="built_in">void</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** interface可以extends，但type是不允许extends和implement的，但是type缺可以通过交叉类型实现interface的 extend行为，并且两者并不是相互独立的，也就是说interface 可以extends type, type也可以与interface类型交叉，虽然效果差不多，但是两者语法不同</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// interface extends interface</span></span><br><span class="line"><span class="keyword">interface</span> Name &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> User <span class="keyword">extends</span> Name &#123;</span><br><span class="line">  age: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type 与 type 交叉</span></span><br><span class="line"><span class="keyword">type</span> Name = &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> User = Name &amp; &#123; age: <span class="built_in">number</span>  &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// interface extends type</span></span><br><span class="line"><span class="keyword">type</span> Name = &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> User <span class="keyword">extends</span> Name &#123;</span><br><span class="line">  age: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type 与 interface 交叉</span></span><br><span class="line"><span class="keyword">interface</span> Name &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> User = Name &amp; &#123;</span><br><span class="line">  age: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>不同点：</li></ul><p>type 可以声明基本类型别名，联合类型（使用 | 分隔每个类型），元组等类型，还可以使用 typeof 获取实例的类型进行赋值，但不允许重复声明相同名称</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基本类型别名</span></span><br><span class="line"><span class="keyword">type</span> Name = <span class="built_in">string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 联合类型</span></span><br><span class="line"><span class="keyword">interface</span> Dog &#123;</span><br><span class="line">    wong();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> Cat &#123;</span><br><span class="line">    miao();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> Pet = Dog | Cat</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体定义数组每个位置的类型</span></span><br><span class="line"><span class="keyword">type</span> PetList = [Dog, Pet]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当你想获取一个变量的类型时，使用 typeof</span></span><br><span class="line"><span class="keyword">let</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line"><span class="keyword">type</span> B = <span class="keyword">typeof</span> div</span><br><span class="line"></span><br><span class="line"><span class="comment">// 其他骚操作</span></span><br><span class="line"><span class="keyword">type</span> StringOrNumber = <span class="built_in">string</span> | <span class="built_in">number</span>;  </span><br><span class="line"><span class="keyword">type</span> Text = <span class="built_in">string</span> | &#123; text: <span class="built_in">string</span> &#125;;  </span><br><span class="line"><span class="keyword">type</span> NameLookup = Dictionary&lt;<span class="built_in">string</span>, Person&gt;;  </span><br><span class="line"><span class="keyword">type</span> Callback&lt;T&gt; = <span class="function">(<span class="params">data: T</span>) =&gt;</span> <span class="built_in">void</span>;  </span><br><span class="line"><span class="keyword">type</span> Pair&lt;T&gt; = [T, T];  </span><br><span class="line"><span class="keyword">type</span> Coordinates = Pair&lt;<span class="built_in">number</span>&gt;;  </span><br><span class="line"><span class="keyword">type</span> Tree&lt;T&gt; = T | &#123; left: Tree&lt;T&gt;, right: Tree&lt;T&gt; &#125;;</span><br></pre></td></tr></table></figure><p>interface 允许重复声明(合并)</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> User &#123;</span><br><span class="line"> name: <span class="built_in">string</span></span><br><span class="line"> age: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> User &#123;</span><br><span class="line"> sex: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">User 接口为 &#123;</span></span><br><span class="line"><span class="comment"> name: string</span></span><br><span class="line"><span class="comment"> age: number</span></span><br><span class="line"><span class="comment"> sex: string</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ul><li>建议</li></ul><p>如果不清楚什么时候用interface/type，能用 interface 实现，就用 interface , 如果不能就用 type</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;个人typescript学习笔记，加深记忆使用，方便自己查阅。分为基础篇、进阶篇、爬坑篇，客官各取所需&lt;/p&gt;
&lt;h2 id=&quot;基础篇&quot;&gt;&lt;a href=&quot;#基础篇&quot; class=&quot;headerlink&quot; title=&quot;基础篇&quot;&gt;&lt;/a&gt;基础篇&lt;/h2&gt;&lt;h3 id=&quot;00
      
    
    </summary>
    
      <category term="typescript" scheme="https://liwenxin-jam.github.io/categories/typescript/"/>
    
    
      <category term="前端" scheme="https://liwenxin-jam.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>阐述__proto__和prototype的关系</title>
    <link href="https://liwenxin-jam.github.io/2020/03/12/%E9%98%90%E8%BF%B0__proto__%E5%92%8Cprototype%E7%9A%84%E5%85%B3%E7%B3%BB/"/>
    <id>https://liwenxin-jam.github.io/2020/03/12/阐述__proto__和prototype的关系/</id>
    <published>2020-03-12T14:21:15.000Z</published>
    <updated>2021-04-13T14:01:23.965Z</updated>
    
    <content type="html"><![CDATA[<p>原型是 javascript 面向对象编程中非常重要的概念，而且并不是那么容易懂。偶然看到一个题目：阐述 proto 和 prototype 的关系。看到这个问题的时候，我的脑海浮现出一些概念，但却说不出来</p><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><ul><li>使用构造函数创建对象，Person 就是一个构造函数，通过 new 创建了 person1 对象实例，其实构造函数就和普通函数没有多大区别，首字母大写只是约定俗成，不大写照样可以</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person()</span><br><span class="line">person.name = <span class="string">'xx'</span></span><br><span class="line"><span class="built_in">console</span>.log(person.name)</span><br></pre></td></tr></table></figure><h2 id="prototype"><a href="#prototype" class="headerlink" title="prototype"></a>prototype</h2><ul><li>Person 构造函数下有一个 prototype 属性，这个并不是构造函数专有，每个函数都会有一个 prototype 属性，这个属性是一个指针，指向一个对象，记住只有函数才有，并且通过 bind()绑定的也没有</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="comment">// 原型对象的好处是可以让所有对象实例共享它所包含的属性和方法</span></span><br><span class="line">Person.prototype.name = <span class="string">'xx'</span></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person()</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person()</span><br><span class="line"><span class="built_in">console</span>.log(person1.name)</span><br><span class="line"><span class="built_in">console</span>.log(person2.name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">name</span>: <span class="string">'xx'</span> &#125;</span><br><span class="line"><span class="built_in">console</span>.log(obj.prototype) <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="built_in">Object</span>.prototype.toString.bind(<span class="built_in">Array</span>)</span><br><span class="line"><span class="built_in">console</span>.log(a.prototype) <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><h2 id="proto"><a href="#proto" class="headerlink" title="proto"></a><strong>proto</strong></h2><ul><li>在 person1 和 person2 实例对象下面有一个[[prototype]],其实没有标准的方式可以访问它，但是主流浏览器上在每个对象上(null 除外)都支持一个属性,那就是 proto，这个属性会指向该对象的原型</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person()</span><br><span class="line">person1.__proto__ === Person.prototype <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h2><ul><li>原型对象(Person.prototype)下 constructor 属性将原型对象指向关联的构造函数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">Person.prototype.constructor === Person <span class="comment">// true</span></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person()</span><br><span class="line">person1.constructor === Person <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="hasOwnProperty-NaN"><a href="#hasOwnProperty-NaN" class="headerlink" title="hasOwnProperty"></a>hasOwnProperty</h2><ul><li>如何检测一个属性存在于实例中，还是原型中?使用方法 hasOwnProperty，属性只有存在于实例中才会返回 true</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person()</span><br><span class="line"><span class="comment">// 实例属性</span></span><br><span class="line">person1.hasOwnProperty(<span class="string">'name'</span>)</span><br></pre></td></tr></table></figure><h2 id="in"><a href="#in" class="headerlink" title="in"></a>in</h2><ul><li>in 则会遍历所有属性，不管是实例上的，还是原型上的，in 操作符有两种使用方式，单独使用和在 for-in 循环中使用</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">Person.prototype.age = <span class="string">'20'</span></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person()</span><br><span class="line">person1.name = <span class="string">'xx'</span></span><br><span class="line"><span class="string">'age'</span> <span class="keyword">in</span> person1 <span class="comment">// true</span></span><br><span class="line"><span class="string">'name'</span> <span class="keyword">in</span> person1 <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Object.keys() 此方法可以获取对象的所有可枚举的属性的名字</span></span><br><span class="line"><span class="keyword">var</span> keys = <span class="built_in">Object</span>.keys(person1)</span><br><span class="line"><span class="built_in">console</span>.log(keys) <span class="comment">// ["name"]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> keys = <span class="built_in">Object</span>.keys(Person.prototype)</span><br><span class="line"><span class="built_in">console</span>.log(keys) <span class="comment">// ["age"]</span></span><br></pre></td></tr></table></figure><h2 id="Object-prototype-有原型吗"><a href="#Object-prototype-有原型吗" class="headerlink" title="Object.prototype 有原型吗"></a>Object.prototype 有原型吗</h2><ul><li>所有的原型最终都会指向 Object.prototype，所以对象的很多方法其实都是继承于此，比如 toString()、valueOf()，前面用到的 hasOwnProperty，甚至是 constructor、<strong>proto</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.__proto__ ) <span class="comment">// null</span></span><br></pre></td></tr></table></figure><h2 id="镇楼图"><a href="#镇楼图" class="headerlink" title="镇楼图"></a>镇楼图</h2><p><img src="/images/prototype.webp" alt="prototype"></p><ul><li>参考文献<br>1、<a href="https://www.jianshu.com/p/7d58f8f45557" target="_blank" rel="noopener">一篇文章看懂<em>proto</em>和prototype的关系及区别</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;原型是 javascript 面向对象编程中非常重要的概念，而且并不是那么容易懂。偶然看到一个题目：阐述 proto 和 prototype 的关系。看到这个问题的时候，我的脑海浮现出一些概念，但却说不出来&lt;/p&gt;
&lt;h2 id=&quot;构造函数&quot;&gt;&lt;a href=&quot;#构造函数&quot;
      
    
    </summary>
    
      <category term="javascript" scheme="https://liwenxin-jam.github.io/categories/javascript/"/>
    
    
      <category term="前端" scheme="https://liwenxin-jam.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>求无序数组第几大的数字</title>
    <link href="https://liwenxin-jam.github.io/2020/03/03/%E6%B1%82%E6%97%A0%E5%BA%8F%E6%95%B0%E7%BB%84%E7%AC%AC%E5%87%A0%E5%A4%A7%E7%9A%84%E6%95%B0%E5%AD%97/"/>
    <id>https://liwenxin-jam.github.io/2020/03/03/求无序数组第几大的数字/</id>
    <published>2020-03-03T15:12:51.000Z</published>
    <updated>2021-04-12T13:52:54.934Z</updated>
    
    <content type="html"><![CDATA[<p>编写一个方法，该方法接收两个参数，分别为 k 和 一个无序的纯数字数组。该方法在执行后，会返回数组中第 k 大的数字。特别注意，如果数组中，有两位数值一样的数字，同数值数字排名并列。如 [3,1,3,2,5,4,5] 中，第 1 大的数字为 5，第 2 大的数字为 4，第 5 大的数字为 1？</p><h2 id="求无序数组第几大的数字"><a href="#求无序数组第几大的数字" class="headerlink" title="求无序数组第几大的数字"></a>求无序数组第几大的数字</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMaxNumBySortArr</span>(<span class="params">k, arr</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 排序 + 反转，实际为降序排序</span></span><br><span class="line">  <span class="keyword">const</span> descArr = arr.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> b - a)</span><br><span class="line">  <span class="comment">// 去重</span></span><br><span class="line">  <span class="keyword">const</span> removeDuplicateArr = <span class="keyword">new</span> <span class="built_in">Set</span>(descArr)</span><br><span class="line">  <span class="comment">// 将类数组转回数组</span></span><br><span class="line">  <span class="keyword">const</span> result = <span class="built_in">Array</span>.from(removeDuplicateArr)</span><br><span class="line">  <span class="comment">// 是否存在的最大数</span></span><br><span class="line">  <span class="keyword">const</span> maxNum = result[k - <span class="number">1</span>]</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> maxNum !== <span class="string">'undefined'</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(maxNum)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'找不到匹配的第几大数'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 校验</span></span><br><span class="line">getMaxNumBySortArr(<span class="number">1</span>, [<span class="number">3</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;编写一个方法，该方法接收两个参数，分别为 k 和 一个无序的纯数字数组。该方法在执行后，会返回数组中第 k 大的数字。特别注意，如果数组中，有两位数值一样的数字，同数值数字排名并列。如 [3,1,3,2,5,4,5] 中，第 1 大的数字为 5，第 2 大的数字为 4，第 
      
    
    </summary>
    
      <category term="javascript" scheme="https://liwenxin-jam.github.io/categories/javascript/"/>
    
    
      <category term="前端" scheme="https://liwenxin-jam.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>call、apply、bind探索之路</title>
    <link href="https://liwenxin-jam.github.io/2020/02/13/call%E3%80%81apply%E3%80%81bind%E6%8E%A2%E7%B4%A2%E4%B9%8B%E8%B7%AF/"/>
    <id>https://liwenxin-jam.github.io/2020/02/13/call、apply、bind探索之路/</id>
    <published>2020-02-13T14:23:00.000Z</published>
    <updated>2021-04-12T13:28:18.206Z</updated>
    
    <content type="html"><![CDATA[<p>call/apply 改变了函数的 this 上下文后马上执行该函数，返回 fun 的执行结果。bind 则是返回改变了上下文后的函数，不执行该函数，返回 fun 的拷贝，并指定了 fun 的 this 指向，保存了 fun 的参数。</p><h4 id="语法糖格式"><a href="#语法糖格式" class="headerlink" title="语法糖格式"></a>语法糖格式</h4><ul><li>apply 是以 a 开头，它传给 fun 的参数是 Array，也是以 a 开头的。</li></ul><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span>.<span class="title">call</span></span>(thisArg, param1, param2, ...)</span><br><span class="line"><span class="function"><span class="keyword">fun</span>.<span class="title">apply</span></span>(thisArg, [param1,param2,...])</span><br><span class="line"><span class="function"><span class="keyword">fun</span>.<span class="title">bind</span></span>(thisArg, param1, param2, ...)</span><br></pre></td></tr></table></figure><h4 id="回调函数-this-丢失问题"><a href="#回调函数-this-丢失问题" class="headerlink" title="回调函数 this 丢失问题"></a>回调函数 this 丢失问题</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Page</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(callBack) &#123;</span><br><span class="line">    <span class="keyword">this</span>.className = <span class="string">'Page'</span></span><br><span class="line">    <span class="comment">// callBack() // 直接执行的话 由于class 内部是严格模式，所以this 实际指向的是 undefined</span></span><br><span class="line">    <span class="keyword">this</span>.MessageCallBack = callBack <span class="comment">//</span></span><br><span class="line">    <span class="keyword">this</span>.MessageCallBack(<span class="string">'发给注册页面的信息'</span>) <span class="comment">// 执行PageA的回调函数</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PageA</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.className = <span class="string">'PageA'</span></span><br><span class="line">    <span class="comment">// 回调函数this丢失问题，绑定回调函数的this指向为PageA</span></span><br><span class="line">    <span class="comment">// PS： 这也是为什么react的render函数在绑定回调函数的时候，也要使用bind绑定一下this的指向，也是因为同样的问题以及原理。</span></span><br><span class="line">    <span class="keyword">this</span>.pageClass = new Page(<span class="keyword">this</span>.handleMessage.bind(<span class="keyword">this</span>)) <span class="comment">// 注册页面 传递回调函数 问题在这里</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 与页面通信回调</span></span><br><span class="line">  handleMessage(msg) &#123;</span><br><span class="line">    console.log(<span class="string">'处理通信'</span>, <span class="keyword">this</span>.className, msg) <span class="comment">// 'Page' this指向错误</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">new PageA()</span><br></pre></td></tr></table></figure><h4 id="经典作用域问题"><a href="#经典作用域问题" class="headerlink" title="经典作用域问题"></a>经典作用域问题</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i) <span class="comment">// 依次输出：6 6 6 6 6</span></span><br><span class="line">  &#125;, i * <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'闭包:'</span>, i); <span class="comment">// 依次输出：1 2 3 4 5</span></span><br><span class="line">    &#125;, i * <span class="number">1000</span>);</span><br><span class="line">  &#125;(i));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="comment">// 缓存参数</span></span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'bind'</span>, i) <span class="comment">// 依次输出：1 2 3 4 5</span></span><br><span class="line">  &#125;.bind(<span class="literal">null</span>, i), i * <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="你能手写实现一个-call-吗？"><a href="#你能手写实现一个-call-吗？" class="headerlink" title="你能手写实现一个 call 吗？"></a>你能手写实现一个 call 吗？</h4><ul><li>1、根据 call 的规则设置上下文对象,也就是 this 的指向。</li><li>2、通过设置 context 的属性,将函数的 this 指向隐式绑定到 context 上</li><li>3、通过隐式绑定执行函数并传递参数。</li><li>4、删除临时属性，返回函数执行结果</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.myCall = <span class="function"><span class="keyword">function</span>(<span class="params">context, ...arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> ([<span class="literal">null</span>, <span class="literal">undefined</span>].includes(context)) &#123;</span><br><span class="line">    <span class="comment">// 指定为 null 和 undefined 的 this 值会自动指向全局对象(浏览器中为window)</span></span><br><span class="line">    context = <span class="built_in">window</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    context = <span class="built_in">Object</span>(context) <span class="comment">// 值为原始值（数字，字符串，布尔值）的 this 会指向该原始值的实例对象</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> specialPrototype = <span class="built_in">Symbol</span>(<span class="string">'特殊属性Symbol'</span>) <span class="comment">// 用于临时储存函数</span></span><br><span class="line">  context[specialPrototype] = <span class="keyword">this</span>; <span class="comment">// 函数的this指向隐式绑定到context上</span></span><br><span class="line">  <span class="keyword">let</span> result = context[specialPrototype](...arr); <span class="comment">// 通过隐式绑定执行函数并传递参数</span></span><br><span class="line">  <span class="keyword">delete</span> context[specialPrototype]; <span class="comment">// 删除上下文对象的属性</span></span><br><span class="line">  <span class="keyword">return</span> result; <span class="comment">// 返回函数执行结果</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">15</span>, <span class="number">6</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">16</span>];</span><br><span class="line"><span class="keyword">const</span> max1 = <span class="built_in">Math</span>.max.call(<span class="built_in">Math</span>, ...arr); <span class="comment">// 16</span></span><br><span class="line"><span class="keyword">const</span> max2 = <span class="built_in">Math</span>.max.myCall(<span class="built_in">Math</span>, ...arr); <span class="comment">// 16</span></span><br><span class="line"><span class="built_in">console</span>.log(max1, max2)</span><br></pre></td></tr></table></figure><p>你能手写实现一个 call 吗？<br>1、根据 call 的规则设置上下文对象,也就是 this 的指向。<br>2、通过设置 context 的属性,将函数的 this 指向隐式绑定到 context 上<br>3、通过隐式绑定执行函数并传递参数。<br>4、删除临时属性，返回函数执行结果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.myCall = <span class="function"><span class="keyword">function</span>(<span class="params">context, ...arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> ([<span class="literal">null</span>, <span class="literal">undefined</span>].includes(context)) &#123;</span><br><span class="line">    <span class="comment">// 指定为 null 和 undefined 的 this 值会自动指向全局对象(浏览器中为window)</span></span><br><span class="line">    context = <span class="built_in">window</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    context = <span class="built_in">Object</span>(context) <span class="comment">// 值为原始值（数字，字符串，布尔值）的 this 会指向该原始值的实例对象</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> specialPrototype = <span class="built_in">Symbol</span>(<span class="string">'特殊属性Symbol'</span>) <span class="comment">// 用于临时储存函数</span></span><br><span class="line">  context[specialPrototype] = <span class="keyword">this</span>; <span class="comment">// 函数的this指向隐式绑定到context上</span></span><br><span class="line">  <span class="keyword">let</span> result = context[specialPrototype](...arr); <span class="comment">// 通过隐式绑定执行函数并传递参数</span></span><br><span class="line">  <span class="keyword">delete</span> context[specialPrototype]; <span class="comment">// 删除上下文对象的属性</span></span><br><span class="line">  <span class="keyword">return</span> result; <span class="comment">// 返回函数执行结果</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">15</span>, <span class="number">6</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">16</span>];</span><br><span class="line"><span class="keyword">const</span> max1 = <span class="built_in">Math</span>.max.call(<span class="built_in">Math</span>, ...arr); <span class="comment">// 16</span></span><br><span class="line"><span class="keyword">const</span> max2 = <span class="built_in">Math</span>.max.myCall(<span class="built_in">Math</span>, ...arr); <span class="comment">// 16</span></span><br><span class="line"><span class="built_in">console</span>.log(max1, max2)</span><br></pre></td></tr></table></figure><h4 id="你能手写实现一个-apply-吗？"><a href="#你能手写实现一个-apply-吗？" class="headerlink" title="你能手写实现一个 apply 吗？"></a>你能手写实现一个 apply 吗？</h4><ul><li>1、传递给函数的参数处理，不太一样，其他部分跟 call 一样。</li><li>2、apply 接受第二个参数为类数组对象, 这里用了 JavaScript 权威指南中判断是否为类数组对象的方法。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.myApply = <span class="function"><span class="keyword">function</span>(<span class="params">context</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (context === <span class="literal">null</span> || context === <span class="literal">undefined</span>) &#123;</span><br><span class="line">    context = <span class="built_in">window</span> <span class="comment">// 指定为 null 和 undefined 的 this 值会自动指向全局对象(浏览器中为window)</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    context = <span class="built_in">Object</span>(context) <span class="comment">// 值为原始值（数字，字符串，布尔值）的 this 会指向该原始值的实例对象</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// JavaScript权威指南判断是否为类数组对象</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">isArrayLike</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (o &amp;&amp; <span class="comment">// o不是null、undefined等</span></span><br><span class="line">      <span class="keyword">typeof</span> o === <span class="string">'object'</span> &amp;&amp; <span class="comment">// o是对象</span></span><br><span class="line">      <span class="built_in">isFinite</span>(o.length) &amp;&amp; <span class="comment">// o.length是有限数值</span></span><br><span class="line">      o.length &gt;= <span class="number">0</span> &amp;&amp; <span class="comment">// o.length为非负值</span></span><br><span class="line">      o.length === <span class="built_in">Math</span>.floor(o.length) &amp;&amp; <span class="comment">// o.length是整数</span></span><br><span class="line">      o.length &lt; <span class="number">4294967296</span>) <span class="comment">// o.length &lt; 2^32</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> specialPrototype = <span class="built_in">Symbol</span>(<span class="string">'特殊属性Symbol'</span>) <span class="comment">// 用于临时储存函数</span></span><br><span class="line">  context[specialPrototype] = <span class="keyword">this</span>; <span class="comment">// 隐式绑定this指向到context上</span></span><br><span class="line">  <span class="keyword">let</span> args = <span class="built_in">arguments</span>[<span class="number">1</span>]; <span class="comment">// 获取参数数组</span></span><br><span class="line">  <span class="keyword">let</span> result</span><br><span class="line">  <span class="comment">// 处理传进来的第二个参数</span></span><br><span class="line">  <span class="keyword">if</span> (args) &#123;</span><br><span class="line">    <span class="comment">// 是否传递第二个参数</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">Array</span>.isArray(args) &amp;&amp; !isArrayLike(args)) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'myApply 第二个参数不为数组并且不为类数组对象抛出错误'</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      args = <span class="built_in">Array</span>.from(args) <span class="comment">// 预防是类数组而不是真正的数组，需要转为数组</span></span><br><span class="line">      result = context[specialPrototype](...args); <span class="comment">// 执行函数并展开数组，传递函数参数</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    result = context[specialPrototype](); <span class="comment">// 执行函数</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">delete</span> context[specialPrototype]; <span class="comment">// 删除上下文对象的属性</span></span><br><span class="line">  <span class="keyword">return</span> result; <span class="comment">// 返回函数执行结果</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">15</span>, <span class="number">6</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">16</span>];</span><br><span class="line"><span class="keyword">const</span> max1 = <span class="built_in">Math</span>.max.apply(<span class="built_in">Math</span>, arr); <span class="comment">// 16</span></span><br><span class="line"><span class="keyword">const</span> max2 = <span class="built_in">Math</span>.max.myApply(<span class="built_in">Math</span>, arr); <span class="comment">// 16</span></span><br><span class="line"><span class="built_in">console</span>.log(max1, max2)</span><br></pre></td></tr></table></figure><h4 id="你能手写实现一个-bind-吗？"><a href="#你能手写实现一个-bind-吗？" class="headerlink" title="你能手写实现一个 bind 吗？"></a>你能手写实现一个 bind 吗？</h4><ul><li>1.拷贝源函数:<br>通过变量储存源函数<br>使用 Object.create 复制源函数的 prototype 给 fToBind</li><li>2.返回拷贝的函数</li><li>3.调用拷贝的函数：<br>new 调用判断：通过 instanceof 判断函数是否通过 new 调用，来决定绑定的 context<br>绑定 this+传递参数<br>返回源函数的执行结果</li></ul><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Function.prototype.myBind = <span class="function"><span class="keyword">function</span><span class="params">(objThis, <span class="rest_arg">...params</span>)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> thisFn = <span class="keyword">this</span>; <span class="comment">// 存储源函数以及上方的params(函数参数)</span></span><br><span class="line">  <span class="comment">// 对返回的函数 secondParams 二次传参</span></span><br><span class="line">  let fToBind = <span class="function"><span class="keyword">function</span><span class="params">(<span class="rest_arg">...secondParams</span>)</span> </span>&#123;</span><br><span class="line">    console.log(<span class="string">'secondParams'</span>, secondParams, ...secondParams)</span><br><span class="line">    <span class="keyword">const</span> isNew = <span class="keyword">this</span> <span class="keyword">instanceof</span> fToBind <span class="comment">// this是否是fToBind的实例 也就是返回的fToBind是否通过new调用</span></span><br><span class="line">    <span class="keyword">const</span> context = isNew ? <span class="keyword">this</span> : Object(objThis) <span class="comment">// new调用就绑定到this上,否则就绑定到传入的objThis上</span></span><br><span class="line">    <span class="keyword">return</span> thisFn.call(context, ...params, ...secondParams); <span class="comment">// 用call调用源函数绑定this的指向并传递参数,返回执行结果</span></span><br><span class="line">  &#125;;</span><br><span class="line">  fToBind.prototype = Object.create(thisFn.prototype); <span class="comment">// 复制源函数的prototype给fToBind</span></span><br><span class="line">  <span class="keyword">return</span> fToBind; <span class="comment">// 返回拷贝的函数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleMessage</span><span class="params">(message)</span> </span>&#123;</span><br><span class="line">  console.log(message)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> bind1 = handleMessage.bind(<span class="literal">null</span>, <span class="string">'hello wrold!'</span>); <span class="comment">// 16</span></span><br><span class="line"><span class="keyword">const</span> bind2 = handleMessage.myBind(<span class="literal">null</span>, <span class="string">'hello jam!'</span>); <span class="comment">// 16</span></span><br><span class="line">console.log(bind1, bind2)</span><br><span class="line">console.log(bind1(), bind2())</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> bind3 = <span class="keyword">new</span> bind2(<span class="string">'hello xx'</span>)</span><br><span class="line">console.log(bind3)</span><br></pre></td></tr></table></figure><ul><li>参考文献<br>1、<a href="https://mp.weixin.qq.com/s?__biz=MzA5NzkwNDk3MQ==&amp;mid=2650590217&amp;idx=1&amp;sn=ee59322d23c062f0ae61097b8b6de64c" target="_blank" rel="noopener">面试官想知道你有多理解 call,apply,bind？</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;call/apply 改变了函数的 this 上下文后马上执行该函数，返回 fun 的执行结果。bind 则是返回改变了上下文后的函数，不执行该函数，返回 fun 的拷贝，并指定了 fun 的 this 指向，保存了 fun 的参数。&lt;/p&gt;
&lt;h4 id=&quot;语法糖格式&quot;&gt;
      
    
    </summary>
    
      <category term="javascript" scheme="https://liwenxin-jam.github.io/categories/javascript/"/>
    
    
      <category term="前端" scheme="https://liwenxin-jam.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>vue2.0学习心得</title>
    <link href="https://liwenxin-jam.github.io/2020/01/25/vue%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/"/>
    <id>https://liwenxin-jam.github.io/2020/01/25/vue学习心得/</id>
    <published>2020-01-25T12:12:24.000Z</published>
    <updated>2021-04-13T14:53:00.735Z</updated>
    
    <content type="html"><![CDATA[<p>vue 是一个 mvvm 框架(库)，它和 angular 类似，但相对比较容易上手、小巧。具体详情可以查阅<a href="https://cn.vuejs.org/" title="vue官网" target="_blank" rel="noopener">vue 官网</a></p><h2 id="1、初始化"><a href="#1、初始化" class="headerlink" title="1、初始化"></a>1、初始化</h2><ul><li>vue ui (可视化)</li><li>vue create ‘projectName’ (方向键上下切换，空格选择，回车确定)</li></ul><h2 id="2、生命周期"><a href="#2、生命周期" class="headerlink" title="2、生命周期"></a>2、生命周期</h2><ul><li>生命周期-初始化阶段<br>Vue 实例的生命周期，可以分为 4 个阶段：初始化阶段、模板编译阶段、挂载阶段、卸载阶段<br>new Vue()到 created 之间的阶段叫作初始化阶段（beforeCreate、created）<br>主要目的实例化一些属性、事件及响应式数据，如 props、methods、data、computed、watch、provide 和 inject 等</li><li>生命周期-模板编译阶段<br>在 created 钩子函数与 beforeMount 钩子函数之间的阶段是模板编译阶段。<br>主要目的是将模板编译为渲函数 ，只存在于完整版中。<br>根据是否需要编译器分为: 运行时版本和完整版（template 模板、render 函数）</li><li>生命周期-挂载阶段<br>beforeMount 钩子函数到 mounted 钩子函数 之间是持载阶段<br>通俗地讲，就是将模板渲染到指定的 Dom 元素中。在挂载的过程中，vue 会开启 watcher 来持续 追踪依赖的变化<br>当数据（状态）发生变化时，watcher 会通知虚拟 Dom 重新渲染视图，在渲染视图前触发 beforeUpdate 钩子函数，渲染完毕后触发 updated 钩子函数 ，这就是常说的响应式<br>已挂载阶段（beforeUpdate、updated）</li><li>生命周期-卸载阶段<br>卸载阶段（beforeDestroy、destroyed）<br>会将自身从父组件中删除，取消实例上所有依赖的追踪并且移除所有的事件监听器</li><li>生命周期-activated 和 deactivated<br>将需要缓存的组件缓存在内存当中，下次再次访问的时候，直接从缓存中读取，而不是重新创建或者销毁。在 keep-alive 下有效<br>activate：是在被包裹组建被激活的状态下使用的生命周期钩子<br>deactivated：在被包裹组件停止使用时调用</li><li>生命周期-errorCaptured<br>errorCaptured 钩子函数的作用是捕获来自子孙组件的错误，有三个参数（错误对象、发生错误的组件实例、包含错误来源信息的字符串），可以返回 false，阻止该错误继续向上传播。类似 try catch 可以不停向上抛<br>相关代码源码路径：vue/src/core/util/error.js<br>源码调试，在想断点调试打上 debugger，重启本地服务</li></ul><h2 id="3、双向绑定"><a href="#3、双向绑定" class="headerlink" title="3、双向绑定"></a>3、双向绑定</h2><ul><li>Input 为受控组件，它总会显示 Vue 绑定值。<br>通常情况下，应当处理 input 事件，并更新组件的绑定值（或使用 v-model）。否则，输入框内显示的值将不会改变。</li></ul><h2 id="4、组件和组件通信"><a href="#4、组件和组件通信" class="headerlink" title="4、组件和组件通信"></a>4、组件和组件通信</h2><ul><li>1.props / $emit 适用于父子组件通信这种方法是 Vue 组件的基础，相信大部分同学耳闻能详，所以此处就不举例展开介绍。</li><li>2.ref  与 $parent / $children适用于父子组件通信ref：如果在普通的 DOM 元素上使用，引用指向的就是 DOM 元素；如果用在子组件上，引用就指向组件实例$parent / $children：访问父 / 子实例</li><li>3.EventBus （$emit / $on）适用于父子、隔代、兄弟组件通信这种方法通过一个空的 Vue 实例/作为中央事件总线（事件中心），用它来触发事件和监听事件，从而实现任何组件间的通信，包括父子、隔代、兄弟组件。</li><li>4.$attrs/$listeners 适用于隔代组件通信$attrs：包含了父作用域中不被 prop 所识别 (且获取) 的特性绑定 ( class 和 style 除外 )。当一个组件没有声明任何 prop 时，这里会包含所有父作用域的绑定 ( class 和 style 除外 )，并且可以通过 v-bind=“$attrs” 传入内部组件。通常配合 inheritAttrs 选项一起使用。<code>$listeners</code>：包含了父作用域中的 (不含 .native 修饰器的) v-on 事件监听器。它可以通过 v-on=“$listeners” 传入内部组件</li><li>5.provide / inject 适用于隔代组件通信祖先组件中通过 provider 来提供变量，然后在子孙组件中通过 inject 来注入变量。provide / inject API 主要解决了跨级组件间的通信问题，不过它的使用场主要是子组件获取上级组件的状态，跨级组件间建立了一种主动提供与依赖注入的关系。</li><li>6.Vuex 适用于父子、隔代、兄弟组件通信 Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。每一个 Vuex 应用的核心就是 store（仓库）。“store” 基本上就是一个容器，它包含着你的应用中大部分的状态 ( state )。Vuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。改变 store 中的状态的唯一途径就是显式地提交 (commit) mutation。这样使得我们可以方便地跟踪每一个状态的变化</li></ul><h2 id="5、v-show-和-v-if-的区别是什么？"><a href="#5、v-show-和-v-if-的区别是什么？" class="headerlink" title="5、v-show 和 v-if 的区别是什么？"></a>5、v-show 和 v-if 的区别是什么？</h2><p>v-show  只是在 display: none  和 display: block  之间切换。无论初始条件是什么都会被渲染出来，后面只需要切换 CSS，DOM 还是一直保留着的。  v-if  的话就得说到 Vue 底层的编译了。当属性初始为 false  时，组件就不会被渲染，直到条件为 true，并且切换条件时会触发销毁/挂载组件，   并且基于 v-if  的这种惰性渲染机制，可以在必要的时候才去渲染组件，减少整个页面的初始渲染开销。</p><h2 id="6、keep-alive-组件有什么作用？"><a href="#6、keep-alive-组件有什么作用？" class="headerlink" title="6、keep-alive 组件有什么作用？"></a>6、keep-alive 组件有什么作用？</h2><p>如果你需要在组件切换的时候，保存一些组件的状态防止多次渲染，就可以使用 keep-alive  组件包裹需要保存的组件。   对于 keep-alive  组件来说，它拥有两个独有的生命周期钩子函数，分别为 activated  和 deactivated 。用 keep-alive  包裹的组件在切换时不会进行销毁，而是缓存到内存中并执行 deactivated  钩子函数，命中缓存渲染后会执行 actived  钩子函数。</p><h2 id="7、computed-和-watch-区别"><a href="#7、computed-和-watch-区别" class="headerlink" title="7、computed 和 watch 区别?"></a>7、computed 和 watch 区别?</h2><p>computed  是计算属性，依赖其他属性计算值，并且 computed  的值有缓存，只有当计算值变化才会返回内容。  watch  监听到值的变化就会执行回调，在回调中可以进行一些逻辑操作</p><h2 id="8、最佳实践-amp-踩坑记录"><a href="#8、最佳实践-amp-踩坑记录" class="headerlink" title="8、最佳实践 &amp; 踩坑记录"></a>8、最佳实践 &amp; 踩坑记录</h2><p>1、Vue 不能检测实时检测变动的复杂类型，例如对象和数组<br>解决方案：this.$set(obj, key, val) 、this.$set(arr, index, val)<br>2、event bus 多次触发<br>解决方案：$on 的事件可在 created 或 mounted 注册，但需在 beforeDestroy 或 destoryed 的时候使用用 $off 销毁否则在某些情况下会被被多次触发<br>3、变量命名<br>解决方案：变量名不要以<em>、$开头，因为名字以 \</em> 或 $ 开始的属性不会被 Vue 实例代理，因为它们可能与 Vue 的内置属性与 API 方法冲突。vue 内部需要用 vm.$data._property 访问它们。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;vue 是一个 mvvm 框架(库)，它和 angular 类似，但相对比较容易上手、小巧。具体详情可以查阅&lt;a href=&quot;https://cn.vuejs.org/&quot; title=&quot;vue官网&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;vue 官网
      
    
    </summary>
    
      <category term="vue" scheme="https://liwenxin-jam.github.io/categories/vue/"/>
    
    
      <category term="框架" scheme="https://liwenxin-jam.github.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>js基础和设计模式</title>
    <link href="https://liwenxin-jam.github.io/2019/12/04/js%E5%9F%BA%E7%A1%80%E5%92%8C%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>https://liwenxin-jam.github.io/2019/12/04/js基础和设计模式/</id>
    <published>2019-12-04T12:46:06.000Z</published>
    <updated>2021-04-12T13:28:18.208Z</updated>
    
    <content type="html"><![CDATA[<p>其实我个人在项目用过的模式也不多，对模式的概念的理解也没有那么抽象，所以最近在面试中如果面试官问到与模式相关的问题，自己感觉在对答过程中很郁闷，很多东西表达不清楚，于是就找了些相关资料，才会有这篇文章分享。JavaScript模式与前端的工作和成长密不可分，因为这确实不是一个简单的话题，所以我只能尽力用简单表达和例子阐明。</p><h4 id="1、基础概念"><a href="#1、基础概念" class="headerlink" title="1、基础概念"></a>1、基础概念</h4><ul><li><p>in 判断一个对象, 是否拥有某个属性(如果对象身上没有, 会到原型对象里面查找)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.address = <span class="string">'上海'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person(<span class="string">'jam'</span>, <span class="number">18</span>);</span><br><span class="line"><span class="comment">// 一定要注意, 不能直接写名称, 不然会被当做变量名处理, 要以字符串的形式来写</span></span><br><span class="line"><span class="comment">// console.log(name in p);  // 为啥是false?</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'name'</span> <span class="keyword">in</span> p);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'address'</span> <span class="keyword">in</span> p);</span><br></pre></td></tr></table></figure></li><li><p>hasOwnProperty: 只到对象自身查找</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.address = <span class="string">'上海'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person(<span class="string">'sz'</span>, <span class="number">18</span>);</span><br><span class="line"><span class="built_in">console</span>.log(p.hasOwnProperty(<span class="string">'name'</span>));</span><br><span class="line"><span class="built_in">console</span>.log(p.hasOwnProperty(<span class="string">'address'</span>));</span><br></pre></td></tr></table></figure></li><li><p>isPrototypeOf: 判断一个对象, 是否是某个实例的原型对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="built_in">console</span>.log(Person.prototype.isPrototypeOf(p)); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">var obj = &#123;</span></span><br><span class="line"><span class="comment">  name: 'xx'</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">Person.prototype = obj;</span></span><br><span class="line"><span class="comment">console.log(Person.prototype.isPrototypeOf(p)); // false</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  name: <span class="string">'xx'</span></span><br><span class="line">&#125;;</span><br><span class="line">Person.prototype = obj;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="built_in">console</span>.log(Person.prototype.isPrototypeOf(p2)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li><li><p>instanceOf : 判断一个对象, 是否是某个构造函数的原型链上</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="built_in">console</span>.log(p <span class="keyword">instanceof</span> Person); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  name: <span class="string">'xx'</span></span><br><span class="line">&#125;;</span><br><span class="line">Person.prototype = obj;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="built_in">console</span>.log(p2);</span><br><span class="line"><span class="built_in">console</span>.log(p2 <span class="keyword">instanceof</span> Person);</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>细细品味会发现isPrototypeOf、instanceOf两者的区别主要是：<br>    A.isPrototypeOf(B) 判断的是A对象是否存在于B对象的原型链之中<br>    A instanceof B  判断的是B.prototype是否存在与A的原型链之中<br>  结论：<br>　  如果 A.isPrototypeOf(B)  返回true 则B instanceof A 一定返回true</p></blockquote><ul><li><p>construnctor: 构造器</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span><span class="params">()</span> <span class="comment">&#123;&#125;</span></span></span><br><span class="line"><span class="function"><span class="title">var</span> <span class="title">p</span> = <span class="title">new</span> <span class="title">Person</span><span class="params">()</span>;</span></span><br><span class="line">console.log(p);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以沿着这条线找到类型名称</span></span><br><span class="line">console.log(p<span class="function">.<span class="keyword">constructor</span>.<span class="title">name</span>);</span></span><br><span class="line"></span><br><span class="line">Person.prototype = <span class="comment">&#123;</span></span><br><span class="line"><span class="comment">  constructor: Person, // 一定要设置, 否则就指向了Object</span></span><br><span class="line"><span class="comment">  name: 'sz',</span></span><br><span class="line"><span class="comment">  age: 18</span></span><br><span class="line"><span class="comment">&#125;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Person();</span><br><span class="line">console.log(p2<span class="function">.<span class="keyword">constructor</span>.<span class="title">name</span>);</span></span><br></pre></td></tr></table></figure></li><li><p>对象.属性的方法去访问属性的时候，先查找有没有对应的实例属性，如果有那么就直接使用。如果没有，那么就去该对象的原型对象上面去找，如果有那么就直接使用。如果没有，那么就接着查找原型对象的原型对象，如果有，那么就直接使用，如果没有，那么就继续上面的搜索过程，直到搜索到Object.prototype为止，如果还是没有找到就返回undefined或者是报错，原型链搜索的路径越长，查询属性所花费的时间就越多。注意：原型链搜索的路径越长，查询属性所花费的时间就越多，原则：就近原型</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 画出 arr 的完整原型图</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">console.log(arr<span class="function">.<span class="keyword">constructor</span>.<span class="title">name</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. Array的构造函数: Function</span></span><br><span class="line">console.log(<span class="keyword">Array</span>.__proto__<span class="function">.<span class="keyword">constructor</span>.<span class="title">name</span>);</span></span><br><span class="line"><span class="comment">// 2. Function的原型对象</span></span><br><span class="line"><span class="comment">// 3. Array的__proto__</span></span><br><span class="line"><span class="comment">// 4. Function的原型对象的constructor</span></span><br><span class="line">console.log(<span class="function"><span class="keyword">Function</span>.<span class="title">prototype</span>.<span class="title">constructor</span>.<span class="title">name</span>);</span> <span class="comment">// Function</span></span><br><span class="line"><span class="comment">// 5. Function对象的构造函数</span></span><br><span class="line">console.log(<span class="function"><span class="keyword">Function</span>.__<span class="title">proto__</span>.<span class="title">constructor</span>.<span class="title">name</span>);</span> <span class="comment">// 到头了</span></span><br><span class="line"><span class="comment">// 6. Function的__proto__: Function的原型对象</span></span><br><span class="line"><span class="comment">// 7. Array的原型对象的构造函数</span></span><br><span class="line">console.log(<span class="keyword">Array</span>.prototype.__proto__<span class="function">.<span class="keyword">constructor</span>.<span class="title">name</span>);</span> <span class="comment">// Object</span></span><br><span class="line"><span class="comment">// 8. Object的原型对象, constructor</span></span><br><span class="line"><span class="comment">// 9. Object的原型对象的构造函数</span></span><br><span class="line">console.log(<span class="keyword">Object</span>.prototype.__proto__); <span class="comment">// null 到头了</span></span><br><span class="line"><span class="comment">// 10. Object对象的构造函数</span></span><br><span class="line">console.log(<span class="keyword">Object</span>.__proto__<span class="function">.<span class="keyword">constructor</span>.<span class="title">name</span>);</span> <span class="comment">// Function</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span><span class="params">(<span class="keyword">name</span>)</span> <span class="comment">&#123;</span></span></span><br><span class="line"><span class="function"><span class="comment">  this.name = name;</span></span></span><br><span class="line"><span class="function"><span class="comment">  this.toString = function () &#123;</span></span></span><br><span class="line"><span class="function"><span class="comment">    console.log('我是增加在对象上的方法');</span></span></span><br><span class="line"><span class="function"><span class="comment">  &#125;</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.toString = <span class="function"><span class="keyword">function</span> <span class="params">()</span> <span class="comment">&#123;</span></span></span><br><span class="line"><span class="function"><span class="comment">  console.log('我是增加在原型对象上的方法');</span></span></span><br><span class="line"><span class="function"><span class="comment">&#125;</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = new Person(<span class="string">'sz'</span>);</span><br><span class="line">p.toString();</span><br></pre></td></tr></table></figure></li></ul><h4 id="2、浅拷贝和深拷贝"><a href="#2、浅拷贝和深拷贝" class="headerlink" title="2、浅拷贝和深拷贝"></a>2、浅拷贝和深拷贝</h4><ul><li><p>浅拷贝，拷贝属性。如果属性的值是引用类型的,那么子对象和父对象共享一块数据,修改了某个对象对另外一个对象有影响</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;name: <span class="string">'撩课'</span>, age: <span class="number">18</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 目标, 让obj2, 拥有obj内的所有属性</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    obj2[key] = obj[key];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(obj2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj3 = &#123;<span class="keyword">class</span>: <span class="string">'09'</span>&#125;;</span><br><span class="line"><span class="built_in">Object</span>.assign(obj3, obj, &#123;address: <span class="string">'上海'</span>&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(obj3);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = &#123;name: <span class="string">'张三'</span>, pets: [<span class="string">'小花'</span>, <span class="string">'小黑'</span>, <span class="string">'土豆'</span>]&#125;;</span><br><span class="line"><span class="keyword">var</span> copyP = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*for (var key in p) &#123;</span></span><br><span class="line"><span class="comment">  copyP[key] = p[key];</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认情况下, 全部都是浅拷贝</span></span><br><span class="line"><span class="built_in">Object</span>.assign(copyP, p);</span><br><span class="line">copyP.pets.push(<span class="string">'马铃薯'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(p);</span><br></pre></td></tr></table></figure></li><li><p>深拷贝</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 要拷贝的对象</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  name: <span class="string">'撩课'</span>,</span><br><span class="line">  age: <span class="number">18</span>,</span><br><span class="line">  friends: [<span class="string">'小花'</span>, <span class="string">'小黑'</span>],</span><br><span class="line">  goodF: &#123;</span><br><span class="line">    name: <span class="string">'小撩'</span>,</span><br><span class="line">    age: <span class="number">19</span>,</span><br><span class="line">    address: <span class="string">'上海'</span>,</span><br><span class="line">    pets: [&#123;<span class="attr">name</span>: <span class="string">'土豆'</span>&#125;, &#123;<span class="attr">name</span>: <span class="string">'马铃薯'</span>&#125;]</span><br><span class="line">  &#125;,</span><br><span class="line">  bir: <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 深拷贝fromObj面的所有属性/值, 到toObj对象里面</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param </span>fromObj 拷贝对象</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param </span>toObj   目标对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepCopyObj2NewObj</span>(<span class="params">fromObj, toObj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> fromObj) &#123;</span><br><span class="line">    <span class="keyword">var</span> fromValue = fromObj[key];</span><br><span class="line">    <span class="comment">// 如果是值类型，那么就直接拷贝赋值</span></span><br><span class="line">    <span class="keyword">if</span> (!isObj(fromValue)) &#123;</span><br><span class="line">      toObj[key] = fromValue;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 如果是引用类型，那么就再调用一次这个方法，</span></span><br><span class="line">      <span class="comment">// 去内部拷贝这个对象的所有属性</span></span><br><span class="line">      <span class="comment">//  fromValue是什么类型, 创建一个该类型的空对象</span></span><br><span class="line">      <span class="keyword">var</span> tmpObj = <span class="keyword">new</span> fromValue.constructor;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// console.log(tmpObj);</span></span><br><span class="line">      <span class="comment">// debugger;</span></span><br><span class="line">      deepCopyObj2NewObj(fromValue, tmpObj);</span><br><span class="line">      toObj[key] = tmpObj;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 辅助函数, 判定是否是对象</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param <span class="variable">obj</span></span></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@returns <span class="type">&#123;boolean&#125;</span></span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isObj</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> obj <span class="keyword">instanceof</span> <span class="built_in">Object</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 辅助函数, 判定是否是数组</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param <span class="variable">obj</span></span></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@returns <span class="type">&#123;boolean&#125;</span></span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isArray</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.isArray(obj);</span><br><span class="line">  <span class="comment">// Object.prototype.toString.call(obj) == '[object Array]'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> newObj = &#123;&#125;; <span class="comment">// 0x1111</span></span><br><span class="line">deepCopyObj2NewObj(obj, newObj);</span><br><span class="line">obj.goodF.pets[<span class="number">0</span>][<span class="string">'size'</span>] = <span class="string">'20px'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj);</span><br><span class="line"><span class="built_in">console</span>.log(newObj);</span><br></pre></td></tr></table></figure></li></ul><h4 id="3、原型链继承"><a href="#3、原型链继承" class="headerlink" title="3、原型链继承"></a>3、原型链继承</h4><ul><li><p>原型链继承</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 构造函数Person</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">'撩课学院'</span>;</span><br><span class="line">  <span class="keyword">this</span>.pets = [<span class="string">'小煤球'</span>, <span class="string">'Python'</span>];</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.run = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'跑'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 构造函数Student</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Stu</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.num = <span class="string">'itlike.com'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 构造父类的实例</span></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="comment">// 2. 并设置为子类的原型对象</span></span><br><span class="line">Stu.prototype = p;</span><br><span class="line"><span class="comment">// 3. 修复constructor指针</span></span><br><span class="line">Stu.prototype.<span class="keyword">constructor</span> = Stu;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 全部都继承</span></span><br><span class="line"><span class="keyword">var</span> stu = <span class="keyword">new</span> Stu();</span><br><span class="line"><span class="built_in">console</span>.log(stu);</span><br><span class="line"><span class="built_in">console</span>.log(stu.num);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(stu.name);</span><br><span class="line"><span class="built_in">console</span>.log(stu.pets);</span><br><span class="line">stu.run();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(stu.<span class="keyword">constructor</span>.name); <span class="comment">//stu</span></span><br></pre></td></tr></table></figure></li><li><p>寄生式组合继承，寄生式组合继承 = 寄生式(原型式继承+对象增加) + 原型链 + 借助构造函数继承</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, pets</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.pets = pets;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.run = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'跑'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">num, name, pets</span>) </span>&#123;</span><br><span class="line">  Person.call(<span class="keyword">this</span>, name, pets);</span><br><span class="line">  <span class="keyword">this</span>.num = num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.原型式继承</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Tmp</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Tmp.prototype = Person.prototype;</span><br><span class="line"><span class="keyword">var</span> stuPro = <span class="keyword">new</span> Tmp();</span><br><span class="line"><span class="comment">// 增强动作</span></span><br><span class="line">stuPro.constructor = Student;</span><br><span class="line"><span class="comment">// 原型链继承</span></span><br><span class="line">Student.prototype = stuPro;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> stu = <span class="keyword">new</span> Student(<span class="string">'001'</span>, <span class="string">'sz'</span>, [<span class="string">'小花'</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(stu);</span><br><span class="line">stu.run();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> stu2 = <span class="keyword">new</span> Student(<span class="string">'002'</span>,<span class="string">'王二小'</span>, [<span class="string">'土豆'</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(stu2);</span><br><span class="line">stu2.run();</span><br></pre></td></tr></table></figure></li></ul><h4 id="4、设计模式"><a href="#4、设计模式" class="headerlink" title="4、设计模式"></a>4、设计模式</h4><ul><li><p>工厂模式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 简单工厂模式: 给定原材料,加工出给定的产品</span></span><br><span class="line"><span class="comment">// 咖啡机</span></span><br><span class="line"><span class="comment">// 放入咖啡豆和水, 加工出不同比例的咖啡</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeCoffee</span>(<span class="params">dou, water</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">  obj.dou = dou;</span><br><span class="line">  obj.water = water;</span><br><span class="line">  obj.bili = dou / water;</span><br><span class="line">  <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> coffee = makeCoffee(<span class="number">1</span>, <span class="number">10</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'造出了纯度为'</span>, coffee.bili, <span class="string">'的咖啡'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> coffee2 = makeCoffee(<span class="number">2</span>, <span class="number">10</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'造出了纯度为'</span>, coffee2.bili, <span class="string">'的咖啡'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 复杂工厂模式</span></span><br><span class="line"><span class="comment">// 果汁厂(苹果汁, 橘子汁, 香蕉汁, ....)</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  *  果汁工厂</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">FruitMaker</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  *  对外招商</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param </span>type 类型</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param </span>meta 材料</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">FruitMaker.prototype.make = <span class="function"><span class="keyword">function</span> (<span class="params">type, meta</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 2.1 根据传入, 检测, 是否具备生产能力</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span>[type] === <span class="string">'function'</span>) &#123;</span><br><span class="line">    <span class="comment">// 2.2 如果具备, 则使用某条生产线, 开始生产产品</span></span><br><span class="line">    <span class="keyword">var</span> func = <span class="keyword">this</span>[type];</span><br><span class="line">    <span class="comment">// 2.3 修改生产厂家(对外统一)</span></span><br><span class="line">    func.prototype = FruitMaker.prototype;</span><br><span class="line">    <span class="comment">// 2.3 返回产品</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> func(meta);</span><br><span class="line">  &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="string">'很抱歉, 公司还不能生产这种产品, 后期会扩充生产线!'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 设置工厂具备能力-扩展生产线</span></span><br><span class="line">FruitMaker.prototype.extend = <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="keyword">this</span>[key] = obj[key];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 工厂扩展生产线</span></span><br><span class="line">FruitMaker.prototype.extend(&#123;</span><br><span class="line">  <span class="string">'Apple'</span>: <span class="function"><span class="keyword">function</span> (<span class="params">meta</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'造了一杯苹果汁, 材料有:'</span>, meta);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">'Pear'</span>: <span class="function"><span class="keyword">function</span> (<span class="params">meta</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'造了一杯梨汁, 材料有:'</span>, meta);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 实例化水果工厂</span></span><br><span class="line"><span class="keyword">var</span> maker = <span class="keyword">new</span> FruitMaker();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> appleObj = maker.make(<span class="string">'Apple'</span>, <span class="string">'一个苹果, 一斤水'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(appleObj.constructor.name);</span><br><span class="line"><span class="keyword">var</span> pearObj = maker.make(<span class="string">'Pear'</span>, <span class="string">'两个梨, 一吨水'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(pearObj.constructor.name);</span><br><span class="line"><span class="keyword">var</span> buzhidao = maker.make(<span class="string">'xxx'</span>);</span><br></pre></td></tr></table></figure></li><li><p>单例模式，实现的方式可以有几种</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全局变量的方式</span></span><br><span class="line"><span class="keyword">var</span> instance = <span class="literal">null</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Tool</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 1. 判断</span></span><br><span class="line">  <span class="keyword">if</span> (instance) &#123;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 2. 指向</span></span><br><span class="line">  instance = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">'撩课学院'</span>;</span><br><span class="line">  <span class="keyword">this</span>.intro = <span class="string">'喜欢IT, 就上撩课(itlike.com)'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 实例化</span></span><br><span class="line"><span class="keyword">var</span> t1 = <span class="keyword">new</span> Tool();</span><br><span class="line"><span class="keyword">var</span> t2 = <span class="keyword">new</span> Tool();</span><br><span class="line"><span class="keyword">var</span> t3 = <span class="keyword">new</span> Tool();</span><br><span class="line"><span class="built_in">console</span>.log(t1 === t2);</span><br><span class="line"><span class="built_in">console</span>.log(t3 === t2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 即时函数的方式</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> instance = <span class="literal">null</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Tool</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 判断</span></span><br><span class="line">    <span class="keyword">if</span> (instance) &#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2. 指向</span></span><br><span class="line">    instance = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">'xx'</span>;</span><br><span class="line">    <span class="keyword">this</span>.intro = <span class="string">'喜欢IT'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">window</span>.Tool = Tool;</span><br><span class="line">&#125;)(<span class="built_in">window</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> t1 = <span class="keyword">new</span> Tool();</span><br><span class="line"><span class="keyword">var</span> t2 = <span class="keyword">new</span> Tool();</span><br><span class="line"><span class="keyword">var</span> t3 = <span class="keyword">new</span> Tool();</span><br><span class="line"><span class="built_in">console</span>.log(t1 === t2);</span><br><span class="line"><span class="built_in">console</span>.log(t1 === t3);</span><br><span class="line">t1.name = <span class="string">'itlike'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(t1);</span><br><span class="line"><span class="built_in">console</span>.log(t2);</span><br><span class="line"><span class="built_in">console</span>.log(t3);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 惰性函数单例的方式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Tool</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> instance = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">'张三'</span>;</span><br><span class="line">  <span class="keyword">this</span>.age = <span class="number">18</span>;</span><br><span class="line">  <span class="comment">// 惰性函数, 函数只会在第一次被执行, 后面直接调用</span></span><br><span class="line">  Tool = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*var t1 = new Tool();</span></span><br><span class="line"><span class="comment">var t2 = new Tool();</span></span><br><span class="line"><span class="comment">console.log(t1 === t2);*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> t1 = <span class="keyword">new</span> Tool();</span><br><span class="line">Tool.prototype.run = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'跑'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> t2 = <span class="keyword">new</span> Tool();</span><br><span class="line"><span class="built_in">console</span>.log(t1 === t2);</span><br><span class="line">t2.run();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 原型对象的方式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Tool</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 1. 声明</span></span><br><span class="line">  <span class="keyword">var</span> instance = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">var</span> oldPrototype = Tool.prototype; <span class="comment">// 保存Tool的原型对象</span></span><br><span class="line">  Tool = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> instance;</span><br><span class="line">  &#125;;</span><br><span class="line">  Tool.prototype = oldPrototype;</span><br><span class="line">  instance = <span class="keyword">new</span> Tool();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 修正constructor</span></span><br><span class="line">  instance.constructor = Tool;</span><br><span class="line"></span><br><span class="line">  instance.name = <span class="string">'张三'</span>;</span><br><span class="line">  instance.age = <span class="number">18</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Tool.prototype.run = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'跑'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> t1 = <span class="keyword">new</span> Tool();</span><br><span class="line">Tool.prototype.desc = <span class="string">'xxx'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> t2 = <span class="keyword">new</span> Tool();</span><br><span class="line"><span class="keyword">var</span> t3 = <span class="keyword">new</span> Tool();</span><br><span class="line"><span class="keyword">var</span> t4 = <span class="keyword">new</span> Tool();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(t1 === t2);</span><br><span class="line"><span class="built_in">console</span>.log(t3 === t4);</span><br><span class="line"><span class="built_in">console</span>.log(t3 === t1);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(t1.desc);</span><br><span class="line"><span class="built_in">console</span>.log(t2.desc);</span><br><span class="line"><span class="built_in">console</span>.log(t3.desc);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(t1.constructor);</span><br></pre></td></tr></table></figure></li><li><p>观察者模式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 消息的发布者</span></span><br><span class="line"><span class="comment">// 可以让别人订阅某个消息</span></span><br><span class="line"><span class="comment">// 可以发布消息</span></span><br><span class="line"><span class="keyword">var</span> lk = &#123;</span><br><span class="line">  typeTargetAction: &#123;&#125;,</span><br><span class="line">  addUser: <span class="function"><span class="keyword">function</span> (<span class="params">type, target, action</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span>.typeTargetAction[type] === <span class="string">'undefined'</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.typeTargetAction[type] = [];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> obj = &#123;<span class="attr">target</span>: target, <span class="attr">action</span>: action&#125;;</span><br><span class="line">    <span class="keyword">this</span>.typeTargetAction[type].push(obj);</span><br><span class="line">  &#125;,</span><br><span class="line">  publishMsg: <span class="function"><span class="keyword">function</span> (<span class="params">type, msgContent</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> targetActions = <span class="keyword">this</span>.typeTargetAction[type] || [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = targetActions.length; i &lt; len; i++) &#123;</span><br><span class="line">      <span class="keyword">var</span> obj = targetActions[i];</span><br><span class="line">      <span class="keyword">var</span> target = obj[<span class="string">'target'</span>];</span><br><span class="line">      <span class="keyword">var</span> action = obj[<span class="string">'action'</span>];</span><br><span class="line">      action.call(target, msgContent);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> stu1 = &#123;<span class="attr">name</span>: <span class="string">'张三'</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> stu2 = &#123;<span class="attr">name</span>: <span class="string">'李四'</span>&#125;;</span><br><span class="line"></span><br><span class="line">lk.addUser(<span class="string">'h5'</span>, stu1, <span class="function"><span class="keyword">function</span> (<span class="params">msgContent</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(msgContent, <span class="string">'已推送'</span>, <span class="keyword">this</span>.name);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">lk.addUser(<span class="string">'h5'</span>, stu2, <span class="function"><span class="keyword">function</span> (<span class="params">msgContent</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(msgContent, <span class="string">'已推送'</span>, <span class="keyword">this</span>.name);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">lk.addUser(<span class="string">'java'</span>, stu1, <span class="function"><span class="keyword">function</span> (<span class="params">msgContent</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(msgContent, <span class="string">'已推送'</span>, <span class="keyword">this</span>.name);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">lk.addUser(<span class="string">'python'</span>, stu2, <span class="function"><span class="keyword">function</span> (<span class="params">msgContent</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(msgContent, <span class="string">'已推送'</span>, <span class="keyword">this</span>.name);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//  广播消息</span></span><br><span class="line">lk.publishMsg(<span class="string">'h5'</span>, <span class="string">'H5学院消息: 今晚上课'</span>);</span><br><span class="line">lk.publishMsg(<span class="string">'java'</span>, <span class="string">'Java学院消息: 今晚不上课'</span>);</span><br></pre></td></tr></table></figure></li><li><p>策略模式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Celue = &#123;</span><br><span class="line">  slow: <span class="function"><span class="keyword">function</span> (<span class="params">distance</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'慢速运动策略耗时:'</span>, distance * <span class="number">2</span>, <span class="string">'小时'</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  normal: <span class="function"><span class="keyword">function</span> (<span class="params">distance</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'普通运动策略耗时:'</span>, distance, <span class="string">'小时'</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  fast: <span class="function"><span class="keyword">function</span> (<span class="params">distance</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'快速运动策略耗时:'</span>, distance / <span class="number">2</span>, <span class="string">'小时'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">PersonRun</span>(<span class="params">from, to</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.from = <span class="keyword">from</span>;</span><br><span class="line">  <span class="keyword">this</span>.to = to;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PersonRun.prototype.run = <span class="function"><span class="keyword">function</span> (<span class="params">celue</span>) </span>&#123;</span><br><span class="line">  celue(<span class="keyword">this</span>.to - <span class="keyword">this</span>.from);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> PersonRun(<span class="number">0</span>, <span class="number">20</span>);</span><br><span class="line">p.run(Celue.slow);</span><br><span class="line">p.run(Celue.normal);</span><br><span class="line">p.run(Celue.fast);</span><br></pre></td></tr></table></figure></li><li><p>模板模式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fruit</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">Fruit.prototype.make = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.water();</span><br><span class="line">  <span class="keyword">this</span>.cailiao();</span><br><span class="line">  <span class="keyword">this</span>.jiaoban();</span><br><span class="line">  <span class="keyword">this</span>.liangliang();</span><br><span class="line">&#125;;</span><br><span class="line">Fruit.prototype.water = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'烧好开水, 到开水'</span>);</span><br><span class="line">&#125;;</span><br><span class="line">Fruit.prototype.cailiao = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'必须由子类重写这个方法'</span>);</span><br><span class="line">&#125;;</span><br><span class="line">Fruit.prototype.jiaoban = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'搅拌搅拌'</span>);</span><br><span class="line">&#125;;</span><br><span class="line">Fruit.prototype.liangliang = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'凉一下, 就可以喝了'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Apple</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="comment">// 继承原型对象方法</span></span><br><span class="line">Apple.prototype = <span class="keyword">new</span> Fruit();</span><br><span class="line">Apple.prototype.cailiao = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'放苹果'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> apple = <span class="keyword">new</span> Apple();</span><br><span class="line"><span class="built_in">console</span>.log(apple);</span><br><span class="line">apple.make();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Pear</span>(<span class="params"></span>) </span>&#123;Fruit.call(<span class="keyword">this</span>);&#125;</span><br><span class="line"><span class="comment">// 继承原型对象方法</span></span><br><span class="line">Pear.prototype = <span class="keyword">new</span> Fruit();</span><br><span class="line">Pear.prototype.cailiao = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'放梨子'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> pear = <span class="keyword">new</span> Pear();</span><br><span class="line">pear.make();</span><br></pre></td></tr></table></figure></li><li><p>命令模式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 类似于, 点餐人员, 关注的是菜单;厨房老大关注的是分配,厨师关注的是做菜, 业务分离, 低耦合</span></span><br><span class="line"><span class="comment">// 厨师</span></span><br><span class="line"><span class="keyword">var</span> cook1 = &#123;<span class="attr">name</span>: <span class="string">'王二小'</span>, <span class="attr">make</span>: <span class="function"><span class="keyword">function</span> (<span class="params">foodType</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (foodType) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'tudou'</span>:</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.name, <span class="string">'做土豆'</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'jidan'</span>:</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.name, <span class="string">'做鸡蛋'</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'fanqie'</span>:</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.name, <span class="string">'做番茄'</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'不会做'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cook2 = &#123;<span class="attr">name</span>: <span class="string">'王大小'</span>, <span class="attr">make</span>: <span class="function"><span class="keyword">function</span> (<span class="params">foodType</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (foodType) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'tudou'</span>:</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.name, <span class="string">'做土豆加辣椒'</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'jidan'</span>:</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.name, <span class="string">'做鸡蛋加白糖'</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'fanqie'</span>:</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.name, <span class="string">'做番茄加酱油'</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'不会做'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 服务员点餐</span></span><br><span class="line"><span class="comment">// 服务员, 帮客人点菜</span></span><br><span class="line"><span class="keyword">var</span> foodList = [<span class="string">'tudou'</span>, <span class="string">'jidan'</span>, <span class="string">'fanqie'</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 厨房根据菜单, 创建不同的命令, 分配给不同的厨师</span></span><br><span class="line"><span class="comment">// 点餐系统</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MakeFoodCommand</span>(<span class="params">cook, foodType</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.cook = cook;</span><br><span class="line">  <span class="keyword">this</span>.foodType = foodType;</span><br><span class="line">&#125;</span><br><span class="line">MakeFoodCommand.prototype.execute = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.cook.make(<span class="keyword">this</span>.foodType);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 点餐系统生成做菜命令</span></span><br><span class="line"><span class="comment">// ['tudou', 'jidan', 'fanqie'];</span></span><br><span class="line"><span class="keyword">var</span> commonds = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; foodList.length; i ++) &#123;</span><br><span class="line">  <span class="keyword">var</span> commond = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">if</span> (i % <span class="number">2</span> === <span class="number">0</span>) &#123;</span><br><span class="line">    commond = <span class="keyword">new</span> MakeFoodCommand(cook1, foodList[i]);</span><br><span class="line">  &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    commond = <span class="keyword">new</span> MakeFoodCommand(cook2, foodList[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  commonds.push(commond);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(commonds);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开始根据不同的规则, 让这些命令开始执行</span></span><br><span class="line">commonds.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">cmd</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(cmd);</span><br><span class="line">  cmd.execute();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;其实我个人在项目用过的模式也不多，对模式的概念的理解也没有那么抽象，所以最近在面试中如果面试官问到与模式相关的问题，自己感觉在对答过程中很郁闷，很多东西表达不清楚，于是就找了些相关资料，才会有这篇文章分享。JavaScript模式与前端的工作和成长密不可分，因为这确实不是一
      
    
    </summary>
    
      <category term="javascript" scheme="https://liwenxin-jam.github.io/categories/javascript/"/>
    
    
      <category term="前端" scheme="https://liwenxin-jam.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>记一次vue升级爬坑之旅</title>
    <link href="https://liwenxin-jam.github.io/2019/11/27/%E8%AE%B0%E4%B8%80%E6%AC%A1vue%E5%8D%87%E7%BA%A7%E7%88%AC%E5%9D%91%E4%B9%8B%E6%97%85/"/>
    <id>https://liwenxin-jam.github.io/2019/11/27/记一次vue升级爬坑之旅/</id>
    <published>2019-11-27T14:56:34.000Z</published>
    <updated>2021-04-12T13:28:18.214Z</updated>
    
    <content type="html"><![CDATA[<p>写这篇日记的起因是用 vue 重构公司项目，自己升级了一下项目的 vue 为最新版本 2.6.10，发现 npm run build 打包出来的。在涉及 slot-scope=”scope”的问题，抛出了一个错误。[Vue warn]:TypeError: Cannot create property ‘default’ on boolean ‘true’”。在这里与大家做一些分享，共同学习。</p><p><img src="/images/default.png" alt="default"></p><h4 id="google-查阅文档"><a href="#google-查阅文档" class="headerlink" title="google 查阅文档"></a>google 查阅文档</h4><ul><li><p>查到以下相关资料<br><a href="https://github.com/PanJiaChen/vue-element-admin/issues/1628" target="_blank" rel="noopener">资料 1</a><br><a href="https://github.com/vuejs/vue/issues/9863" target="_blank" rel="noopener">资料 2</a></p></li><li><p>解决方案</p></li></ul><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a) 先删除已经存在的node_modules</span><br><span class="line">   删除package-lock.json</span><br><span class="line">   <span class="built_in">npm</span> cache clean --force</span><br><span class="line">   <span class="built_in">npm</span> install</span><br><span class="line">b) <span class="built_in">npm</span> i vue-hot-reload-api@<span class="number">2.3</span><span class="number">.3</span></span><br><span class="line">c) <span class="built_in">npm</span> i vue-template-compile -S</span><br></pre></td></tr></table></figure><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><ul><li>切记，如果项目中有引入 CDN 的 vue 文件，一定要保证 vue-template-compile 版本要跟 CDN 版本号一致，例如最新的是 2.6.10，两个都要是一样才可以。不然就会出现，为什么本地正常，线上生产环境为什么会报错。原因就在于解析器版本对不上，导致解析语法出错。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;写这篇日记的起因是用 vue 重构公司项目，自己升级了一下项目的 vue 为最新版本 2.6.10，发现 npm run build 打包出来的。在涉及 slot-scope=”scope”的问题，抛出了一个错误。[Vue warn]:TypeError: Cannot c
      
    
    </summary>
    
      <category term="笔记" scheme="https://liwenxin-jam.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="框架" scheme="https://liwenxin-jam.github.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>scrollload插件使用小结</title>
    <link href="https://liwenxin-jam.github.io/2019/10/06/scrollload%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8%E5%B0%8F%E7%BB%93/"/>
    <id>https://liwenxin-jam.github.io/2019/10/06/scrollload插件使用小结/</id>
    <published>2019-10-06T13:01:39.000Z</published>
    <updated>2021-04-12T13:28:18.211Z</updated>
    
    <content type="html"><![CDATA[<p>最开始使用这个插件的出发点是better-scroll不支持PC端滚轮下滑无限加载数据。有兴趣的童鞋也可以自己去深究下<a href="https://ustbhuangyi.github.io/better-scroll/doc/zh-hans/#better-scroll%20%E6%98%AF%E4%BB%80%E4%B9%88" target="_blank" rel="noopener">BetterScroll</a>。在谷歌搜寻了一遍，最终决定采用<a href="https://github.com/fa-ge/Scrollload" target="_blank" rel="noopener">scrollload</a></p><h3 id="简单示例，详细配置可以参考官网"><a href="#简单示例，详细配置可以参考官网" class="headerlink" title="简单示例，详细配置可以参考官网"></a>简单示例，详细配置可以参考官网</h3><h4 id="1、引用"><a href="#1、引用" class="headerlink" title="1、引用"></a>1、引用</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Scrollload <span class="keyword">from</span> <span class="string">'Scrollload'</span></span><br></pre></td></tr></table></figure><h4 id="2、模板"><a href="#2、模板" class="headerlink" title="2、模板"></a>2、模板</h4><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"scroll-list-wrap"</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"scroll-container"</span>&gt;</span><br><span class="line">      &lt;ul <span class="built_in">class</span>=<span class="string">"total-list"</span>&gt;</span><br><span class="line">        &lt;li <span class="built_in">class</span>=<span class="string">"content"</span> v-<span class="keyword">for</span>=<span class="string">"(item, index) in tableData"</span> :key=<span class="string">"item.id"</span>&gt;</span><br><span class="line">          &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"left"</span>&gt;&#123;&#123;<span class="built_in">item</span>.startTime | dateFilter&#125;&#125;&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">          &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"right"</span>&gt;&#123;&#123;<span class="built_in">item</span>.imageHubFileTotal&#125;&#125;&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">      &lt;/ul&gt;</span><br><span class="line">    &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure><h4 id="3、样式"><a href="#3、样式" class="headerlink" title="3、样式"></a>3、样式</h4><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.scroll-list-wrap</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: calc(<span class="number">100%</span> - <span class="number">20px</span>);</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">413px</span>;</span><br><span class="line">  <span class="attribute">overflow-y</span>: auto;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.total-list</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#e0e0e0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">li</span> &#123;</span><br><span class="line">      <span class="attribute">display</span>: flex;</span><br><span class="line">      <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#e7e7e7</span>;</span><br><span class="line"></span><br><span class="line">      &amp;<span class="selector-pseudo">:last-child</span> &#123;</span><br><span class="line">        <span class="attribute">border-bottom</span>: none;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.content</span> &#123;</span><br><span class="line">      <span class="attribute">padding</span>: <span class="number">13px</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、初始化"><a href="#4、初始化" class="headerlink" title="4、初始化"></a>4、初始化</h4><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="built_in">self</span> = this;</span><br><span class="line"><span class="literal">new</span> Scrollload(&#123;</span><br><span class="line">    container: document.querySelector(<span class="string">'.scroll-container'</span>),</span><br><span class="line">    content: document.querySelector(<span class="string">'.total-list'</span>),</span><br><span class="line">    <span class="comment">// 视窗(默认是window，如果是局部滚动需要设置滚动的dom)</span></span><br><span class="line">    window: document.querySelector(<span class="string">'.scroll-list-wrap'</span>),</span><br><span class="line">    isInitLock: <span class="literal">false</span>,</span><br><span class="line">    enableLoadMore: <span class="literal">true</span>,</span><br><span class="line">    threshold: <span class="number">10</span>,</span><br><span class="line">    useLocalScrollFix: <span class="literal">false</span>,</span><br><span class="line">    loadMore: function(sl) &#123; <span class="comment">//this===sl</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">self</span>.historyTotal !== <span class="number">-1</span> &amp;&amp; <span class="built_in">self</span>.tableData.length &gt;= <span class="built_in">self</span>.historyTotal) &#123;</span><br><span class="line">        <span class="comment">//如果加载完了，那么需要调用noMoreData方法。这样底部DOM会从原来的加载动画变成结束div</span></span><br><span class="line">        sl.noMoreData();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      ApiGetHistoryDailyCount(<span class="built_in">self</span>.totalTableParams).then(response =&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> res = response.<span class="built_in">data</span>;</span><br><span class="line">        <span class="keyword">if</span> (res.status) &#123;</span><br><span class="line">          <span class="built_in">self</span>.historyTotal = res.<span class="built_in">data</span>.total;</span><br><span class="line">          <span class="keyword">if</span> (res.<span class="built_in">data</span> &amp;&amp; res.<span class="built_in">data</span>.<span class="keyword">rows</span>.length) &#123;</span><br><span class="line">            <span class="built_in">self</span>.tableData = <span class="built_in">self</span>.tableData.concat(res.<span class="built_in">data</span>.<span class="keyword">rows</span>);</span><br><span class="line">            <span class="built_in">self</span>.$forceUpdate()</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="built_in">self</span>.totalPageIndex++;</span><br><span class="line">          <span class="built_in">self</span>.totalTableParams.offset = <span class="built_in">self</span>.totalPageIndex * <span class="built_in">self</span>.totalPageSize;</span><br><span class="line">          <span class="built_in">self</span>.$nextTick(() =&gt; &#123;</span><br><span class="line">            sl.unLock();</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="built_in">self</span>.showMessage(res.message, <span class="string">'error'</span>);</span><br><span class="line">          <span class="comment">// 加载出错，需要执行该方法。这样底部DOM会出现出现异常的样式。</span></span><br><span class="line">          sl.throwException();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最开始使用这个插件的出发点是better-scroll不支持PC端滚轮下滑无限加载数据。有兴趣的童鞋也可以自己去深究下&lt;a href=&quot;https://ustbhuangyi.github.io/better-scroll/doc/zh-hans/#better-scrol
      
    
    </summary>
    
      <category term="插件" scheme="https://liwenxin-jam.github.io/categories/%E6%8F%92%E4%BB%B6/"/>
    
    
      <category term="工具" scheme="https://liwenxin-jam.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Grid网格布局</title>
    <link href="https://liwenxin-jam.github.io/2019/09/26/Grid%E7%BD%91%E6%A0%BC%E5%B8%83%E5%B1%80/"/>
    <id>https://liwenxin-jam.github.io/2019/09/26/Grid网格布局/</id>
    <published>2019-09-26T11:44:32.000Z</published>
    <updated>2021-04-12T13:28:18.203Z</updated>
    
    <content type="html"><![CDATA[<p>flexbox 是一维布局，他只能在一条直线上放置你的内容区块；而 grid 是一个二维布局。前面也简单说到，你可以根据你的设计需求，将内容区块放置到任何你想要放的地方。IE10+默认支持 CSS Grid Layout 模块功能之外，其他的浏览器 Chrome、Safari、Opera 和 Firefox 都需要重新设置（启用开发中的实验性网络平台功能）。</p><h2 id="Chrome-浏览器"><a href="#Chrome-浏览器" class="headerlink" title="Chrome 浏览器"></a>Chrome 浏览器</h2><p>在 Chrome 浏览器中开启 CSS-Grid-Layout 模块功能比较简单，只需要在您的浏览器地址栏中输入：chrome://flags，回车后在列表清单中找到“启用实验性网络平台功能”（#enable-experimental-web-platform-features），一个更为简单的方法，可以直接在浏览器地址栏中输入网址：chrome://flags#enable-experimental-web-platform-features 立马定位需要的选项，然后点击“启用”(enable)按钮。</p><p>可以给父容器的 display 属性设置为 grid 或者 inline-grid 来定义一个网格。这样你就可以使用 grid-template-columns 和 grid-template-rows 属性来创建一个网格。在这个示例中，创建了一个三列网格，其中三个列的列宽是 100px，并且指定列与列之间的间距为 10px。同时网格具有三行，每行的高度是自动的，另外行与行之间的间距是 10px。简单点说就是一个三行三列的网格，并且列与列之间，行与行之间的间距都是 10px。</p><ul><li>默认以下栗子的 Dom 结构都是如此</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box a"</span>&gt;</span>A<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box b"</span>&gt;</span>B<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box c"</span>&gt;</span>C<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box d"</span>&gt;</span>D<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box e"</span>&gt;</span>E<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box f"</span>&gt;</span>F<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box g"</span>&gt;</span>G<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box h"</span>&gt;</span>H<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box i"</span>&gt;</span>I<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box j"</span>&gt;</span>J<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="三列网格布局，核心样式代码是-wrapper。"><a href="#三列网格布局，核心样式代码是-wrapper。" class="headerlink" title="三列网格布局，核心样式代码是.wrapper。"></a>三列网格布局，核心样式代码是.wrapper。</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">  body &#123;</span><br><span class="line">    padding: 50px;</span><br><span class="line">  &#125;</span><br><span class="line">  .wrapper &#123;</span><br><span class="line">    display: grid;</span><br><span class="line">    grid-template-columns: 100px 10px 100px 10px 100px; /*  指定了列宽100px、列间距10px*/</span><br><span class="line">    grid-template-rows: auto 10px auto; /*  指定了行宽auto、行间距10px*/</span><br><span class="line">  &#125;</span><br><span class="line">  .box &#123;</span><br><span class="line">    background-color: #444;</span><br><span class="line">    color: #fff;</span><br><span class="line">    font-size: 150%;</span><br><span class="line">    padding: 20px;</span><br><span class="line">  &#125;</span><br><span class="line">  .b,</span><br><span class="line">  .d,</span><br><span class="line">  .g,</span><br><span class="line">  .i &#123;</span><br><span class="line">    background-color: red;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="单元格占位区域，注意-grid-column-start、grid-column-end、grid-row-start、grid-row-end-的使用，默认都是从-1-开始算起。网格线的简写方式，其实就是-grid-column-和-grid-row-的-start-与-end-值合并在一起，两者之间用-来分隔。"><a href="#单元格占位区域，注意-grid-column-start、grid-column-end、grid-row-start、grid-row-end-的使用，默认都是从-1-开始算起。网格线的简写方式，其实就是-grid-column-和-grid-row-的-start-与-end-值合并在一起，两者之间用-来分隔。" class="headerlink" title="单元格占位区域，注意 grid-column-start、grid-column-end、grid-row-start、grid-row-end 的使用，默认都是从 1 开始算起。网格线的简写方式，其实就是 grid-column 和 grid-row 的 start 与 end 值合并在一起，两者之间用/来分隔。"></a>单元格占位区域，注意 grid-column-start、grid-column-end、grid-row-start、grid-row-end 的使用，默认都是从 1 开始算起。网格线的简写方式，其实就是 grid-column 和 grid-row 的 start 与 end 值合并在一起，两者之间用/来分隔。</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">  body &#123;</span><br><span class="line">    padding: 50px;</span><br><span class="line">  &#125;</span><br><span class="line">  .wrapper &#123;</span><br><span class="line">    display: grid;</span><br><span class="line">    grid-template-columns: 100px 10px 100px 10px 100px 10px 100px;</span><br><span class="line">    grid-template-rows: auto 10px auto 10px auto;</span><br><span class="line">  &#125;</span><br><span class="line">  .box &#123;</span><br><span class="line">    background-color: #444;</span><br><span class="line">    color: #fff;</span><br><span class="line">    font-size: 150%;</span><br><span class="line">    padding: 20px;</span><br><span class="line">    text-align: center;</span><br><span class="line">  &#125;</span><br><span class="line">  .a &#123;</span><br><span class="line">    grid-column-start: 1;</span><br><span class="line">    grid-column-end: 2;</span><br><span class="line">    grid-row-start: 1;</span><br><span class="line">    grid-row-end: 2;</span><br><span class="line">  &#125;</span><br><span class="line">  .b &#123;</span><br><span class="line">    grid-column-start: 3;</span><br><span class="line">    grid-column-end: 4;</span><br><span class="line">    grid-row-start: 1;</span><br><span class="line">    grid-row-end: 2;</span><br><span class="line">  &#125;</span><br><span class="line">  .c &#123;</span><br><span class="line">    grid-column-start: 5;</span><br><span class="line">    grid-column-end: 6;</span><br><span class="line">    grid-row-start: 1;</span><br><span class="line">    grid-row-end: 2;</span><br><span class="line">  &#125;</span><br><span class="line">  .d &#123;</span><br><span class="line">    grid-column-start: 7;</span><br><span class="line">    grid-column-end: 8;</span><br><span class="line">    grid-row-start: 1;</span><br><span class="line">    grid-row-end: 2;</span><br><span class="line">  &#125;</span><br><span class="line">  .e &#123;</span><br><span class="line">    grid-column-start: 1;</span><br><span class="line">    grid-column-end: 2;</span><br><span class="line">    grid-row-start: 3;</span><br><span class="line">    grid-row-end: 4;</span><br><span class="line">  &#125;</span><br><span class="line">  .f &#123;</span><br><span class="line">    grid-column-start: 3;</span><br><span class="line">    grid-column-end: 4;</span><br><span class="line">    grid-row-start: 3;</span><br><span class="line">    grid-row-end: 4;</span><br><span class="line">  &#125;</span><br><span class="line">  .g &#123;</span><br><span class="line">    grid-column-start: 5;</span><br><span class="line">    grid-column-end: 6;</span><br><span class="line">    grid-row-start: 3;</span><br><span class="line">    grid-row-end: 4;</span><br><span class="line">  &#125;</span><br><span class="line">  .h &#123;</span><br><span class="line">    grid-column-start: 7;</span><br><span class="line">    grid-column-end: 8;</span><br><span class="line">    grid-row-start: 3;</span><br><span class="line">    grid-row-end: 4;</span><br><span class="line">  &#125;</span><br><span class="line">  .i &#123;</span><br><span class="line">    grid-column-start: 1;</span><br><span class="line">    grid-column-end: 2;</span><br><span class="line">    grid-row-start: 5;</span><br><span class="line">    grid-row-end: 6;</span><br><span class="line">  &#125;</span><br><span class="line">  .j &#123;</span><br><span class="line">    grid-column-start: 3;</span><br><span class="line">    grid-column-end: 4;</span><br><span class="line">    grid-row-start: 5;</span><br><span class="line">    grid-row-end: 6;</span><br><span class="line">  &#125;</span><br><span class="line">  /*简写方式*/</span><br><span class="line">  .a &#123;</span><br><span class="line">    grid-column: 1 / 2;</span><br><span class="line">    grid-row: 1 / 2;</span><br><span class="line">  &#125;</span><br><span class="line">  .b &#123;</span><br><span class="line">    grid-column: 3 / 4;</span><br><span class="line">    grid-row: 1 / 2;</span><br><span class="line">  &#125;</span><br><span class="line">  .c &#123;</span><br><span class="line">    grid-column: 5 / 6;</span><br><span class="line">    grid-row: 1 / 2;</span><br><span class="line">  &#125;</span><br><span class="line">  .d &#123;</span><br><span class="line">    grid-column: 7 / 8;</span><br><span class="line">    grid-row: 1 / 2;</span><br><span class="line">  &#125;</span><br><span class="line">  .e &#123;</span><br><span class="line">    grid-column: 1 / 2;</span><br><span class="line">    grid-row: 3 / 4;</span><br><span class="line">  &#125;</span><br><span class="line">  .f &#123;</span><br><span class="line">    grid-column: 3 / 4;</span><br><span class="line">    grid-row: 3 / 4;</span><br><span class="line">  &#125;</span><br><span class="line">  .g &#123;</span><br><span class="line">    grid-column: 5 / 6;</span><br><span class="line">    grid-row: 3 / 4;</span><br><span class="line">  &#125;</span><br><span class="line">  .h &#123;</span><br><span class="line">    grid-column: 7 / 8;</span><br><span class="line">    grid-row: 3 / 4;</span><br><span class="line">  &#125;</span><br><span class="line">  .i &#123;</span><br><span class="line">    grid-column: 1 / 2;</span><br><span class="line">    grid-row: 5 / 6;</span><br><span class="line">  &#125;</span><br><span class="line">  .j &#123;</span><br><span class="line">    grid-column: 3 / 4;</span><br><span class="line">    grid-row: 5 / 6;</span><br><span class="line">  &#125;</span><br><span class="line">  /*覆盖样式，将a和f的位置对调*/</span><br><span class="line">  .a &#123;</span><br><span class="line">    grid-column-start: 3;</span><br><span class="line">    grid-column-end: 4;</span><br><span class="line">    grid-row-start: 3;</span><br><span class="line">    grid-row-end: 4;</span><br><span class="line">    background: red;</span><br><span class="line">  &#125;</span><br><span class="line">  .f &#123;</span><br><span class="line">    grid-column-start: 1;</span><br><span class="line">    grid-column-end: 2;</span><br><span class="line">    grid-row-start: 1;</span><br><span class="line">    grid-row-end: 2;</span><br><span class="line">    background: orange;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>参考文献<br>1、<a href="https://www.w3cplus.com/css3/what-is-css-grid-layout.html" target="_blank" rel="noopener">CSS Grid 布局：什么是网格布局</a><br>2、<a href="https://www.w3cplus.com/css3/how-to-enable-support-for-grid-layout-in-various-browsers.html" target="_blank" rel="noopener">CSS Grid 布局：浏览器开启 CSS Grid Layout</a><br>3、<a href="https://www.w3cplus.com/css3/line-base-placement-layout.html" target="_blank" rel="noopener">CSS Grid 布局：网格单元格布局</a><br>4、<a href="https://www.w3cplus.com/css3/css-grid-layout-merge-cells.html" target="_blank" rel="noopener">CSS Grid 布局：合并单元格布局</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;flexbox 是一维布局，他只能在一条直线上放置你的内容区块；而 grid 是一个二维布局。前面也简单说到，你可以根据你的设计需求，将内容区块放置到任何你想要放的地方。IE10+默认支持 CSS Grid Layout 模块功能之外，其他的浏览器 Chrome、Safar
      
    
    </summary>
    
      <category term="css" scheme="https://liwenxin-jam.github.io/categories/css/"/>
    
    
      <category term="前端" scheme="https://liwenxin-jam.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>flex布局使用小结</title>
    <link href="https://liwenxin-jam.github.io/2019/08/14/flex%E5%B8%83%E5%B1%80%E4%BD%BF%E7%94%A8%E5%B0%8F%E7%BB%93/"/>
    <id>https://liwenxin-jam.github.io/2019/08/14/flex布局使用小结/</id>
    <published>2019-08-14T13:32:51.000Z</published>
    <updated>2021-04-12T13:28:18.206Z</updated>
    
    <content type="html"><![CDATA[<p>布局的传统解决方案，基于盒状模型，依赖 display 属性+position 属性+float 属性。它对于那些特殊布局非常不方便，比如，垂直居中就不容易实现。Flex 是 Flexible-Box 的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。任何一个容器都可以指定为 Flex 布局，行内元素也可以使用 Flex 布局，不管是什么布局，Flex 往往都可以几行命令搞定，Flex 布局将成为未来布局的首选方案。</p><h2 id="采用-Flex-布局的元素，称为-Flex-容器（flex-container），简称”容器”。它的所有子元素自动成为容器成员，称为-Flex-项目（flex-item），简称”项目”。设为-flex-的容器可以设置以下六种属性-flex-direction、flex-wrap、flex-flow、justify-content、align-items、align-content。注意，Webkit-内核的浏览器，必须加上-webkit-前缀，设为-Flex-布局以后，子元素的-float、clear-和-vertical-align-属性将失效。"><a href="#采用-Flex-布局的元素，称为-Flex-容器（flex-container），简称”容器”。它的所有子元素自动成为容器成员，称为-Flex-项目（flex-item），简称”项目”。设为-flex-的容器可以设置以下六种属性-flex-direction、flex-wrap、flex-flow、justify-content、align-items、align-content。注意，Webkit-内核的浏览器，必须加上-webkit-前缀，设为-Flex-布局以后，子元素的-float、clear-和-vertical-align-属性将失效。" class="headerlink" title="采用 Flex 布局的元素，称为 Flex 容器（flex-container），简称”容器”。它的所有子元素自动成为容器成员，称为 Flex 项目（flex-item），简称”项目”。设为 flex 的容器可以设置以下六种属性 flex-direction、flex-wrap、flex-flow、justify-content、align-items、align-content。注意，Webkit 内核的浏览器，必须加上-webkit 前缀，设为 Flex 布局以后，子元素的 float、clear 和 vertical-align 属性将失效。"></a>采用 Flex 布局的元素，称为 Flex 容器（flex-container），简称”容器”。它的所有子元素自动成为容器成员，称为 Flex 项目（flex-item），简称”项目”。设为 flex 的容器可以设置以下六种属性 flex-direction、flex-wrap、flex-flow、justify-content、align-items、align-content。注意，Webkit 内核的浏览器，必须加上-webkit 前缀，设为 Flex 布局以后，子元素的 float、clear 和 vertical-align 属性将失效。</h2><h2 id="1、flex-direction-属性，决定主轴的方向（即项目的排列方向）"><a href="#1、flex-direction-属性，决定主轴的方向（即项目的排列方向）" class="headerlink" title="1、flex-direction 属性，决定主轴的方向（即项目的排列方向）"></a>1、flex-direction 属性，决定主轴的方向（即项目的排列方向）</h2><p>flex-direction: row | row-reverse | column | column-reverse;</p><ul><li>row（默认值）：主轴为水平方向，起点在左端。</li><li>row-reverse：主轴为水平方向，起点在右端。</li><li>column：主轴为垂直方向，起点在上沿。</li><li>column-reverse：主轴为垂直方向，起点在下沿。</li></ul><h2 id="2、flex-wrap-属性，默认情况下，项目都排在一条线（又称”轴线”）上。flex-wrap-属性定义，如果一条轴线排不下，如何换行。"><a href="#2、flex-wrap-属性，默认情况下，项目都排在一条线（又称”轴线”）上。flex-wrap-属性定义，如果一条轴线排不下，如何换行。" class="headerlink" title="2、flex-wrap 属性，默认情况下，项目都排在一条线（又称”轴线”）上。flex-wrap 属性定义，如果一条轴线排不下，如何换行。"></a>2、flex-wrap 属性，默认情况下，项目都排在一条线（又称”轴线”）上。flex-wrap 属性定义，如果一条轴线排不下，如何换行。</h2><p>flex-wrap: nowrap | wrap | wrap-reverse;</p><ul><li>nowrap（默认）：不换行。</li><li>wrap：换行，第一行在上方。</li><li>wrap-reverse：换行，第一行在下方。</li></ul><h2 id="3、flex-flow-属性，flex-flow-属性是-flex-direction-属性和-flex-wrap-属性的简写形式，默认值为-row-nowrap。"><a href="#3、flex-flow-属性，flex-flow-属性是-flex-direction-属性和-flex-wrap-属性的简写形式，默认值为-row-nowrap。" class="headerlink" title="3、flex-flow 属性，flex-flow 属性是 flex-direction 属性和 flex-wrap 属性的简写形式，默认值为 row nowrap。"></a>3、flex-flow 属性，flex-flow 属性是 flex-direction 属性和 flex-wrap 属性的简写形式，默认值为 row nowrap。</h2><p>flex-flow: flex-direction || flex-wrap;</p><h2 id="4、justify-content-属性，定义了项目在主轴上的对齐方式。"><a href="#4、justify-content-属性，定义了项目在主轴上的对齐方式。" class="headerlink" title="4、justify-content 属性，定义了项目在主轴上的对齐方式。"></a>4、justify-content 属性，定义了项目在主轴上的对齐方式。</h2><p>justify-content: flex-start | flex-end | center | space-between | space-around;</p><ul><li>flex-start（默认值）：左对齐</li><li>flex-end：右对齐</li><li>center： 居中</li><li>space-between：两端对齐，项目之间的间隔都相等。</li><li>space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。</li></ul><h2 id="5、align-items-属性，定义项目在交叉轴上如何对齐。"><a href="#5、align-items-属性，定义项目在交叉轴上如何对齐。" class="headerlink" title="5、align-items 属性，定义项目在交叉轴上如何对齐。"></a>5、align-items 属性，定义项目在交叉轴上如何对齐。</h2><p>align-items: flex-start | flex-end | center | baseline | stretch;</p><ul><li>flex-start：交叉轴的起点对齐。</li><li>flex-end：交叉轴的终点对齐。</li><li>center：交叉轴的中点对齐。</li><li>baseline: 项目的第一行文字的基线对齐。</li><li>stretch（默认值）：如果项目未设置高度或设为 auto，将占满整个容器的高度。</li></ul><h2 id="6、align-content-属性，定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。"><a href="#6、align-content-属性，定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。" class="headerlink" title="6、align-content 属性，定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。"></a>6、align-content 属性，定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。</h2><p>align-content: flex-start | flex-end | center | space-between | space-around | stretch;</p><ul><li>flex-start：与交叉轴的起点对齐。</li><li>flex-end：与交叉轴的终点对齐。</li><li>center：与交叉轴的中点对齐。</li><li>space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。</li><li>space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。</li><li>stretch（默认值）：轴线占满整个交叉轴。</li></ul><h2 id="设为-flex-的容器，它的所有子元素自动成为容器成员，称为-Flex-项目（flex-item），简称”项目”。项目也是可以设置以下六种属性-order、flex-grow、flex-shrink、flex-basis、flex、align-self。"><a href="#设为-flex-的容器，它的所有子元素自动成为容器成员，称为-Flex-项目（flex-item），简称”项目”。项目也是可以设置以下六种属性-order、flex-grow、flex-shrink、flex-basis、flex、align-self。" class="headerlink" title="设为 flex 的容器，它的所有子元素自动成为容器成员，称为 Flex 项目（flex-item），简称”项目”。项目也是可以设置以下六种属性 order、flex-grow、flex-shrink、flex-basis、flex、align-self。"></a>设为 flex 的容器，它的所有子元素自动成为容器成员，称为 Flex 项目（flex-item），简称”项目”。项目也是可以设置以下六种属性 order、flex-grow、flex-shrink、flex-basis、flex、align-self。</h2><h2 id="1、order-属性，定义项目的排列顺序。数值越小，排列越靠前，默认为-0。"><a href="#1、order-属性，定义项目的排列顺序。数值越小，排列越靠前，默认为-0。" class="headerlink" title="1、order 属性，定义项目的排列顺序。数值越小，排列越靠前，默认为 0。"></a>1、order 属性，定义项目的排列顺序。数值越小，排列越靠前，默认为 0。</h2><p>order: integer;</p><h2 id="2、flex-grow-属性，定义项目的放大比例，默认为-0，即如果存在剩余空间，也不放大。如果所有项目的-flex-grow-属性都为-1，则它们将等分剩余空间（如果有的话）。如果一个项目的-flex-grow-属性为-2，其他项目都为-1，则前者占据的剩余空间将比其他项多一倍。"><a href="#2、flex-grow-属性，定义项目的放大比例，默认为-0，即如果存在剩余空间，也不放大。如果所有项目的-flex-grow-属性都为-1，则它们将等分剩余空间（如果有的话）。如果一个项目的-flex-grow-属性为-2，其他项目都为-1，则前者占据的剩余空间将比其他项多一倍。" class="headerlink" title="2、flex-grow 属性，定义项目的放大比例，默认为 0，即如果存在剩余空间，也不放大。如果所有项目的 flex-grow 属性都为 1，则它们将等分剩余空间（如果有的话）。如果一个项目的 flex-grow 属性为 2，其他项目都为 1，则前者占据的剩余空间将比其他项多一倍。"></a>2、flex-grow 属性，定义项目的放大比例，默认为 0，即如果存在剩余空间，也不放大。如果所有项目的 flex-grow 属性都为 1，则它们将等分剩余空间（如果有的话）。如果一个项目的 flex-grow 属性为 2，其他项目都为 1，则前者占据的剩余空间将比其他项多一倍。</h2><p>flex-grow: number;</p><h2 id="3、flex-shrink-属性，定义了项目的缩小比例，默认为-1，即如果空间不足，该项目将缩小。如果所有项目的-flex-shrink-属性都为-1，当空间不足时，都将等比例缩小。如果一个项目的-flex-shrink-属性为-0，其他项目都为-1，则空间不足时，前者不缩小。注意，负值对该属性无效。"><a href="#3、flex-shrink-属性，定义了项目的缩小比例，默认为-1，即如果空间不足，该项目将缩小。如果所有项目的-flex-shrink-属性都为-1，当空间不足时，都将等比例缩小。如果一个项目的-flex-shrink-属性为-0，其他项目都为-1，则空间不足时，前者不缩小。注意，负值对该属性无效。" class="headerlink" title="3、flex-shrink 属性，定义了项目的缩小比例，默认为 1，即如果空间不足，该项目将缩小。如果所有项目的 flex-shrink 属性都为 1，当空间不足时，都将等比例缩小。如果一个项目的 flex-shrink 属性为 0，其他项目都为 1，则空间不足时，前者不缩小。注意，负值对该属性无效。"></a>3、flex-shrink 属性，定义了项目的缩小比例，默认为 1，即如果空间不足，该项目将缩小。如果所有项目的 flex-shrink 属性都为 1，当空间不足时，都将等比例缩小。如果一个项目的 flex-shrink 属性为 0，其他项目都为 1，则空间不足时，前者不缩小。注意，负值对该属性无效。</h2><p>flex-shrink: number;</p><h2 id="4、flex-basis-属性，定义了在分配多余空间之前，项目占据的主轴空间（main-size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为-auto，即项目的本来大小。它可以设为跟-width-或-height-属性一样的值（比如-350px），则项目将占据固定空间。"><a href="#4、flex-basis-属性，定义了在分配多余空间之前，项目占据的主轴空间（main-size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为-auto，即项目的本来大小。它可以设为跟-width-或-height-属性一样的值（比如-350px），则项目将占据固定空间。" class="headerlink" title="4、flex-basis 属性，定义了在分配多余空间之前，项目占据的主轴空间（main-size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为 auto，即项目的本来大小。它可以设为跟 width 或 height 属性一样的值（比如 350px），则项目将占据固定空间。"></a>4、flex-basis 属性，定义了在分配多余空间之前，项目占据的主轴空间（main-size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为 auto，即项目的本来大小。它可以设为跟 width 或 height 属性一样的值（比如 350px），则项目将占据固定空间。</h2><p>flex-basis: length | auto;</p><h2 id="5、flex-属性，flex-属性是-flex-grow-flex-shrink-和-flex-basis-的简写，默认值为-0-1-auto，其中后两个属性可选。该属性有两个快捷值：auto-1-1-auto-和-none-0-0-auto-。建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。"><a href="#5、flex-属性，flex-属性是-flex-grow-flex-shrink-和-flex-basis-的简写，默认值为-0-1-auto，其中后两个属性可选。该属性有两个快捷值：auto-1-1-auto-和-none-0-0-auto-。建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。" class="headerlink" title="5、flex 属性，flex 属性是 flex-grow,flex-shrink 和 flex-basis 的简写，默认值为 0 1 auto，其中后两个属性可选。该属性有两个快捷值：auto(1 1 auto)和 none(0 0 auto)。建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。"></a>5、flex 属性，flex 属性是 flex-grow,flex-shrink 和 flex-basis 的简写，默认值为 0 1 auto，其中后两个属性可选。该属性有两个快捷值：auto(1 1 auto)和 none(0 0 auto)。建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。</h2><p>flex: none | [ &lt;’flex-grow’&gt; &lt;’flex-shrink’&gt;? || &lt;’flex-basis’&gt; ]</p><h2 id="6、align-self-属性，允许单个项目有与其他项目不一样的对齐方式，可覆盖-align-items-属性。默认值为-auto，表示继承父元素的-align-items-属性，如果没有父元素，则等同于-stretch。该属性可以取-6-个值，除了-auto，其他都与-align-items-属性完全一致。"><a href="#6、align-self-属性，允许单个项目有与其他项目不一样的对齐方式，可覆盖-align-items-属性。默认值为-auto，表示继承父元素的-align-items-属性，如果没有父元素，则等同于-stretch。该属性可以取-6-个值，除了-auto，其他都与-align-items-属性完全一致。" class="headerlink" title="6、align-self 属性，允许单个项目有与其他项目不一样的对齐方式，可覆盖 align-items 属性。默认值为 auto，表示继承父元素的 align-items 属性，如果没有父元素，则等同于 stretch。该属性可以取 6 个值，除了 auto，其他都与 align-items 属性完全一致。"></a>6、align-self 属性，允许单个项目有与其他项目不一样的对齐方式，可覆盖 align-items 属性。默认值为 auto，表示继承父元素的 align-items 属性，如果没有父元素，则等同于 stretch。该属性可以取 6 个值，除了 auto，其他都与 align-items 属性完全一致。</h2><p>align-self: auto | flex-start | flex-end | center | baseline | stretch;</p><ul><li>以下示例是参照阮一峰老师教程的实例，我只是做了补充，把 flex-basis 也补上。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>flex-box-demo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.first-face</span> &#123;</span></span><br><span class="line">        display: flex;</span><br><span class="line">        justify-content: center;</span><br><span class="line">        align-items: center;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="selector-class">.second-face</span> &#123;</span></span><br><span class="line">        display: flex;</span><br><span class="line">        justify-content: space-between;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="selector-class">.second-face</span> <span class="selector-class">.pip</span><span class="selector-pseudo">:nth-of-type(2)</span> &#123;</span></span><br><span class="line">        align-self: flex-end;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="selector-class">.third-face</span> &#123;</span></span><br><span class="line">        display: flex;</span><br><span class="line">        justify-content: space-between;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="selector-class">.third-face</span> <span class="selector-class">.pip</span><span class="selector-pseudo">:nth-of-type(2)</span> &#123;</span></span><br><span class="line">        align-self: center;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="selector-class">.third-face</span> <span class="selector-class">.pip</span><span class="selector-pseudo">:nth-of-type(3)</span> &#123;</span></span><br><span class="line">        align-self: flex-end;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="selector-class">.fourth-face</span>,</span></span><br><span class="line"><span class="css">      <span class="selector-class">.sixth-face</span> &#123;</span></span><br><span class="line">        display: flex;</span><br><span class="line">        justify-content: space-between;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="selector-class">.fourth-face</span> <span class="selector-class">.column</span>,</span></span><br><span class="line"><span class="css">      <span class="selector-class">.sixth-face</span> <span class="selector-class">.column</span> &#123;</span></span><br><span class="line">        display: flex;</span><br><span class="line">        flex-direction: column;</span><br><span class="line">        justify-content: space-between;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="selector-class">.fifth-face</span> &#123;</span></span><br><span class="line">        display: flex;</span><br><span class="line">        justify-content: space-between;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="selector-class">.fifth-face</span> <span class="selector-class">.column</span> &#123;</span></span><br><span class="line">        display: flex;</span><br><span class="line">        flex-direction: column;</span><br><span class="line">        justify-content: space-between;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="selector-class">.fifth-face</span> <span class="selector-class">.column</span><span class="selector-pseudo">:nth-of-type(2)</span> &#123;</span></span><br><span class="line">        justify-content: center;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="comment">/* OTHER STYLES */</span></span></span><br><span class="line">      * &#123;</span><br><span class="line">        box-sizing: border-box;</span><br><span class="line">      &#125;</span><br><span class="line">      html,</span><br><span class="line">      body &#123;</span><br><span class="line">        height: 100%;</span><br><span class="line">      &#125;</span><br><span class="line">      body &#123;</span><br><span class="line">        display: flex;</span><br><span class="line">        align-items: center;</span><br><span class="line">        justify-content: center;</span><br><span class="line">        vertical-align: center;</span><br><span class="line">        flex-wrap: wrap;</span><br><span class="line">        align-content: center;</span><br><span class="line">        font-family: 'Open Sans', sans-serif;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-tag">background</span>: <span class="selector-tag">linear-gradient</span>(<span class="selector-tag">top</span>, <span class="selector-id">#222</span>, <span class="selector-id">#333</span>);</span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="selector-attr">[class$=<span class="string">'face'</span>]</span> &#123;</span></span><br><span class="line">        margin: 16px;</span><br><span class="line">        padding: 4px;</span><br><span class="line"><span class="css">        <span class="selector-tag">background-color</span>: <span class="selector-id">#e7e7e7</span>;</span></span><br><span class="line">        width: 104px;</span><br><span class="line">        height: 104px;</span><br><span class="line">        object-fit: contain;</span><br><span class="line"><span class="css">        <span class="selector-tag">box-shadow</span>: <span class="selector-tag">inset</span> 0 5<span class="selector-tag">px</span> <span class="selector-tag">white</span>, <span class="selector-tag">inset</span> 0 <span class="selector-tag">-5px</span> <span class="selector-id">#bbb</span>, <span class="selector-tag">inset</span> 5<span class="selector-tag">px</span> 0 <span class="selector-id">#d7d7d7</span>, <span class="selector-tag">inset</span> <span class="selector-tag">-5px</span></span></span><br><span class="line"><span class="css">            0 <span class="selector-id">#d7d7d7</span>;</span></span><br><span class="line">        border-radius: 10%;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="selector-class">.pip</span> &#123;</span></span><br><span class="line">        display: block;</span><br><span class="line">        width: 24px;</span><br><span class="line">        height: 24px;</span><br><span class="line">        border-radius: 50%;</span><br><span class="line">        margin: 4px;</span><br><span class="line"><span class="css">        <span class="selector-tag">background-color</span>: <span class="selector-id">#333</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">box-shadow</span>: <span class="selector-tag">inset</span> 0 3<span class="selector-tag">px</span> <span class="selector-id">#111</span>, <span class="selector-tag">inset</span> 0 <span class="selector-tag">-3px</span> <span class="selector-id">#555</span>;</span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="comment">/*补充flex-basis写法*/</span></span></span><br><span class="line"><span class="css">      <span class="selector-id">#fourth-basic</span> &#123;</span></span><br><span class="line">        flex-wrap: wrap;</span><br><span class="line">        align-content: space-between;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="selector-id">#fourth-basic</span> <span class="selector-class">.column</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">flex-direction</span>: <span class="selector-tag">row</span>; <span class="comment">/*覆写原来的样式column*/</span></span></span><br><span class="line">        flex-basis: 100%;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"first-face"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"pip"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"second-face"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"pip"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"pip"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"third-face"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"pip"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"pip"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"pip"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"fourth-face"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"pip"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"pip"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"pip"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"pip"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"fourth-basic"</span> <span class="attr">class</span>=<span class="string">"fourth-face"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"pip"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"pip"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"pip"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"pip"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"fifth-face"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"pip"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"pip"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"pip"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"pip"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"pip"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sixth-face"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"pip"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"pip"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"pip"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"pip"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"pip"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"pip"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>参考文献<br>1、<a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="noopener">Flex 布局教程：语法篇</a><br>2、<a href="http://www.ruanyifeng.com/blog/2015/07/flex-examples.html" target="_blank" rel="noopener">Flex 布局教程：实例篇</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;布局的传统解决方案，基于盒状模型，依赖 display 属性+position 属性+float 属性。它对于那些特殊布局非常不方便，比如，垂直居中就不容易实现。Flex 是 Flexible-Box 的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。任何一个容器都
      
    
    </summary>
    
      <category term="css" scheme="https://liwenxin-jam.github.io/categories/css/"/>
    
    
      <category term="前端" scheme="https://liwenxin-jam.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>table-cell常用应用</title>
    <link href="https://liwenxin-jam.github.io/2019/07/03/table-cell%E5%B8%B8%E7%94%A8%E5%BA%94%E7%94%A8/"/>
    <id>https://liwenxin-jam.github.io/2019/07/03/table-cell常用应用/</id>
    <published>2019-07-03T12:19:05.000Z</published>
    <updated>2021-04-12T13:28:18.211Z</updated>
    
    <content type="html"><![CDATA[<p>display:table-cell 属性指让标签元素以表格单元格的形式呈现，类似于 td 标签。目前 IE8+以及其他现代浏览器都是支持此属性的。我们都知道，单元格有一些比较特别的属性，例如元素的垂直居中对齐，关联伸缩等。table-cell 同样会被其他一些 CSS 属性破坏，例如 float, position:absolute，所以，在使用 display:table-cell 与 float:left 或是 position:absolute 属性尽量不用同用。设置了 display:table-cell 的元素对宽度高度敏感，对 margin 值无反应，响应 padding 属性，基本上就是活脱脱的一个 td 标签元素了。</p><h2 id="垂直居中的内容"><a href="#垂直居中的内容" class="headerlink" title="垂直居中的内容"></a>垂直居中的内容</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.parent</span> &#123;</span></span><br><span class="line">    display: table;</span><br><span class="line">    width: 200px;</span><br><span class="line">    height: 200px;</span><br><span class="line">    text-align: center;</span><br><span class="line"><span class="css">    <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.children</span> &#123;</span></span><br><span class="line">    display: table-cell;</span><br><span class="line">    vertical-align: middle;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Dom结构 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"children"</span>&gt;</span> 垂直居中的内容 <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="元素两端对齐，正常可以用-float-实现，但用-float-会有弊端，需要清除浮动。"><a href="#元素两端对齐，正常可以用-float-实现，但用-float-会有弊端，需要清除浮动。" class="headerlink" title="元素两端对齐，正常可以用 float 实现，但用 float 会有弊端，需要清除浮动。"></a>元素两端对齐，正常可以用 float 实现，但用 float 会有弊端，需要清除浮动。</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">  * &#123;</span><br><span class="line">    box-sizing: border-box;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.content</span> &#123;</span></span><br><span class="line">    display: table;</span><br><span class="line"><span class="css">    <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#06c</span>;</span></span><br><span class="line">    padding: 15px 15px;</span><br><span class="line">    max-width: 1000px;</span><br><span class="line">    margin: 10px auto;</span><br><span class="line">    min-width: 320px;</span><br><span class="line">    width: 100%;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.box</span> &#123;</span></span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 100px;</span><br><span class="line"><span class="css">    <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line">    text-align: center;</span><br><span class="line">    display: inline-block;</span><br><span class="line">    font-size: 40px;</span><br><span class="line">    line-height: 100px;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.right</span> &#123;</span></span><br><span class="line">    text-align: right;</span><br><span class="line">    display: table-cell;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.left</span> &#123;</span></span><br><span class="line">    text-align: left;</span><br><span class="line">    display: table-cell;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Dom结构 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span>B<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span>A<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="一行平分显示几个模块，一般会用-float-来做，或者把每个-li-设置成-display-inline-block-来做，并且都要设置给他们设置一个宽度，而且最痛苦的是-5-个-li-如果你设置-width-20-他们一定会掉下来，如果-li-都设置成-display-table-cell；就不会出现这种情况，即使不设置宽度他们也会在一行显示，你在加多一行他也不会掉下来，依旧会在一样显示。"><a href="#一行平分显示几个模块，一般会用-float-来做，或者把每个-li-设置成-display-inline-block-来做，并且都要设置给他们设置一个宽度，而且最痛苦的是-5-个-li-如果你设置-width-20-他们一定会掉下来，如果-li-都设置成-display-table-cell；就不会出现这种情况，即使不设置宽度他们也会在一行显示，你在加多一行他也不会掉下来，依旧会在一样显示。" class="headerlink" title="一行平分显示几个模块，一般会用 float 来做，或者把每个 li 设置成 display:inline-block;来做，并且都要设置给他们设置一个宽度，而且最痛苦的是 5 个 li 如果你设置 width:20%;他们一定会掉下来，如果 li 都设置成 display:table-cell；就不会出现这种情况，即使不设置宽度他们也会在一行显示，你在加多一行他也不会掉下来，依旧会在一样显示。"></a>一行平分显示几个模块，一般会用 float 来做，或者把每个 li 设置成 display:inline-block;来做，并且都要设置给他们设置一个宽度，而且最痛苦的是 5 个 li 如果你设置 width:20%;他们一定会掉下来，如果 li 都设置成 display:table-cell；就不会出现这种情况，即使不设置宽度他们也会在一行显示，你在加多一行他也不会掉下来，依旧会在一样显示。</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">  * &#123;</span><br><span class="line">    box-sizing: border-box;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.content</span> &#123;</span></span><br><span class="line">    display: table;</span><br><span class="line"><span class="css">    <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#06c</span>;</span></span><br><span class="line">    padding: 15px 15px;</span><br><span class="line">    max-width: 1000px;</span><br><span class="line">    margin: 10px auto;</span><br><span class="line">    min-width: 320px;</span><br><span class="line">    width: 100%;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.content</span> <span class="selector-tag">ul</span> &#123;</span></span><br><span class="line">    display: table;</span><br><span class="line">    width: 100%;</span><br><span class="line">    padding: 0;</span><br><span class="line"><span class="css">    <span class="selector-tag">border-right</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.content</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line">    display: table-cell;</span><br><span class="line"><span class="css">    <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line">    text-align: center;</span><br><span class="line">    height: 100px;</span><br><span class="line">    border-right: none;</span><br><span class="line">    line-height: 100px;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Dom结构 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>6<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="图片垂直居中，有时候我们需要让图片垂直水平都居中于某个元素，用常规写法比较复杂，但用-table-cell-则相对简单。"><a href="#图片垂直居中，有时候我们需要让图片垂直水平都居中于某个元素，用常规写法比较复杂，但用-table-cell-则相对简单。" class="headerlink" title="图片垂直居中，有时候我们需要让图片垂直水平都居中于某个元素，用常规写法比较复杂，但用 table-cell 则相对简单。"></a>图片垂直居中，有时候我们需要让图片垂直水平都居中于某个元素，用常规写法比较复杂，但用 table-cell 则相对简单。</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">  * &#123;</span><br><span class="line">    box-sizing: border-box;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.content</span> &#123;</span></span><br><span class="line">    display: table;</span><br><span class="line"><span class="css">    <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#06c</span>;</span></span><br><span class="line">    padding: 15px 15px;</span><br><span class="line">    max-width: 1000px;</span><br><span class="line">    margin: 10px auto;</span><br><span class="line">    min-width: 320px;</span><br><span class="line">    width: 100%;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.img-box</span> &#123;</span></span><br><span class="line">    height: 150px;</span><br><span class="line">    width: 100px;</span><br><span class="line">    border: 1px solid red;</span><br><span class="line">    display: table-cell;</span><br><span class="line">    vertical-align: middle;</span><br><span class="line">    text-align: center;</span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-id">#4679bd</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Dom结构 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"img-box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"1.png"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="两-box-实现等高对齐，不对右侧的-box-设置-display-table-cell，只对左侧，所以就会出现左侧跟随右侧高度变化而变化，如果要实现不管两个-box-哪个高度产生变化另一个就跟随，只需要把右侧的-box-也设置成-display-table－cell-就可以实现了。"><a href="#两-box-实现等高对齐，不对右侧的-box-设置-display-table-cell，只对左侧，所以就会出现左侧跟随右侧高度变化而变化，如果要实现不管两个-box-哪个高度产生变化另一个就跟随，只需要把右侧的-box-也设置成-display-table－cell-就可以实现了。" class="headerlink" title="两 box 实现等高对齐，不对右侧的 box 设置 display:table-cell，只对左侧，所以就会出现左侧跟随右侧高度变化而变化，如果要实现不管两个 box 哪个高度产生变化另一个就跟随，只需要把右侧的 box 也设置成 display:table－cell 就可以实现了。"></a>两 box 实现等高对齐，不对右侧的 box 设置 display:table-cell，只对左侧，所以就会出现左侧跟随右侧高度变化而变化，如果要实现不管两个 box 哪个高度产生变化另一个就跟随，只需要把右侧的 box 也设置成 display:table－cell 就可以实现了。</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">  * &#123;</span><br><span class="line">    box-sizing: border-box;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.content</span> &#123;</span></span><br><span class="line">    display: table;</span><br><span class="line"><span class="css">    <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#06c</span>;</span></span><br><span class="line">    padding: 15px 15px;</span><br><span class="line">    max-width: 1000px;</span><br><span class="line">    margin: 10px auto;</span><br><span class="line">    min-width: 320px;</span><br><span class="line">    width: 100%;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.img-box</span> &#123;</span></span><br><span class="line">    height: 50px;</span><br><span class="line">    width: 100px;</span><br><span class="line">    border: 1px solid red;</span><br><span class="line">    display: table-cell;</span><br><span class="line">    vertical-align: middle;</span><br><span class="line">    text-align: center;</span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-id">#4679bd</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.text-box</span> &#123;</span></span><br><span class="line">    margin-left: 20px;</span><br><span class="line"><span class="css">    <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ddd</span>;</span></span><br><span class="line">    padding: 10px;</span><br><span class="line"><span class="css">    <span class="selector-tag">display</span>: <span class="selector-tag">table-cell</span>; <span class="comment">/*注意会导致外边距失效*/</span></span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Dom结构 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"img-box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"1.png"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"text-box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">      王尼玛和陈尼玛都是年轻有为的骚年，有一天他们相遇了，然后发现都对对方一见钟情后，所以就愉快的生活在了一起。。。。。王尼玛和陈尼玛都是年轻有为的骚年，有一天他们相遇了，然后发现都对对方一见钟情后，所以就愉快的生活在了一起。。。。。王尼玛和陈尼玛都是年轻有为的骚年，有一天他们相遇了，然后发现都对对方一见钟情后，所以就愉快的生活在了一起。。。。。</span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="弹性、响应式布局，只要改变浏览器宽度就会发现他们其实都是会随高度变化自动变化高度的。"><a href="#弹性、响应式布局，只要改变浏览器宽度就会发现他们其实都是会随高度变化自动变化高度的。" class="headerlink" title="弹性、响应式布局，只要改变浏览器宽度就会发现他们其实都是会随高度变化自动变化高度的。"></a>弹性、响应式布局，只要改变浏览器宽度就会发现他们其实都是会随高度变化自动变化高度的。</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">  * &#123;</span><br><span class="line">    box-sizing: border-box;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.content</span> &#123;</span></span><br><span class="line">    display: table;</span><br><span class="line"><span class="css">    <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#06c</span>;</span></span><br><span class="line">    padding: 15px 15px;</span><br><span class="line">    max-width: 1000px;</span><br><span class="line">    margin: 10px auto;</span><br><span class="line">    min-width: 320px;</span><br><span class="line">    width: 100%;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.left-box</span> &#123;</span></span><br><span class="line">    float: left;</span><br><span class="line">    margin-right: 10px;</span><br><span class="line">    padding-top: 5px;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.right-box</span> &#123;</span></span><br><span class="line">    display: table-cell;</span><br><span class="line">    padding: 10px;</span><br><span class="line"><span class="css">    <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line">    margin-right: 10px;</span><br><span class="line">    vertical-align: top;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Dom结构 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"img-box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"1.png"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right-box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span></span></span><br><span class="line"><span class="tag">      &gt;</span>王尼玛和陈尼玛都是年轻有为的骚年，有一天他们相遇了，然后发现都对对方一见钟情后，所以就愉快的生活在了一起。。。。。王尼玛和陈尼玛都是年轻有为的骚年，有一天他们相遇了，然后发现都对对方一见钟情后，所以就愉快的生活在了一起。。。。。王尼玛和陈尼玛都是年轻有为的骚年，有一天他们相遇了，然后发现都对对方一见钟情后，所以就愉快的生活在了一起。。。。。王尼玛和陈尼玛都是年轻有为的骚年，有一天他们相遇了，然后发现都对对方一见钟情后，所以就愉快的生活在了一起。。。。。王尼玛和陈尼玛都是年轻有为的骚年，有一天他们相遇了，然后发现都对对方一见钟情后，所以就愉快的生活在了一起。。。。。王尼玛和陈尼玛都是年轻有为的骚年，有一天他们相遇了，然后发现都对对方一见钟情后，所以就愉快的生活在了一起。。。。。王尼玛和陈尼玛都是年轻有为的骚年，有一天他们相遇了，然后发现都对对方一见钟情后，所以就愉快的生活在了一起。。。。。王尼玛和陈尼玛都是年轻有为的骚年，有一天他们相遇了，然后发现都对对方一见钟情后，所以就愉快的生活在了一起。。。。。王尼玛和陈尼玛都是年轻有为的骚年，有一天他们相遇了，然后发现都对对方一见钟情后，所以就愉快的生活在了一起。。。。。王尼玛和陈尼玛都是年轻有为的骚年，有一天他们相遇了，然后发现都对对方一见钟情后，所以就愉快的生活在了一起。。。。。王尼玛和陈尼玛都是年轻有为的骚年，有一天他们相遇了，然后发现都对对方一见钟情后，所以就愉快的生活在了一起。。。。。<span class="tag">&lt;/<span class="name">span</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>参考文献<br>1、<a href="http://www.zhangxinxu.com/wordpress/2010/10/%E6%88%91%E6%89%80%E7%9F%A5%E9%81%93%E7%9A%84%E5%87%A0%E7%A7%8Ddisplaytable-cell%E7%9A%84%E5%BA%94%E7%94%A8/" target="_blank" rel="noopener">我所知道的几种 display:table-cell 的应用</a><br>2、<a href="https://www.jianshu.com/p/2479665ee1f8" target="_blank" rel="noopener">CSS——布局布局神器 display:table-cell</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;display:table-cell 属性指让标签元素以表格单元格的形式呈现，类似于 td 标签。目前 IE8+以及其他现代浏览器都是支持此属性的。我们都知道，单元格有一些比较特别的属性，例如元素的垂直居中对齐，关联伸缩等。table-cell 同样会被其他一些 CSS 属
      
    
    </summary>
    
      <category term="css" scheme="https://liwenxin-jam.github.io/categories/css/"/>
    
    
      <category term="前端" scheme="https://liwenxin-jam.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>react基础小结</title>
    <link href="https://liwenxin-jam.github.io/2019/06/27/react%E5%9F%BA%E7%A1%80%E5%B0%8F%E7%BB%93/"/>
    <id>https://liwenxin-jam.github.io/2019/06/27/react基础小结/</id>
    <published>2019-06-27T01:32:12.000Z</published>
    <updated>2021-04-12T13:28:18.210Z</updated>
    
    <content type="html"><![CDATA[<p>React 是一个 Facebook 和 Instagram 用来创建用户界面的 JavaScript 库，用于构建“可预期的”和“声明式的”Web 用户界面。该框架的推出主要为了开发随着时间数据不断变化的大规模应用程序，具体文档可以参考<a href="https://reactjs.org/" target="_blank" rel="noopener">官网</a>。</p><h2 id="React-具有以下特点："><a href="#React-具有以下特点：" class="headerlink" title="React 具有以下特点："></a>React 具有以下特点：</h2><ul><li>1.声明式设计 −React 采用声明范式，可以轻松描述应用。</li><li>2.高效 −React 通过对 DOM 的模拟，最大限度地减少与 DOM 的交互。</li><li>3.灵活 −React 可以与已知的库或框架很好地配合。</li><li>4.JSX − JSX 是 JavaScript 语法的扩展。React 开发不一定使用 JSX ，但我们建议使用它。</li><li>5.组件 − 通过 React 构建组件，使得代码更加容易得到复用，能够很好的应用在大项目的开发中。</li><li>6.单向响应的数据流 − React 实现了单向响应的数据流，从而减少了重复代码，这也是它为什么比传统数据绑定更简单。</li></ul><h2 id="1、构建与初始化"><a href="#1、构建与初始化" class="headerlink" title="1、构建与初始化"></a>1、构建与初始化</h2><ul><li>方式一：如果你只是想简单尝试下 React，可以使用<a href="https://stackblitz.com/" title="stackblitz" target="_blank" rel="noopener">stackblitz</a>。在这里，我必须安利一下这个在线编辑器，你不需要安装任何东西，目前支持 angular、react、ionic，迟点应该也会支持 vue。支持 github 帐号登录，可以 fork 和 share，一个专门为 Web 构建的更聪明、更快的包管理器。</li><li>方式二：可以使用官网推荐用 create-react-app 的方式，是开始构建新的 React 单页面应用的最佳途径。它可以帮你配置开发环境，以便你可以使用最新的 JavaScript 特性，还能提供很棒的开发体验，并为生产环境优化你的应用。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在终端下全局安装官网推荐的create-react-app</span></span><br><span class="line">npm install -g create-react-app</span><br><span class="line">create-react-app my-app</span><br><span class="line">cd my-app</span><br><span class="line">npm start</span><br></pre></td></tr></table></figure><ul><li>方式三： 可以使用像 webpack 或 Browserify 这样的构建工具，以便于编写模块代码并将其压缩，优化加载时间，这里推荐使用<a href="https://doc.webpack-china.org/" title="webpack" target="_blank" rel="noopener">webpack</a>方式。</li></ul><h2 id="2、React-元素"><a href="#2、React-元素" class="headerlink" title="2、React 元素"></a>2、React 元素</h2><blockquote><p>react 是 React 库的入口点。如果你通过 script 标签加载 React，这些高阶 API 可用于 React 全局。如果你使用 ES6，你可以使用 import React from ‘react’ 。如果你使用 ES5，你可以使用 var React = require(‘react’)</p></blockquote><ul><li><p>创建 React 元素有 3 种方式，注意：官网认为 createFactor 方法过时了，推荐你使用 JSX 或直接使用 React.createElement()来替代它。JSX 可以看做 JavaScript 的语法拓展（eXtension），看起来有点像 XML，让我们可以在 JavaScript 中编写类似 HTML 的代码。使用 React，可以进行 JSX 语法到 JavaScript 的转换。判断一个元素是 HTML 元素还是 React 组件的原则是第一个字母是否大写，如果为大写，则认为是 React 组件，否则认为是 HTML 元素。如果我们自定义的组件首字母写成小写，那会得不到我们想要的结果。在 JSX 中可以通过 onClick 这样的方式来给一个元素添加事件处理函数，在 HTML 我们还可以用 onclick（onclick 和 onClick 是不同的）来添加事件</p></li><li><p>第一种是 React.createElement(type,[props],[…children])</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> listItemElement1 = React.createElement(</span><br><span class="line">  <span class="string">'li'</span>,</span><br><span class="line">  &#123; <span class="attr">className</span>: <span class="string">'item-1'</span>, <span class="attr">key</span>: <span class="string">'item-1'</span> &#125;,</span><br><span class="line">  <span class="string">'Item-1'</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">var</span> listItemElement2 = React.createElement(</span><br><span class="line">  <span class="string">'li'</span>,</span><br><span class="line">  &#123; <span class="attr">className</span>: <span class="string">'item-2'</span>, <span class="attr">key</span>: <span class="string">'item-2'</span> &#125;,</span><br><span class="line">  <span class="string">'Item-2'</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">var</span> listItemElement3 = React.createElement(</span><br><span class="line">  <span class="string">'li'</span>,</span><br><span class="line">  &#123; <span class="attr">className</span>: <span class="string">'item-3'</span>, <span class="attr">key</span>: <span class="string">'item-3'</span> &#125;,</span><br><span class="line">  <span class="string">'Item-3'</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">var</span> reactFragment = [listItemElement1, listItemElement2, listItemElement3];</span><br><span class="line"><span class="keyword">var</span> listOfItems = React.createElement(</span><br><span class="line">  <span class="string">'ul'</span>,</span><br><span class="line">  &#123; <span class="attr">className</span>: <span class="string">'list-of-items'</span> &#125;,</span><br><span class="line">  reactFragment</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li>第二种是通过创建工厂函数 React.createFactory(type)，React.DOM.li(…) 是 React.createELement(‘li’, …) 的一个包装写法，但被官网认为是过时的，有可能最终会被遗弃。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> createListItemElement = React.createFactory(<span class="string">'li'</span>);</span><br><span class="line"><span class="keyword">var</span> listItemElement1 = React.DOM.li(</span><br><span class="line">  &#123; <span class="attr">className</span>: <span class="string">'item-1'</span>, <span class="attr">key</span>: <span class="string">'item-1'</span> &#125;,</span><br><span class="line">  <span class="string">'Item-1'</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">var</span> listItemElement2 = React.DOM.li(</span><br><span class="line">  &#123; <span class="attr">className</span>: <span class="string">'item-2'</span>, <span class="attr">key</span>: <span class="string">'item-2'</span> &#125;,</span><br><span class="line">  <span class="string">'Item-2'</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">var</span> listItemElement3 = React.DOM.li(</span><br><span class="line">  &#123; <span class="attr">className</span>: <span class="string">'item-3'</span>, <span class="attr">key</span>: <span class="string">'item-3'</span> &#125;,</span><br><span class="line">  <span class="string">'Item-3'</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">var</span> reactFragment = [listItemElement1, listItemElement2, listItemElement3];</span><br><span class="line"><span class="keyword">var</span> listOfItems = React.createElement(</span><br><span class="line">  <span class="string">'ul'</span>,</span><br><span class="line">  &#123; <span class="attr">className</span>: <span class="string">'list-of-items'</span> &#125;,</span><br><span class="line">  reactFragment</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li>第三种是使用 JSX 创建 React 元素，编写 React 的时候，JSX 并不是必须的。每一个 JSX 元素都只是 React.createElement(component, props, …children) 的语法糖。因此，任何时候你用 JSX 语法写的代码也可以用普通的 JavaScript 语法写出来。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var listOfItems =</span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">className</span>=<span class="string">"list-of-items"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">className</span>=<span class="string">"item-1"</span>&gt;</span>Item 1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">className</span>=<span class="string">"item-2"</span>&gt;</span>Item 2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">className</span>=<span class="string">"item-3"</span>&gt;</span>Item 3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">;</span><br><span class="line"><span class="comment">&lt;!-- 官网例子jsx写法 --&gt;</span></span><br><span class="line">class Hello extends React.Component &#123; render() &#123; return</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello &#123;this.props.toWhat&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">; &#125; &#125;</span><br><span class="line"><span class="comment">&lt;!-- 编译转成不使用JSX的代码 --&gt;</span></span><br><span class="line">class Hello extends React.Component &#123; render() &#123; return</span><br><span class="line">React.createElement('div', null, `Hello $&#123;this.props.toWhat&#125;`); &#125; &#125;</span><br><span class="line">ReactDOM.render( React.createElement(Hello, &#123;toWhat: 'World'&#125;, null),</span><br><span class="line">document.getElementById('root') );</span><br></pre></td></tr></table></figure><ul><li>渲染 React 元素</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//格式：ReactDOM.render(ReactElement, DOMElement, callback);</span></span><br><span class="line">ReactDOM.render(listOfItems, <span class="built_in">document</span>.getElementById(<span class="string">'example'</span>));</span><br></pre></td></tr></table></figure><h2 id="3、React-组件"><a href="#3、React-组件" class="headerlink" title="3、React 组件"></a>3、React 组件</h2><ul><li>可以通过三种方式创建 React 组件，注意，组件类的第一个字母必须大写，否则会报错，比如 HelloMessage 不能写成 helloMessage。另外，组件类只能包含一个顶层标签，否则也会报错。</li><li>第一种无状态函数式组件，无状态函数式组件形式上表现为只带有一个 render 方法的组件类，通过函数形式或者 ES6 arrow function 的形式创建，并且该组件是无 state 状态的。只要有可能，尽量使用无状态组件。能用 React.Component 创建的组件的就尽量不用 React.createClass 形式创建组件。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function HelloComponent(props) &#123; return</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello &#123;props.name&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">; &#125; ReactDOM.render( <span class="tag">&lt;<span class="name">HelloComponent</span> <span class="attr">name</span>=<span class="string">"world"</span> /&gt;</span>,</span><br><span class="line">document.getElementById('example') )</span><br></pre></td></tr></table></figure><ul><li>第二种 React.createClass，它是 react 刚开始推荐的创建组件的方式，是用 ES5 的写法实现</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var InputControlES5 = React.createClass(&#123; propTypes:</span><br><span class="line">&#123;//定义传入props中的属性各种类型要求，可以接受任意值，字符串、对象、函数等等。</span><br><span class="line">initialValue: React.PropTypes.string.isRequired &#125;, defaultProps: &#123;</span><br><span class="line">//用来设置组件属性的默认值 initialValue: 'Hello World' &#125;, getInitialState:</span><br><span class="line">function() &#123;//用于定义初始状态，也就是一个对象，这个对象可以通过 this.state</span><br><span class="line">属性读取。 return &#123; text: this.props.initialValue || 'placeholder' &#125;; &#125;,</span><br><span class="line">handleChange: function(event) &#123; this.setState(&#123;</span><br><span class="line">//事件的回调函数，当用户交互导致状态变化，this.setState</span><br><span class="line">方法就修改状态值，每次修改以后，自动调用this.render方法，再次渲染组件。 text:</span><br><span class="line">event.target.value &#125;); &#125;, render: function() &#123; return (</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  Type something:</span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">onChange</span>=<span class="string">"&#123;this.handleChange&#125;"</span> <span class="attr">value</span>=<span class="string">"&#123;this.state.text&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">); &#125; &#125;); ReactDOM.render(</span><br><span class="line"><span class="tag">&lt;<span class="name">InputControlES5</span> /&gt;</span>, document.getElementById('example') )</span><br></pre></td></tr></table></figure><ul><li>第三种是 React.Component，它是以 ES6 的形式来创建 react 的组件的，是 React 目前极为推荐的创建有状态组件的方式，最终会取代 React.createClass 形式；相对于 React.createClass 可以更好实现代码复用。将上面 React.createClass 的形式改为 React.Component 形式如下：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class InputControlES6 extends React.Component &#123; constructor(props) &#123;</span><br><span class="line">super(props); //调用super，是为了正确获取到this this.state = &#123; text:</span><br><span class="line">props.initialValue || 'placeholder' &#125;; this.handleChange =</span><br><span class="line">this.handleChange.bind(this); // ES6 类中函数必须手动绑定 &#125; handleChange(event)</span><br><span class="line">&#123; this.setState(&#123; text: event.target.value &#125;); &#125; render() &#123; return (</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  Type something:</span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">onChange</span>=<span class="string">"&#123;this.handleChange&#125;"</span> <span class="attr">value</span>=<span class="string">"&#123;this.state.text&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">); &#125; &#125; InputControlES6.propTypes = &#123; initialValue:</span><br><span class="line">React.PropTypes.string.isRequired &#125;; InputControlES6.defaultProps = &#123;</span><br><span class="line">initialValue: 'Hello Wrold' &#125;; ReactDOM.render(</span><br><span class="line"><span class="tag">&lt;<span class="name">InputControlES6</span> /&gt;</span>, document.getElementById('example') )</span><br></pre></td></tr></table></figure><h2 id="React-createClass-与-React-Component-区别"><a href="#React-createClass-与-React-Component-区别" class="headerlink" title="React.createClass 与 React.Component 区别"></a>React.createClass 与 React.Component 区别</h2><ul><li>React.createClass 创建的组件，其每一个成员函数的 this 都有 React 自动绑定，任何时候，直接使用 this.method 即可，函数中的 this 会被正确设置</li><li>React.Component 创建的组件，其成员函数不会自动绑定 this，需要开发者手动绑定，否则将它作为事件处理函数被调用时不能通过 this 获取当前组件实例对象。</li><li>React.Component 有三种手动绑定方法：<br>1、在构造函数中完成绑定<br>2、调用时使用 method.bind(this)来完成绑定<br>3、使用 arrow function 来绑定</li><li>组件属性类型 propTypes 及其默认 props 属性 defaultProps 配置不同。</li><li>组件初始状态 state 配置不同。React.createClass 创建的组件，其状态 state 是通过 getInitState 方法方法来配置组件的相关状态。React.Component 创建的组件，其状态 state 是在 construct 中像初始化组件属性一样声明。</li><li>Mixins 的支持不同。React.createClass 在创建组件时可以使用 mixins 属性，以数组的形式来混合类的集合。React.Component 不支持 Mixins,React 开发者社区提供了一个全新的方式来取代 Mixins，那就是 Higher-Order Components(高阶组件)</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- React.createClass --&gt;</span></span><br><span class="line">const Contacts = React.createClass(&#123;</span><br><span class="line">    handleClick() &#123;</span><br><span class="line">        console.log(this); <span class="comment">&lt;!-- React组件实例 --&gt;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    render() &#123;</span><br><span class="line">        return (</span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">&lt;!-- React.Component --&gt;</span></span><br><span class="line">class Contacts extends React.Component &#123;</span><br><span class="line">    constructor(props) &#123;</span><br><span class="line">        super(props);</span><br><span class="line">    &#125;</span><br><span class="line">    handleClick() &#123;</span><br><span class="line">        console.log(this); // null</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        return (</span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">&lt;!-- React.Component绑定this方法 --&gt;</span></span><br><span class="line">constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">    this.handleClick = this.handleClick.bind(this); //构造函数中绑定</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick.bind(this)&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> //使用bind来绑定</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>this.handleClick()&#125;&gt;<span class="tag">&lt;/<span class="name">div</span>&gt;</span> //使用arrow function来绑定</span><br></pre></td></tr></table></figure><h2 id="4、React-组件生命周期"><a href="#4、React-组件生命周期" class="headerlink" title="4、React 组件生命周期"></a>4、React 组件生命周期</h2><p>##组件的生命周期分成三个状态：</p><ul><li>挂载(Mounting): 这个阶段发生在组件被创建并被插入到 DOM 时</li><li>更新(Updating): 这个阶段发生在组件被重新渲染成虚拟 DOM 并决定实际 DOM 是否需要更新时</li><li>卸载(Unmounting): 这个阶段发生在组件从 DOM 中被删除时</li></ul><p>##组件挂载阶段</p><p>###ES5(React.createClass)</p><ul><li>getInitialState()</li><li>componentWillMount()</li><li>render()</li><li>componentDidMount()</li></ul><p>###ES6(React.Component)</p><ul><li>constructor()</li><li>componentWillMount()</li><li>render()</li><li>componentDidMount()</li></ul><p>###组件更新阶段</p><ul><li>componentWillReceiveProps()</li><li>shouldComponentUpdate()</li><li>componentWillUpdate()</li><li>render()</li><li>componentDidUpdate()</li></ul><p>###组件卸载阶段</p><ul><li>componentWillUnmount()</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var Hello = React.createClass(&#123; getInitialState: function () &#123; return &#123; opacity:</span><br><span class="line">1.0 &#125;; &#125;, componentDidMount: function () &#123; this.timer = setInterval(function ()</span><br><span class="line">&#123; var opacity = this.state.opacity; opacity -= .05; if (opacity <span class="tag">&lt; <span class="attr">0.1</span>) &#123; <span class="attr">opacity</span></span></span><br><span class="line"><span class="tag">= <span class="string">1.0;</span> &#125; <span class="attr">this.setState</span>(&#123; <span class="attr">opacity:</span> <span class="attr">opacity</span> &#125;); &#125;<span class="attr">.bind</span>(<span class="attr">this</span>), <span class="attr">100</span>); &#125;, <span class="attr">render:</span></span></span><br><span class="line"><span class="tag"><span class="attr">function</span> () &#123; <span class="attr">return</span> (</span></span><br><span class="line">&lt;div style="&#123;&#123;opacity:" this.state.opacity&#125;&#125;&gt;Hello &#123;this.props.name&#125;&lt;/div&gt;</span><br><span class="line">); &#125; &#125;); ReactDOM.render(</span><br><span class="line"><span class="tag">&lt;<span class="name">Hello</span> <span class="attr">name</span>=<span class="string">"world"</span> /&gt;</span>, document.body );</span><br></pre></td></tr></table></figure><h2 id="5、受控与非受控组件"><a href="#5、受控与非受控组件" class="headerlink" title="5、受控与非受控组件"></a>5、受控与非受控组件</h2><blockquote><p>React 通过 props 和 state 来区分组件的属性和状态。其中，props(属性)用来表示组件外部传入的属性，组件内部不能改变。而 state(状态)通常表示组件内部的状态，状态是可以并且应该改变的。React 通过 props 和 state 的值来渲染组件，组件渲染完毕之后，通过响应用户操作或者异步网络请求等操作更新组件的状态来重新渲染组件。</p></blockquote><ul><li>受控组件将表单数据统一存放在 state 中，交由 React 管理，我们就可以根据用户的输入及时作出响应：1、验证输入正确性（输入格式、类型等），并作出反馈。</li><li>2、根据输入设置其它组件的状态，譬如输入不规范时，提交按钮处于不可用状态。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class ControlledForm extends React.Component &#123; constructor(props) &#123;</span><br><span class="line">super(props); this.state = &#123; username: '' &#125; this.handleSubmit =</span><br><span class="line">this.handleSubmit.bind(this); this.updateUsername =</span><br><span class="line">this.updateUsername.bind(this); &#125; updateUsername(e) &#123; this.setState(&#123; username:</span><br><span class="line">e.target.value, &#125;) &#125; handleSubmit() &#123;&#125; render () &#123; return (</span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">onSubmit</span>=<span class="string">"&#123;this.handleSubmit&#125;"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">    <span class="attr">type</span>=<span class="string">"text"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">value</span>=<span class="string">"&#123;this.state.username&#125;"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">onChange</span>=<span class="string">"&#123;this.updateUsername&#125;"</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">) &#125; &#125; ReactDOM.render(<span class="tag">&lt;<span class="name">ControlledForm</span> /&gt;</span>, document.getElementById('react-root'))</span><br></pre></td></tr></table></figure><ul><li>非受控组件和传统的表单数据管理一样，由 DOM 存放表单数据，可以使用 React 提供的 refs 来获得 DOM 元素的引用。在需要的时候（譬如表单提交的时候）一次性获取表单的值。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class UnControlledForm extends React.Component &#123; constructor(props) &#123;</span><br><span class="line">super(props); this.handleSubmit = this.handleSubmit.bind(this); &#125;</span><br><span class="line">handleSubmit(e) &#123; e.preventDefault(); console.log("Value: ", this.input.value) &#125;</span><br><span class="line">render () &#123; return (</span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">onSubmit</span>=<span class="string">"&#123;this.handleSubmit&#125;"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'text'</span> <span class="attr">ref</span>=<span class="string">&#123;(input)</span> =&gt;</span> this.input = input&#125; /&gt;</span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">) &#125; &#125; ReactDOM.render(<span class="tag">&lt;<span class="name">UnControlledForm</span> /&gt;</span>,</span><br><span class="line">document.getElementById('react-root'));</span><br></pre></td></tr></table></figure><ul><li>参考文献<br>1、<a href="http://www.ruanyifeng.com/blog/2015/03/react.html" title="阮一峰React 入门实例教程" target="_blank" rel="noopener">阮一峰 React 入门实例教程</a><br>2、<a href="https://github.com/Marco2333/react-demo" title="React从入门到放弃 -- 笔记、教程、Demo" target="_blank" rel="noopener">React 从入门到放弃 – 笔记、教程、Demo</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;React 是一个 Facebook 和 Instagram 用来创建用户界面的 JavaScript 库，用于构建“可预期的”和“声明式的”Web 用户界面。该框架的推出主要为了开发随着时间数据不断变化的大规模应用程序，具体文档可以参考&lt;a href=&quot;https://r
      
    
    </summary>
    
      <category term="react" scheme="https://liwenxin-jam.github.io/categories/react/"/>
    
    
      <category term="框架" scheme="https://liwenxin-jam.github.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>背景图自适应小技巧</title>
    <link href="https://liwenxin-jam.github.io/2019/05/16/%E8%83%8C%E6%99%AF%E5%9B%BE%E8%87%AA%E9%80%82%E5%BA%94%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    <id>https://liwenxin-jam.github.io/2019/05/16/背景图自适应小技巧/</id>
    <published>2019-05-16T09:33:48.000Z</published>
    <updated>2021-04-12T13:28:18.214Z</updated>
    
    <content type="html"><![CDATA[<p>此文是基于素材比例可能有多种大小不等的比例，例如有些图片是宽大于高，有些是高大于宽。将图片作为背景图，并设为黑底。把图片作为背景居中显示，目的是为了在父容器的宽高下等比例缩放，保证图片不变形。如果是宽大于高，会显示上下黑边。如果是高大于宽，会显示左右黑边。</p><h2 id="背景图自适应"><a href="#背景图自适应" class="headerlink" title="背景图自适应"></a>背景图自适应</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">      html,</span><br><span class="line">      body &#123;</span><br><span class="line">        width: 100%;</span><br><span class="line">        height: 100%;</span><br><span class="line">        padding: 0;</span><br><span class="line">        margin: 0;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">      <span class="selector-class">.container</span> &#123;</span></span><br><span class="line">        width: 500px;</span><br><span class="line">        height: 500px;</span><br><span class="line">        margin: 0 auto;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">      <span class="selector-class">.bg</span> &#123;</span></span><br><span class="line">        width: 100%;</span><br><span class="line">        height: 100%;</span><br><span class="line"><span class="css">        <span class="selector-tag">background-image</span>: <span class="selector-tag">url</span>(<span class="selector-tag">test1</span><span class="selector-class">.jpg</span>);</span></span><br><span class="line"><span class="css">        <span class="comment">/*  background-image: url(test2.jpg); */</span></span></span><br><span class="line">        background-color: black;</span><br><span class="line">        background-origin: content;</span><br><span class="line">        background-position: 50% 50%;</span><br><span class="line">        background-size: contain;</span><br><span class="line">        background-repeat: no-repeat;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bg"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;此文是基于素材比例可能有多种大小不等的比例，例如有些图片是宽大于高，有些是高大于宽。将图片作为背景图，并设为黑底。把图片作为背景居中显示，目的是为了在父容器的宽高下等比例缩放，保证图片不变形。如果是宽大于高，会显示上下黑边。如果是高大于宽，会显示左右黑边。&lt;/p&gt;
&lt;h2 
      
    
    </summary>
    
      <category term="css" scheme="https://liwenxin-jam.github.io/categories/css/"/>
    
    
      <category term="前端" scheme="https://liwenxin-jam.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Swiper缩略图控制&amp;互相控制</title>
    <link href="https://liwenxin-jam.github.io/2019/04/13/Swiper%E7%BC%A9%E7%95%A5%E5%9B%BE%E6%8E%A7%E5%88%B6&amp;%E4%BA%92%E7%9B%B8%E6%8E%A7%E5%88%B6/"/>
    <id>https://liwenxin-jam.github.io/2019/04/13/Swiper缩略图控制&amp;互相控制/</id>
    <published>2019-04-13T13:56:51.000Z</published>
    <updated>2021-04-12T13:28:18.205Z</updated>
    
    <content type="html"><![CDATA[<p>此文是基于<a href="http://www.swiper.com.cn/" title="swiper官网" target="_blank" rel="noopener">swiper 官网</a>来写，目的只是做个总结，需求是上边是大图显示，下边是缩略图图显示。默认下边不划动，当缩略图图一行不够显示的时候才滚动。引用的是 V3 版本的文件，官网有个类似的效果是引用 V4 版本的，仅供参考。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span></span></span><br><span class="line"><span class="tag">      <span class="attr">name</span>=<span class="string">"viewport"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"./css/swiper-3.4.2.min.css"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">      html,</span><br><span class="line">      body &#123;</span><br><span class="line">        position: relative;</span><br><span class="line">        height: 100%;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      body &#123;</span><br><span class="line">        background: #000;</span><br><span class="line">        font-family: Helvetica Neue, Helvetica, Arial, sans-serif;</span><br><span class="line">        font-size: 14px;</span><br><span class="line">        color: #000;</span><br><span class="line">        margin: 0;</span><br><span class="line">        padding: 0;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      .container &#123;</span><br><span class="line">        width: 300px;</span><br><span class="line">        margin: 0 auto;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      .swiper-slide &#123;</span><br><span class="line">        background-size: cover;</span><br><span class="line">        background-position: center;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      .gallery-top-box &#123;</span><br><span class="line">        width: 100%;</span><br><span class="line">        margin: 0 auto;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      .gallery-thumbs-box &#123;</span><br><span class="line">        width: 100%;</span><br><span class="line">        margin: 0 auto;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      .swiper-container &#123;</span><br><span class="line">        width: 100%;</span><br><span class="line">        height: 200px;</span><br><span class="line">        margin-left: auto;</span><br><span class="line">        margin-right: auto;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      .gallery-thumbs &#123;</span><br><span class="line">        height: 60px;</span><br><span class="line">        box-sizing: border-box;</span><br><span class="line">        padding: 10px 0;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      .gallery-thumbs .swiper-slide &#123;</span><br><span class="line">        height: 100%;</span><br><span class="line">        opacity: 0.4;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      .gallery-thumbs .swiper-slide-active &#123;</span><br><span class="line">        opacity: 1;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      .gallery-thumbs .swiper-wrapper &#123;</span><br><span class="line">        transform: none !important;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- Swiper --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"gallery-top-box"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-container gallery-top"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-wrapper"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">              <span class="attr">class</span>=<span class="string">"swiper-slide"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">style</span>=<span class="string">"background-image:url(img/nature1.jpg)"</span></span></span><br><span class="line"><span class="tag">            &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">              <span class="attr">class</span>=<span class="string">"swiper-slide"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">style</span>=<span class="string">"background-image:url(img/nature2.jpg)"</span></span></span><br><span class="line"><span class="tag">            &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">              <span class="attr">class</span>=<span class="string">"swiper-slide"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">style</span>=<span class="string">"background-image:url(img/nature3.jpg)"</span></span></span><br><span class="line"><span class="tag">            &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">              <span class="attr">class</span>=<span class="string">"swiper-slide"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">style</span>=<span class="string">"background-image:url(img/nature4.jpg)"</span></span></span><br><span class="line"><span class="tag">            &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">              <span class="attr">class</span>=<span class="string">"swiper-slide"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">style</span>=<span class="string">"background-image:url(img/nature5.jpg)"</span></span></span><br><span class="line"><span class="tag">            &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">              <span class="attr">class</span>=<span class="string">"swiper-slide"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">style</span>=<span class="string">"background-image:url(img/nature6.jpg)"</span></span></span><br><span class="line"><span class="tag">            &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">              <span class="attr">class</span>=<span class="string">"swiper-slide"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">style</span>=<span class="string">"background-image:url(img/nature7.jpg)"</span></span></span><br><span class="line"><span class="tag">            &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">              <span class="attr">class</span>=<span class="string">"swiper-slide"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">style</span>=<span class="string">"background-image:url(img/nature8.jpg)"</span></span></span><br><span class="line"><span class="tag">            &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">              <span class="attr">class</span>=<span class="string">"swiper-slide"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">style</span>=<span class="string">"background-image:url(img/nature9.jpg)"</span></span></span><br><span class="line"><span class="tag">            &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">              <span class="attr">class</span>=<span class="string">"swiper-slide"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">style</span>=<span class="string">"background-image:url(img/nature10.jpg)"</span></span></span><br><span class="line"><span class="tag">            &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- Add Arrows --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-button-next swiper-button-white"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-button-prev swiper-button-white"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"gallery-thumbs-box"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-container gallery-thumbs"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-wrapper"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">              <span class="attr">class</span>=<span class="string">"swiper-slide"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">style</span>=<span class="string">"background-image:url(img/nature1.jpg)"</span></span></span><br><span class="line"><span class="tag">            &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">              <span class="attr">class</span>=<span class="string">"swiper-slide"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">style</span>=<span class="string">"background-image:url(img/nature2.jpg)"</span></span></span><br><span class="line"><span class="tag">            &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">              <span class="attr">class</span>=<span class="string">"swiper-slide"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">style</span>=<span class="string">"background-image:url(img/nature3.jpg)"</span></span></span><br><span class="line"><span class="tag">            &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">              <span class="attr">class</span>=<span class="string">"swiper-slide"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">style</span>=<span class="string">"background-image:url(img/nature4.jpg)"</span></span></span><br><span class="line"><span class="tag">            &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">              <span class="attr">class</span>=<span class="string">"swiper-slide"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">style</span>=<span class="string">"background-image:url(img/nature5.jpg)"</span></span></span><br><span class="line"><span class="tag">            &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">              <span class="attr">class</span>=<span class="string">"swiper-slide"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">style</span>=<span class="string">"background-image:url(img/nature6.jpg)"</span></span></span><br><span class="line"><span class="tag">            &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">              <span class="attr">class</span>=<span class="string">"swiper-slide"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">style</span>=<span class="string">"background-image:url(img/nature7.jpg)"</span></span></span><br><span class="line"><span class="tag">            &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">              <span class="attr">class</span>=<span class="string">"swiper-slide"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">style</span>=<span class="string">"background-image:url(img/nature8.jpg)"</span></span></span><br><span class="line"><span class="tag">            &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">              <span class="attr">class</span>=<span class="string">"swiper-slide"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">style</span>=<span class="string">"background-image:url(img/nature9.jpg)"</span></span></span><br><span class="line"><span class="tag">            &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">              <span class="attr">class</span>=<span class="string">"swiper-slide"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">style</span>=<span class="string">"background-image:url(img/nature10.jpg)"</span></span></span><br><span class="line"><span class="tag">            &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Swiper JS --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./js/swiper-3.4.2.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> leftScreenVal, moveLeftVal;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> galleryTop = <span class="keyword">new</span> Swiper(<span class="string">'.gallery-top'</span>, &#123;</span></span><br><span class="line"><span class="javascript">        nextButton: <span class="string">'.swiper-button-next'</span>,</span></span><br><span class="line"><span class="javascript">        prevButton: <span class="string">'.swiper-button-prev'</span>,</span></span><br><span class="line"><span class="javascript">        observer: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">        observeParents: <span class="literal">true</span>,</span></span><br><span class="line">        autoplay: 5000,</span><br><span class="line"><span class="javascript">        onSlidePrevEnd: <span class="function"><span class="keyword">function</span> (<span class="params">swiper</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">//  这里因为居中显示的时候，按照我屏幕默认距离屏幕左边570像素，所以是以570为基准，然后再算每一个图片宽度155，有几张</span></span></span><br><span class="line"><span class="javascript">          leftScreenVal = <span class="built_in">document</span></span></span><br><span class="line"><span class="javascript">            .getElementsByClassName(<span class="string">'swiper-slide-active'</span>)[<span class="number">1</span>]</span></span><br><span class="line">            .getBoundingClientRect().left;</span><br><span class="line">          if (leftScreenVal &lt; 570) &#123;</span><br><span class="line"><span class="javascript">            moveLeftVal = <span class="built_in">document</span>.getElementsByClassName(</span></span><br><span class="line"><span class="javascript">              <span class="string">'swiper-slide-active'</span></span></span><br><span class="line">            )[1].offsetLeft;</span><br><span class="line">            moveLeftVal = 155 - moveLeftVal;</span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.querySelector(</span></span><br><span class="line"><span class="javascript">              <span class="string">'.gallery-thumbs &gt; .swiper-wrapper'</span></span></span><br><span class="line"><span class="javascript">            ).style.left = moveLeftVal + <span class="string">'px'</span>;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        onSlideNextEnd: <span class="function"><span class="keyword">function</span> (<span class="params">swiper</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">//  这里因为居中显示的时候，按照我屏幕默认距离屏幕左边570像素，所以是以570为基准，然后再算每一个图片宽度155，有几张</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">var</span> leftScreenVal = <span class="built_in">document</span></span></span><br><span class="line"><span class="javascript">            .getElementsByClassName(<span class="string">'swiper-slide-active'</span>)[<span class="number">1</span>]</span></span><br><span class="line">            .getBoundingClientRect().left;</span><br><span class="line">          if (leftScreenVal &gt;= 880) &#123;</span><br><span class="line"><span class="javascript">            <span class="comment">//  这里880是因为我基准570加上下边一行默认只显示两张155宽度的缩略图</span></span></span><br><span class="line"><span class="javascript">            moveLeftVal = <span class="built_in">document</span>.getElementsByClassName(</span></span><br><span class="line"><span class="javascript">              <span class="string">'swiper-slide-active'</span></span></span><br><span class="line">            )[1].offsetLeft;</span><br><span class="line">            moveLeftVal = 0 - moveLeftVal;</span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.querySelector(</span></span><br><span class="line"><span class="javascript">              <span class="string">'.gallery-thumbs &gt; .swiper-wrapper'</span></span></span><br><span class="line"><span class="javascript">            ).style.left = moveLeftVal + <span class="string">'px'</span>;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;);</span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> galleryThumbs = <span class="keyword">new</span> Swiper(<span class="string">'.gallery-thumbs'</span>, &#123;</span></span><br><span class="line"><span class="javascript">        centeredSlides: <span class="literal">true</span>,</span></span><br><span class="line">        slidesPerView: 2,</span><br><span class="line">        touchRatio: 0.2,</span><br><span class="line"><span class="javascript">        slideToClickedSlide: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">        observer: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">        observeParents: <span class="literal">true</span>,</span></span><br><span class="line">        spaceBetween: 10,</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      galleryTop.params.control = galleryThumbs;</span><br><span class="line">      galleryThumbs.params.control = galleryTop;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>如果有需要源文件可以从以下<a href="https://github.com/liwenxin-jam/swiper-controlDemo" title="源码" target="_blank" rel="noopener">源码</a>地址拉取</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;此文是基于&lt;a href=&quot;http://www.swiper.com.cn/&quot; title=&quot;swiper官网&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;swiper 官网&lt;/a&gt;来写，目的只是做个总结，需求是上边是大图显示，下边是缩略图图显示。默认
      
    
    </summary>
    
      <category term="笔记" scheme="https://liwenxin-jam.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="前端" scheme="https://liwenxin-jam.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>less小结</title>
    <link href="https://liwenxin-jam.github.io/2019/03/10/less%E5%B0%8F%E7%BB%93/"/>
    <id>https://liwenxin-jam.github.io/2019/03/10/less小结/</id>
    <published>2019-03-10T00:49:36.000Z</published>
    <updated>2021-04-12T13:28:18.209Z</updated>
    
    <content type="html"><![CDATA[<p>less是预编译css语言，是css的超集。此文只是个人的一些总结归纳，仅供参考。如果想深入了解可以细看<a href="http://less.bootcss.com/" title="官网" target="_blank" rel="noopener">官网</a>。</p><h2 id="1、注释"><a href="#1、注释" class="headerlink" title="1、注释"></a>1、注释</h2><ul><li>.less后缀的文件并不能直接在浏览器上识别，所以需要借助第三方工具编译，我用的是koala。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  单行注释， 不会附加在编译后的文件上</span></span><br><span class="line"><span class="comment">/*  多行注释 会附加在编译后的文件上 */</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="2、变量"><a href="#2、变量" class="headerlink" title="2、变量"></a>2、变量</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义less变量使用的是@符号，稍微注意下</span></span><br><span class="line"><span class="comment">// 定义sass变量使用的是$符号，稍微注意下</span></span><br><span class="line"><span class="comment">// 1.变量名可以由字母、数字、_和-组成</span></span><br><span class="line"><span class="comment">// 2.less变量可以使用类似@tagName: section;注意在用于选择器部件或者是字符串拼接的时候，必须使用使用@&#123;tagName&#125;才会生效，作为属性的时候可以直接@tagName</span></span><br><span class="line"><span class="comment">// 3.less在使用变量的时候有作用域的，优先选择最靠近的less变量使用。存在使用less变量的过程中会有懒加载的情况。</span></span><br><span class="line"></span><br><span class="line">@color: blue;</span><br><span class="line">@font-size: <span class="number">20</span>px;</span><br><span class="line">h1 &#123;</span><br><span class="line">    color: @color;</span><br><span class="line">    font-size: @font-size;</span><br><span class="line">&#125;</span><br><span class="line">@tagName: section;</span><br><span class="line">@height: height;</span><br><span class="line">@&#123;tagName&#125; &#123;</span><br><span class="line">    @&#123;height&#125;: <span class="number">100</span>%;</span><br><span class="line">&#125;</span><br><span class="line">@changedColor: green;</span><br><span class="line">div &#123;</span><br><span class="line">    ul &#123;</span><br><span class="line">        li&#123;</span><br><span class="line">            color: @changedColor;</span><br><span class="line">            <span class="comment">// 那么此时就是这个最靠近了，less找的就会是这个变量对应的颜色值</span></span><br><span class="line">            @changedColor: pink; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 虽然你放在了下面，less会发挥懒加载机制，优先找最靠近的变量</span></span><br><span class="line">        @changedColor: #f00;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、嵌套"><a href="#3、嵌套" class="headerlink" title="3、嵌套"></a>3、嵌套</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  可以直接嵌套区分上下层级关系，也可以利用父选择器引用，采用&amp;可以引用完整的父选择器</span></span><br><span class="line">@pink: pink;</span><br><span class="line">@black: black;</span><br><span class="line">.container &#123;</span><br><span class="line">    padding: <span class="number">20</span>px;</span><br><span class="line">    background-color: @pink;</span><br><span class="line">    &gt; div &#123;</span><br><span class="line">   　　width: <span class="number">100</span>px;</span><br><span class="line">    &#125;</span><br><span class="line">    .aside &#123;</span><br><span class="line">   　　width: <span class="number">200</span>px;</span><br><span class="line">    &#125;</span><br><span class="line">    button &#123;</span><br><span class="line">        margin: <span class="number">10</span>px;</span><br><span class="line">        color: @pink;</span><br><span class="line">    &#125;</span><br><span class="line">    div &#123;</span><br><span class="line">        padding: <span class="number">15</span>px <span class="number">10</span>px;</span><br><span class="line">        color: @black;</span><br><span class="line">        <span class="comment">// 在这个div的后面加多一个after伪类，并添加以下内容</span></span><br><span class="line">        &amp;:after &#123;</span><br><span class="line">            display: block;</span><br><span class="line">            content: <span class="string">'英文名是jam!'</span>;</span><br><span class="line">            color: #909090;</span><br><span class="line">            font-weight: bold;</span><br><span class="line">            font-size: <span class="number">50</span>px;</span><br><span class="line">            font-family: <span class="string">"Microsoft YaHei"</span>;</span><br><span class="line">            border: <span class="number">1</span>px solid @pink;</span><br><span class="line">        &#125;</span><br><span class="line">        &amp;-msg&#123;</span><br><span class="line">            color: blue;</span><br><span class="line">       &#125;</span><br><span class="line">       &amp; &gt; &amp; &#123;</span><br><span class="line">            font-size: <span class="number">50</span>px;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、继承"><a href="#4、继承" class="headerlink" title="4、继承"></a>4、继承</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  单继承与多继承</span></span><br><span class="line"><span class="selector-class">.baseClass</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#f00</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.baseClass2</span> &#123;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">500</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//  方式一，多重继承的，用逗号隔开就行了</span></span><br><span class="line"><span class="selector-class">.myClass</span>:extend(.baseClass, .baseClass2) &#123;</span><br><span class="line">    // .myClass类拥有的属性</span><br><span class="line">    background-color: yellow;</span><br><span class="line">    <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//  方式二，多重继承的，用逗号隔开就行了</span></span><br><span class="line"><span class="selector-class">.myClass2</span> &#123;</span><br><span class="line">    <span class="comment">// &amp;代表当前.myClass2这个类</span></span><br><span class="line">    &amp;:extend(.baseClass, .baseClass2);</span><br><span class="line">    <span class="comment">// .myClass2类拥有的属性</span></span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  less不支持继承泛型的子类</span></span><br><span class="line">*<span class="selector-class">.button</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//  less要继承就继承泛型，比如*.button，不支持继承div.button，特别注意下</span></span><br><span class="line"><span class="selector-class">.myClass</span> &#123;</span><br><span class="line">    <span class="comment">// &amp;:extend(div.button);   // 这样写是会有问题的，继承不过来</span></span><br><span class="line">    &amp;:extend(*.button);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  less不支持多匹配相似度继承</span></span><br><span class="line"><span class="selector-attr">[name=xx]</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-attr">[name="xx"]</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid green;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-attr">[name='xx']</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.myClass</span> &#123;</span><br><span class="line">    &amp;:extend([name=<span class="string">"xx"</span>]);   <span class="comment">// 这样写不太好，它会把每个相似的都继承过来，稍微注意下</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  在实现less深度继承的时候外层结构顶级随意，里层对应的.className必须保持一致，深度继承语法为.myClass&#123;&amp;:extend(.className)&#125;;，当如果不写all参数的时候只会继承最顶层的样式，如果写成.myClass&#123;&amp;:extend(.className all)&#125;;则把子类也一起继承过来了</span></span><br><span class="line"><span class="selector-class">.base</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#f00</span>;</span><br><span class="line">    <span class="selector-class">.base2</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.myClass</span> &#123;</span><br><span class="line">    <span class="comment">// &amp;:extend(.base);</span></span><br><span class="line">    &amp;:extend(.base all);</span><br><span class="line">    <span class="attribute">text-decoration</span>: line-through;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  媒体查询与继承：</span></span><br><span class="line"><span class="comment">//  1.在相同的的媒体查询范围内嵌套和继承都是没问题的</span></span><br><span class="line"><span class="comment">//  2.在媒体查询外部的css代码的类或标签的选择器是可以继承媒体查询内部的，而且继承的时候是可以继承所有匹配相同的选择器的</span></span><br><span class="line"><span class="keyword">@media</span> screen &#123;</span><br><span class="line">    <span class="selector-tag">h1</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">50px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">@media</span> (min-width: <span class="number">500px</span>) &#123;</span><br><span class="line">        <span class="selector-tag">h2</span> &#123;</span><br><span class="line">            <span class="attribute">color</span>: <span class="number">#f00</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">@media</span> (max-width: <span class="number">1500px</span>) &#123;</span><br><span class="line">            <span class="selector-tag">h1</span> &#123;</span><br><span class="line">                <span class="attribute">font-family</span>: <span class="string">"SimSun"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="selector-tag">strong</span> &#123;</span><br><span class="line">                <span class="attribute">font-weight</span>: normal;</span><br><span class="line">                <span class="attribute">font-style</span>: normal;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="selector-class">.myClass</span> &#123;</span><br><span class="line">                <span class="comment">// 只能继承媒体查询内部同级标签，比如strong</span></span><br><span class="line">                &amp;:extend(strong);</span><br><span class="line">                <span class="comment">// 继承不了不是媒体查询内部同级标签h1，h2</span></span><br><span class="line">                <span class="comment">// &amp;:extend(strong, h2, h1);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//  在媒体查询外部的css代码的类或标签的选择器是可以继承媒体查询内部的，而且继承的时候是可以继承所有匹配相同的选择器的</span></span><br><span class="line"><span class="selector-class">.testClass</span>:extend(h1) &#123;</span><br><span class="line">    background-color: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5、函数"><a href="#5、函数" class="headerlink" title="5、函数"></a>5、函数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  less本身自带有很多内置函数，我就不一一介绍，有兴趣的可以看看官网的API，在这里我主要想说一下mixin</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  如果mixin函数传入的形势参数都设置了默认值，那么我们在调用less函数的时候直接调用就行了，可以不用传入任何参数。如果less函数传了第一个参数，第二个没有传，可以指定形参名称绕过第一个参数来</span></span><br><span class="line"><span class="comment">//  参数后面加...，表示在调用less函数的时候可以传入无数个实际参数</span></span><br><span class="line">@color: #000;</span><br><span class="line">@font-size: <span class="number">80</span>px;</span><br><span class="line">.myClass (@color, @font-size...) &#123;</span><br><span class="line">    color: @color;</span><br><span class="line">    font-size: @font-size;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用less函数，注意调用的时候一定要在某个选择器里面去调用less函数</span></span><br><span class="line">h1 &#123;</span><br><span class="line">    .myClass (@font-size: @font-size, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//mixin内置两个特殊的对象 @arguments 和 @reset 。@arguments代表mixin的所有入参,而@reset代表mixin的...入参数组。</span></span><br><span class="line">.xx-border (...) &#123;</span><br><span class="line">    border: @<span class="built_in">arguments</span>;</span><br><span class="line">&#125;</span><br><span class="line">.xx-test(@type;@rest...)&#123;</span><br><span class="line">　　height: @type * <span class="number">12</span>px;</span><br><span class="line">　　border: @rest;</span><br><span class="line">&#125;</span><br><span class="line">.myClass &#123;</span><br><span class="line">    .xx-border (<span class="number">100</span>px, solid, pink);</span><br><span class="line">    .xx-test(<span class="number">2</span>;<span class="number">1</span>px;solid;red);    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  mixin函数的形势参数可以使用逗号和分号隔开，个人习惯问题，无所谓！</span></span><br><span class="line">.xx-test (@width: <span class="number">1</span>px, @type, @color: red) &#123;</span><br><span class="line">    border: @<span class="built_in">arguments</span>;</span><br><span class="line">&#125;</span><br><span class="line">.myClass &#123;</span><br><span class="line">    .xx-test (@type: solid);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  mixin的重载可定义多个同名mixin，调用时只要参数数量匹配则会执行相应的mixin。</span></span><br><span class="line">.base (@font-size) &#123;</span><br><span class="line">    font-size: @font-size;</span><br><span class="line">&#125;</span><br><span class="line">.base (@font-weight, @color) &#123;</span><br><span class="line">    font-weight: @font-weight;</span><br><span class="line">    color: @color;</span><br><span class="line">&#125;</span><br><span class="line">.base (@border...) &#123;</span><br><span class="line">    border: @<span class="built_in">arguments</span>;</span><br><span class="line">&#125;</span><br><span class="line">.test-Class &#123;</span><br><span class="line">    .base(<span class="number">20</span>px);</span><br><span class="line">    .base(bold, black);</span><br><span class="line">    .base (<span class="number">1</span>px, solid, red);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  mixin支持标签参数的模式匹配</span></span><br><span class="line">.common (aaa; @type; @color) &#123;</span><br><span class="line">    border: <span class="number">1</span>px @type; @color;</span><br><span class="line">&#125;</span><br><span class="line">.common (bbb; @type; @color) &#123;</span><br><span class="line">    border: <span class="number">1</span>px solid blue;</span><br><span class="line">&#125;</span><br><span class="line">.common (@type; @color) &#123;</span><br><span class="line">    border: <span class="number">1</span>px @type; @color;</span><br><span class="line">&#125;</span><br><span class="line">.myClass &#123;</span><br><span class="line">    .common (aaa, solid, red);</span><br><span class="line">    .common (bbb, solid, blue);</span><br><span class="line">    .common (solid, green);</span><br><span class="line">    .common (bbb, solid);   <span class="comment">//  这里虽然使用了标签，但参数不够，会把标签当成是一个值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  less函数命名空间</span></span><br><span class="line">.nameSpace &#123;</span><br><span class="line">    .package &#123;</span><br><span class="line">        .a () &#123;</span><br><span class="line">            a: a;</span><br><span class="line">        &#125;</span><br><span class="line">        .b () &#123;</span><br><span class="line">            b: b;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">.myClass &#123;</span><br><span class="line">    .nameSpace.package.a();</span><br><span class="line">    .nameSpace.package.b();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  作为结构体内部的变量是不会被外部访问到的，先拆包，调用就有反应</span></span><br><span class="line"><span class="comment">//  规则体变量访问不到会报错 start</span></span><br><span class="line">@color: blue;</span><br><span class="line">@struct : &#123;</span><br><span class="line">    font-size: <span class="number">20</span>px; </span><br><span class="line">    @color: #f00;</span><br><span class="line">    &amp; &gt; .book &#123;</span><br><span class="line">        margin: <span class="number">10</span>px;</span><br><span class="line">    &#125;</span><br><span class="line">    .name () &#123;</span><br><span class="line">        border: <span class="number">1</span>px solid red;</span><br><span class="line">        color: @color;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;;</span><br><span class="line">.myClass &#123;</span><br><span class="line">    <span class="comment">//  如果使用了规则体，内部的子函数只能够通过拆包的方式拿到，不能使用命名空间的方式去拿</span></span><br><span class="line">    <span class="comment">//  使用的@color是距离less子函数就接近的那个颜色值</span></span><br><span class="line">    @struct();</span><br><span class="line">    .name();  </span><br><span class="line">    @color: green;  <span class="comment">// 作为结构体内部的变量是不会被外部访问到的</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  = ---&gt; javascript的==，不是赋值，逗号表示或的意思</span></span><br><span class="line"><span class="comment">//  default函数用于条件控制当中，充当else或switch语句中default的角色。</span></span><br><span class="line"><span class="comment">//  .func (@size) when (@size &gt; 20pt) and (@size &lt; 40pt) , (true) &#123;</span></span><br><span class="line">.func (@size) when (@size &gt; <span class="number">20</span>pt) and (@size &lt; <span class="number">40</span>pt) &#123;</span><br><span class="line">    .red when (@size = <span class="number">30</span>pt) &#123;</span><br><span class="line">        font-size: @size;</span><br><span class="line">        color: #f00;</span><br><span class="line">    &#125;</span><br><span class="line">    .blue &#123;</span><br><span class="line">        font-size: @size;</span><br><span class="line">        color: blue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//  加了when (default())之后这个函数需要前者条件不符合的情况下才会执行 </span></span><br><span class="line">.func (@size) when (<span class="keyword">default</span>()) &#123;</span><br><span class="line">    .yellow &#123;</span><br><span class="line">        font-size: @size;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">.selector &#123;</span><br><span class="line">    .func (<span class="number">35</span>pt);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//  mixin函数的递归不能够对选择器做递归循环，只有使用到了的变量才会发生变化，执行循环多次</span><br><span class="line">.generate-columns(@n, @i: 1) when (@i =<span class="tag">&lt; @<span class="attr">n</span>) &#123;</span></span><br><span class="line"><span class="tag">　<span class="attr">.column-</span>@&#123;<span class="attr">i</span>&#125; &#123;</span></span><br><span class="line"><span class="tag">　　　<span class="attr">width:</span> (@<span class="attr">i</span> * <span class="attr">100</span>% / @<span class="attr">n</span>);</span></span><br><span class="line"><span class="tag">　&#125;</span></span><br><span class="line"><span class="tag">   <span class="attr">.generate-columns</span>(@<span class="attr">n</span>, (@<span class="attr">i</span> + <span class="attr">1</span>));</span></span><br><span class="line"><span class="tag">&#125;</span></span><br><span class="line"><span class="tag"><span class="attr">.generate-columns</span>(<span class="attr">4</span>);</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;less是预编译css语言，是css的超集。此文只是个人的一些总结归纳，仅供参考。如果想深入了解可以细看&lt;a href=&quot;http://less.bootcss.com/&quot; title=&quot;官网&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官网&lt;/a&gt;。&lt;
      
    
    </summary>
    
      <category term="less" scheme="https://liwenxin-jam.github.io/categories/less/"/>
    
    
      <category term="前端" scheme="https://liwenxin-jam.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>CSS画各种基本图形</title>
    <link href="https://liwenxin-jam.github.io/2019/02/05/CSS%E7%94%BB%E5%90%84%E7%A7%8D%E5%9F%BA%E6%9C%AC%E5%9B%BE%E5%BD%A2/"/>
    <id>https://liwenxin-jam.github.io/2019/02/05/CSS画各种基本图形/</id>
    <published>2019-02-05T08:55:21.000Z</published>
    <updated>2021-04-12T13:28:18.202Z</updated>
    
    <content type="html"><![CDATA[<p>此文主要是为了加深自己对CSS3的一些理解，在此主要列举一下一些多边形如何来画，以及如何调整。长方形和正方形大家都明白，这里就列举了。</p><h2 id="1、相关圆形"><a href="#1、相关圆形" class="headerlink" title="1、相关圆形"></a>1、相关圆形</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 单个实心圆，主要注意border-radius即可 --&gt;</span></span><br><span class="line">.single-round&#123;</span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 100px;</span><br><span class="line">    background-color: red;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"single-round"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 双圆，方式一分别画大小圆 --&gt;</span></span><br><span class="line">.round-box&#123;</span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 100px;</span><br><span class="line">    position: relative;</span><br><span class="line">&#125;</span><br><span class="line">.round-bigRound &#123;</span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 100px;</span><br><span class="line">    background:black;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">&#125;</span><br><span class="line">.round-smallRound&#123;</span><br><span class="line">    width: 80px;</span><br><span class="line">    height: 80px;</span><br><span class="line">    position:absolute;</span><br><span class="line">    left: 10px;</span><br><span class="line">    top: 10px;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">    background:#cc313d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"round-box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"round-bigRound"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"round-smallRound"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 双圆，方式二，只画一个圆利用box-shadow的inset属性内部阴影实现外边圆 --&gt;</span></span><br><span class="line">.round-boxshadow&#123;</span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 100px;</span><br><span class="line">    background:#cc313d;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">    box-shadow: inset 0 0 0 15px rgba(200,200,200, 0.6);</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"round-boxshadow"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 椭圆，水平半径和垂直半径分别是宽高的一半 --&gt;</span></span><br><span class="line">.ellipse&#123;</span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 50px;</span><br><span class="line">    background-color: #999;</span><br><span class="line">    text-align: center;</span><br><span class="line">    border-radius: 50px/25px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ellipse"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2、相关三角形"><a href="#2、相关三角形" class="headerlink" title="2、相关三角形"></a>2、相关三角形</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 向上三角形 --&gt;</span></span><br><span class="line">.triangle-up&#123;</span><br><span class="line">    width: 0px;</span><br><span class="line">    height: 0px;</span><br><span class="line">    border-left: 50px solid transparent;</span><br><span class="line">    border-right: 50px solid transparent;</span><br><span class="line">    border-bottom: 100px solid red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"triangle-up"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 向下三角形 --&gt;</span></span><br><span class="line">.triangle-down&#123;</span><br><span class="line">    width: 0px;</span><br><span class="line">    height: 0px;</span><br><span class="line">    border-top: 100px solid red;</span><br><span class="line">    border-left: 50px solid transparent;</span><br><span class="line">    border-right: 50px solid transparent;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"triangle-down"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 向左三角形 --&gt;</span></span><br><span class="line">.triangle-left&#123;</span><br><span class="line">    width: 0px;</span><br><span class="line">    height: 0px;</span><br><span class="line">    border-top: 50px solid transparent;</span><br><span class="line">    border-left: 100px solid red;</span><br><span class="line">    border-bottom: 50px solid transparent;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"triangle-left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 向右三角形 --&gt;</span></span><br><span class="line">.triangle-right&#123;</span><br><span class="line">    width: 0px;</span><br><span class="line">    height: 0px;</span><br><span class="line">    border-top: 50px solid transparent;</span><br><span class="line">    border-right: 100px solid red;</span><br><span class="line">    border-bottom: 50px solid transparent;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"triangle-right"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 左上角三角形，常见置顶标志 --&gt;</span></span><br><span class="line">.triangle-topleft&#123;</span><br><span class="line">    width: 0px;</span><br><span class="line">    height: 0px;</span><br><span class="line">    border-top: 100px solid red;</span><br><span class="line">    border-right: 100px solid transparent;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"triangle-topleft"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 右上角三角形 --&gt;</span></span><br><span class="line">.triangle-topright &#123;</span><br><span class="line">    width: 0px;</span><br><span class="line">    height: 0px;</span><br><span class="line">    border-top: 100 solid red;</span><br><span class="line">    border-left: 100 solid transparent;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"triangle-topright"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 左底角三角形 --&gt;</span></span><br><span class="line">.triangle-bottomleft  &#123;</span><br><span class="line">    width: 0px;</span><br><span class="line">    height: 0px;</span><br><span class="line">    border-bottom: 100px solid red;</span><br><span class="line">    border-right: 100px solid transparent;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"triangle-bottomleft"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 右底角三角形 --&gt;</span></span><br><span class="line">.triangle-bottomright   &#123;</span><br><span class="line">    width: 0px;</span><br><span class="line">    height: 0px;</span><br><span class="line">    border-bottom: 100px solid red;</span><br><span class="line">    border-left: 100px solid transparent;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"triangle-bottomright"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 提示对话框 --&gt;</span></span><br><span class="line">.talkbubble&#123;</span><br><span class="line">    width: 200px;</span><br><span class="line">    height: 100px;</span><br><span class="line">    background-color: red;</span><br><span class="line">    position: relative;</span><br><span class="line">    left: 100px;</span><br><span class="line">    border-radius: 10px;</span><br><span class="line">    padding: 5px 10px;</span><br><span class="line">&#125;</span><br><span class="line">.talkbubble:before&#123;</span><br><span class="line">    width: 0;</span><br><span class="line">    height: 0;</span><br><span class="line">    right: 100%;</span><br><span class="line">    top: 30px;</span><br><span class="line">    position: absolute;</span><br><span class="line">    content: "";</span><br><span class="line">    border-top: 15px solid transparent;</span><br><span class="line">    border-right: 30px solid red;</span><br><span class="line">    border-bottom: 15px solid transparent;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"talkbubble"</span>&gt;</span></span><br><span class="line">    测试文本测试文本测试文本测试文本测试文本</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3、相关多边形"><a href="#3、相关多边形" class="headerlink" title="3、相关多边形"></a>3、相关多边形</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 平行四边形，利用transform：skew 向x轴偏移 --&gt;</span></span><br><span class="line">.parallelogram &#123;</span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 50px;</span><br><span class="line">    margin-left: 30px;</span><br><span class="line">    transform: skew(-30deg);</span><br><span class="line">    background-color: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parallelogram"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 梯形，类似各个朝向的三角形，只是把中间宽度撑开 --&gt;</span></span><br><span class="line">.trapezoid &#123;</span><br><span class="line">    border-bottom: 100px solid red;</span><br><span class="line">    border-left: 50px solid transparent;</span><br><span class="line">    border-right: 50px solid transparent;</span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 0px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"trapezoid"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 五角星 --&gt;</span></span><br><span class="line">.star-five &#123;</span><br><span class="line">    width: 0;</span><br><span class="line">    height: 0;</span><br><span class="line">    color: red;</span><br><span class="line">    margin: 50px;</span><br><span class="line">    position: relative;</span><br><span class="line">    display: block;</span><br><span class="line">    border-left: 50px solid transparent;</span><br><span class="line">    border-right: 50px solid transparent;</span><br><span class="line">    border-bottom: 35px solid red;</span><br><span class="line">    transform:rotate(35deg);</span><br><span class="line">&#125;</span><br><span class="line">.star-five:before &#123;</span><br><span class="line">    width: 0;</span><br><span class="line">    height: 0;</span><br><span class="line">    border-left: 15px solid transparent;</span><br><span class="line">    border-right: 15px solid transparent;</span><br><span class="line">    border-bottom: 40px solid red;</span><br><span class="line">    position: absolute;</span><br><span class="line">    top: -25px;</span><br><span class="line">    left: -35px;</span><br><span class="line">    color: white;</span><br><span class="line">    display: block;</span><br><span class="line">    content: "";</span><br><span class="line">    transform:rotate(-35deg);</span><br><span class="line">&#125;</span><br><span class="line">.star-five:after &#123;</span><br><span class="line">    width: 0;</span><br><span class="line">    height: 0;</span><br><span class="line">    display: block;</span><br><span class="line">    position: absolute;</span><br><span class="line">    color: red;</span><br><span class="line">    top: 3px;</span><br><span class="line">    left: -55px;</span><br><span class="line">    border-left: 50px solid transparent;</span><br><span class="line">    border-right: 50px solid transparent;</span><br><span class="line">    border-bottom: 35px solid red;</span><br><span class="line">    content: "";</span><br><span class="line">    transform:rotate(-70deg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"star-five"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 五边形 --&gt;</span></span><br><span class="line">.pentagon &#123;</span><br><span class="line">    width: 54px;</span><br><span class="line">    position: relative;</span><br><span class="line">    border-width: 50px 18px 0;</span><br><span class="line">    border-style: solid;</span><br><span class="line">    border-color: red transparent;</span><br><span class="line">    margin: 50px;</span><br><span class="line">&#125;</span><br><span class="line">.pentagon:before &#123;</span><br><span class="line">    content: "";</span><br><span class="line">    position: absolute;</span><br><span class="line">    width: 0;</span><br><span class="line">    height: 0;</span><br><span class="line">    top: -85px;</span><br><span class="line">    left: -18px;</span><br><span class="line">    border-width: 0 45px 35px;</span><br><span class="line">    border-style: solid;</span><br><span class="line">    border-color: transparent transparent red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pentagon"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 六边形 --&gt;</span></span><br><span class="line">.hexagon &#123;</span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 55px;</span><br><span class="line">    background-color: red;</span><br><span class="line">    position: relative;</span><br><span class="line">    margin: 50px;</span><br><span class="line">&#125;</span><br><span class="line">.hexagon:before &#123;</span><br><span class="line">    content: "";</span><br><span class="line">    position: absolute;</span><br><span class="line">    top: -25px;</span><br><span class="line">    left: 0;</span><br><span class="line">    width: 0;</span><br><span class="line">    height: ;</span><br><span class="line">    border-left: 50px solid transparent;</span><br><span class="line">    border-right: 50px solid transparent;</span><br><span class="line">    border-bottom: 25px solid red;</span><br><span class="line">&#125;</span><br><span class="line">.hexagon:after &#123;</span><br><span class="line">    content: "";</span><br><span class="line">    left: 0;</span><br><span class="line">    width: 0;</span><br><span class="line">    height: 0;</span><br><span class="line">    bottom: -25px;</span><br><span class="line">    position: absolute;</span><br><span class="line">    border-left: 50px solid transparent;</span><br><span class="line">    border-right: 50px solid transparent;</span><br><span class="line">    border-top: 25px solid red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hexagon"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;此文主要是为了加深自己对CSS3的一些理解，在此主要列举一下一些多边形如何来画，以及如何调整。长方形和正方形大家都明白，这里就列举了。&lt;/p&gt;
&lt;h2 id=&quot;1、相关圆形&quot;&gt;&lt;a href=&quot;#1、相关圆形&quot; class=&quot;headerlink&quot; title=&quot;1、相关圆
      
    
    </summary>
    
      <category term="css" scheme="https://liwenxin-jam.github.io/categories/css/"/>
    
    
      <category term="前端" scheme="https://liwenxin-jam.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>webpack小结</title>
    <link href="https://liwenxin-jam.github.io/2019/01/05/webpack%E5%B0%8F%E7%BB%93/"/>
    <id>https://liwenxin-jam.github.io/2019/01/05/webpack小结/</id>
    <published>2019-01-05T03:25:11.000Z</published>
    <updated>2021-04-12T13:28:18.212Z</updated>
    
    <content type="html"><![CDATA[<p>此文主要是为了举例 webpack 的一些简单使用说明，它是基于 nodejs 环境。如果想更深入了解可以看<a href="https://doc.webpack-china.org/" title="webpack中文网站" target="_blank" rel="noopener">webpack 中文网站</a></p><h2 id="1、初始化"><a href="#1、初始化" class="headerlink" title="1、初始化"></a>1、初始化</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  以下命令都是在终端下执行</span></span><br><span class="line">npm install webpack -g  <span class="comment">//  全局安装webpack环境</span></span><br><span class="line">webpack --version   <span class="comment">//  查看是否有安装</span></span><br><span class="line">npm init -y   <span class="comment">//  初始化项目文件夹，增加package.json文件</span></span><br><span class="line">npm install webpack -D  <span class="comment">//  局部安装， -D等价于 --save-dev</span></span><br></pre></td></tr></table></figure><h2 id="2、编写入口文件-entry-js"><a href="#2、编写入口文件-entry-js" class="headerlink" title="2、编写入口文件 entry.js"></a>2、编写入口文件 entry.js</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在项目根目录下分别新增index.html和entry.js --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"bundle.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  entry.js</span></span><br><span class="line"><span class="keyword">let</span> oApp = <span class="built_in">document</span>.getElementById(<span class="string">'app'</span>);</span><br><span class="line">oApp.innerHTML = <span class="string">'&lt;h3&gt;welcome Webpack&lt;/h3&gt;'</span>;</span><br><span class="line"><span class="comment">//  终端下执行</span></span><br><span class="line">webpack entry.js bundle.js</span><br></pre></td></tr></table></figure><h2 id="3、loader-加载器"><a href="#3、loader-加载器" class="headerlink" title="3、loader 加载器"></a>3、loader 加载器</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  webpack默认只支持javascript文件，其它文件需要用加载器(loader)</span></span><br><span class="line"><span class="comment">//  loader类似一种转化器， 它可以把一个东西，转成另一个</span></span><br><span class="line"><span class="comment">//  没有转化的情况下会提示 You may need an appropriate loader to handle this file type.</span></span><br><span class="line"><span class="comment">//  例如css文件: style-loader 和 css-loader</span></span><br><span class="line">npm install style-loader css-loader -D  <span class="comment">//  安装loader依赖包</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  entry.js文件内容</span></span><br><span class="line"><span class="keyword">let</span> oApp = <span class="built_in">document</span>.getElementById(<span class="string">'app'</span>);</span><br><span class="line"><span class="comment">//  注意: 在webpack中，多个loader加载用！隔开， 引入文件需要带上后缀，如果有配置resolve，可以省略后缀，例如./style</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">'style-loader!css-loader!./style.css'</span>);  <span class="comment">// webpack1.0可以省略-loader, 2.0不允许</span></span><br><span class="line">oApp.innerHTML = <span class="string">'&lt;h3&gt;welcome Webpack&lt;/h3&gt;'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  根目录下新增style.css文件</span></span><br><span class="line">body&#123;</span><br><span class="line">    background:#399;</span><br><span class="line">    color: #fff;</span><br><span class="line">    font-size: <span class="number">40</span>px;</span><br><span class="line">    text-shadow: 2px 2px 5px #000;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  终端下执行</span></span><br><span class="line">webpack entry.js bundle.js</span><br></pre></td></tr></table></figure><h2 id="4、配置-webpack-config-js-文件"><a href="#4、配置-webpack-config-js-文件" class="headerlink" title="4、配置 webpack.config.js 文件"></a>4、配置 webpack.config.js 文件</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  根目录下新增webpack.config.js</span></span><br><span class="line"><span class="comment">//  如果就不用webpack.config.js,自己定义名字config.js</span></span><br><span class="line"><span class="comment">//  终端运行需要指定文件:  webpack --config config.js</span></span><br><span class="line"><span class="comment">//  webpack.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./entry.js'</span>, <span class="comment">// 入口文件</span></span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'bundle.js'</span>, <span class="comment">// 出口</span></span><br><span class="line">  &#125;,</span><br><span class="line">  devtool: <span class="string">'source-map'</span>, <span class="comment">// 直接生成source-map，作用跟webpack -d一样</span></span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    loaders: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        loader: <span class="string">'style-loader!css-loader'</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    <span class="comment">//  "extensions": ['', '.js', '.css', '.json', '.jsx']  //  可以省略后缀名，注意这是webpack1.0</span></span><br><span class="line">    extensions: [<span class="string">'.js'</span>, <span class="string">'.css'</span>, <span class="string">'.json'</span>, <span class="string">'.jsx'</span>], <span class="comment">//  注意这是webpack2.0，不允许加上'',</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  entry.js</span></span><br><span class="line"><span class="keyword">let</span> oApp = <span class="built_in">document</span>.getElementById(<span class="string">'app'</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">'./style.css'</span>);</span><br><span class="line">oApp.innerHTML = <span class="string">'&lt;h3&gt;welcome Webpack&lt;/h3&gt;'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  终端下执行查看效果，这里因为配置出入口文件名，可以省略</span></span><br><span class="line">webpack;</span><br><span class="line"><span class="comment">//  注意以下命令模式的区别</span></span><br><span class="line">webpack; <span class="comment">// 开发环境下编译(打包)</span></span><br><span class="line">webpack - p; <span class="comment">// 生产环境下编译(压缩)</span></span><br><span class="line">webpack - w; <span class="comment">// 监听文件改动,自动编译(速度快)</span></span><br><span class="line">webpack - d; <span class="comment">// 开启(生成)source maps(用来调试)</span></span><br><span class="line">webpack - wpd; <span class="comment">// 同时开启多个模式</span></span><br></pre></td></tr></table></figure><h2 id="5、babel-使用转化-ES6-语法"><a href="#5、babel-使用转化-ES6-语法" class="headerlink" title="5、babel 使用转化 ES6 语法"></a>5、babel 使用转化 ES6 语法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  安装相关依赖</span></span><br><span class="line">npm install babel-loader babel-core babel-preset-es2015 -D</span><br><span class="line"><span class="comment">//  导出模块: export default &#123;&#125;</span></span><br><span class="line"><span class="comment">//  引入模块: import 名字 from 模块名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  项目根目录新增module.js</span></span><br><span class="line"><span class="comment">//  module.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">    b: <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  entry.js</span></span><br><span class="line"><span class="keyword">import</span> modB <span class="keyword">from</span> <span class="string">'./module'</span></span><br><span class="line"><span class="keyword">let</span> oApp = <span class="built_in">document</span>.getElementById(<span class="string">'app'</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">'./style.css'</span>);</span><br><span class="line">oApp.innerHTML = <span class="string">'&lt;h3&gt;welcome Webpack&lt;/h3&gt;'</span> + (modB.a + modB.b);</span><br><span class="line"></span><br><span class="line"><span class="comment">//  webpack.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: <span class="string">'./entry.js'</span>, <span class="comment">// 入口文件</span></span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: <span class="string">'bundle.js'</span> <span class="comment">//  出口</span></span><br><span class="line">    &#125;,</span><br><span class="line">    devtool: <span class="string">'source-map'</span>, <span class="comment">// 直接生成srouce-map</span></span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        loaders: [&#123;</span><br><span class="line">            test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">            loader: <span class="string">'style-loader!css-loader'</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">            loader: <span class="string">'babel-loader'</span>,      <span class="comment">// webpack2.0不能省略-loader</span></span><br><span class="line">            exclude: <span class="regexp">/node_modules/</span>, <span class="comment">//排除那些目录</span></span><br><span class="line">            options: &#123;     <span class="comment">// webpack2.0写法</span></span><br><span class="line">                <span class="string">'presets'</span>: [<span class="string">'es2015'</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// babel: &#123;    //webpack1.0写法</span></span><br><span class="line">    <span class="comment">//  "presets": ['es2015']</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//  配置babel预设，可以直接在webpack.config.js配置，也可以新增.babelrc文件配置</span></span><br><span class="line">touch .babelrc   <span class="comment">// 在项目根目录新增一个.babelrc文件</span></span><br><span class="line"><span class="comment">//  .babelrc文件内容</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"presets"</span>:[<span class="string">'es2015'</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//  终端下执行webpack查看效果</span></span><br><span class="line">webpack</span><br></pre></td></tr></table></figure><h2 id="6、webpack-dev-server-热加载服务"><a href="#6、webpack-dev-server-热加载服务" class="headerlink" title="6、webpack-dev-server 热加载服务"></a>6、webpack-dev-server 热加载服务</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  安装热加载服务依赖</span></span><br><span class="line">npm install webpack-dev-server -g</span><br><span class="line"><span class="comment">//  第一种方式开启服务，注意参数</span></span><br><span class="line">webpack-dev-server --port <span class="number">8088</span>  端口号</span><br><span class="line">webpack-dev-server --inline 改变完代码以后，自动刷新浏览器</span><br><span class="line">webpack-dev-server --hot    热重载(局部更改)</span><br><span class="line"><span class="comment">//  终端下执行</span></span><br><span class="line">webpack-dev-server --inline --port <span class="number">8088</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  第二种方式，修改webpack.config.js配置文件</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: <span class="string">'./entry.js'</span>, <span class="comment">// 入口文件</span></span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: <span class="string">'bundle.js'</span> <span class="comment">//  出口</span></span><br><span class="line">    &#125;,</span><br><span class="line">    devtool: <span class="string">'source-map'</span>, <span class="comment">// 直接生成srouce-map</span></span><br><span class="line">    devServer: &#123;</span><br><span class="line">        port: <span class="number">8088</span>,</span><br><span class="line">        inline: <span class="literal">true</span> <span class="comment">// 注意：不写hot: true，否则浏览器无法自动更新；也不要写colors:true，progress:true等，webpack2.x已不支持这些</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        loaders: [&#123;</span><br><span class="line">            test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">            loader: <span class="string">'style-loader!css-loader'</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">            loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">            exclude: <span class="regexp">/node_modules/</span> <span class="comment">//  排除那些目录</span></span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//  终端下执行</span></span><br><span class="line">webpack-dev-server</span><br><span class="line"></span><br><span class="line"><span class="comment">//  第三种方式，修改package.json配置文件</span></span><br><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"dev"</span>: <span class="string">"webpack-dev-server --inline  --port 8088"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//  终端下执行</span></span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure><h2 id="7、react-配置"><a href="#7、react-配置" class="headerlink" title="7、react 配置"></a>7、react 配置</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  安装react预设和热加载</span></span><br><span class="line">npm install babel-preset-react react-hot-loader -D</span><br><span class="line"><span class="comment">//  安装react环境</span></span><br><span class="line">npm install react react-dom -D</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  </span></span><br><span class="line"><span class="comment">新增list.js作为一个组件</span></span><br><span class="line"><span class="comment">list.js </span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">import React from 'react' class List extends React.Component &#123; render() &#123; return</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>我是React-List组件<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#125; &#125; export &#123; List as default &#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//&lt;!-- .babelrc --&gt;</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"presets"</span>:[[<span class="string">'es2015'</span>],[<span class="string">'react'</span>]]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//webpack.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: <span class="string">'./entry.js'</span>, <span class="comment">//入口文件</span></span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: <span class="string">'bundle.js'</span> <span class="comment">//出口</span></span><br><span class="line">    &#125;,</span><br><span class="line">    devtool: <span class="string">'source-map'</span>, <span class="comment">//直接生成srouce-map</span></span><br><span class="line">    devServer: &#123;</span><br><span class="line">        port: <span class="number">8088</span>,</span><br><span class="line">        inline: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        loaders: [&#123;</span><br><span class="line">            test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">            loader: <span class="string">'style-loader!css-loader'</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">            loader: <span class="string">'react-hot-loader!babel-loader'</span>,   <span class="comment">// 注意react-hot-loader需要用旧版本1.3.0才可以</span></span><br><span class="line">            exclude: <span class="regexp">/node_modules/</span> <span class="comment">//  排除那些目录</span></span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;,</span><br><span class="line">    resolve: &#123;</span><br><span class="line">        <span class="string">"extensions"</span>: [<span class="string">'.js'</span>, <span class="string">'.css'</span>, <span class="string">'.json'</span>, <span class="string">'.jsx'</span>] <span class="comment">// 可以省略后缀名</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;此文主要是为了举例 webpack 的一些简单使用说明，它是基于 nodejs 环境。如果想更深入了解可以看&lt;a href=&quot;https://doc.webpack-china.org/&quot; title=&quot;webpack中文网站&quot; target=&quot;_blank&quot; rel=&quot;n
      
    
    </summary>
    
      <category term="webpack" scheme="https://liwenxin-jam.github.io/categories/webpack/"/>
    
    
      <category term="工具" scheme="https://liwenxin-jam.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>nodejs相关包使用小结</title>
    <link href="https://liwenxin-jam.github.io/2018/12/31/nodejs%E7%9B%B8%E5%85%B3%E5%8C%85%E4%BD%BF%E7%94%A8%E5%B0%8F%E7%BB%93/"/>
    <id>https://liwenxin-jam.github.io/2018/12/31/nodejs相关包使用小结/</id>
    <published>2018-12-31T03:09:57.000Z</published>
    <updated>2021-04-12T13:28:18.210Z</updated>
    
    <content type="html"><![CDATA[<p>此文主要是为了举例 nodejs 的一些相关包用法总结，没有 nodejs 环境可以先到<a href="https://nodejs.org/en/" title="官网" target="_blank" rel="noopener">官网</a>下载安装。nodejs 实质就是写 js 文件，根据一些包快速开发。这里只是列举其中一小部用法，详细的还需要各位去看看官网的 API，这里只是提供给大家做个了解。</p><h2 id="1、http-模块"><a href="#1、http-模块" class="headerlink" title="1、http 模块"></a>1、http 模块</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  http模块可以创建服务器应用实例，也能发送http请求</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="comment">//  request请求  respone响应</span></span><br><span class="line"><span class="keyword">var</span> server = http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// console.log(req.url);</span></span><br><span class="line">  <span class="keyword">switch</span> (req.url) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'/1.html'</span>:</span><br><span class="line">      <span class="comment">// statements_1</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="comment">// statements_def</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  res.write(<span class="string">'abc'</span>); <span class="comment">//  反馈内容</span></span><br><span class="line">  res.end(); <span class="comment">// 请求结束</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//  监听--端口--数字</span></span><br><span class="line">server.listen(<span class="number">8081</span>);</span><br></pre></td></tr></table></figure><h2 id="2、fs-模块"><a href="#2、fs-模块" class="headerlink" title="2、fs 模块"></a>2、fs 模块</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fs模块用于对系统文件及目录进行读写操作</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//  readFile(文件名，回调函数)  读文件</span></span><br><span class="line">fs.readFile(<span class="string">'./data/a.txt'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'读取失败'</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data.toString());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//  writeFile(文件名，内容，回调函数)  写文件</span></span><br><span class="line">fs.writeFile(<span class="string">'./data/b.txt'</span>, <span class="string">'asfasfd2123asdafsd'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="3、querystring-模块"><a href="#3、querystring-模块" class="headerlink" title="3、querystring 模块"></a>3、querystring 模块</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">querystring从字面上的意思就是查询字符串,一般是对http请求所带的数据进行解析</span></span><br><span class="line"><span class="comment">form.html  get请求 </span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"http://localhost:8081"</span> <span class="attr">method</span>=<span class="string">"get"</span>&gt;</span></span><br><span class="line">    用户：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">""</span> /&gt;</span> <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"pass"</span> <span class="attr">value</span>=<span class="string">""</span> /&gt;</span> <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  server.js</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">const</span> querystring = <span class="built_in">require</span>(<span class="string">'querystring'</span>);</span><br><span class="line"></span><br><span class="line">http</span><br><span class="line">  .createServer(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//  req获取前台的数据</span></span><br><span class="line">    <span class="built_in">console</span>.log(req.url);</span><br><span class="line">    <span class="keyword">var</span> GET = &#123;&#125;;</span><br><span class="line">    <span class="keyword">var</span> url = req.url;</span><br><span class="line">    <span class="keyword">if</span> (req.url.indexOf(<span class="string">'?'</span>) != <span class="number">-1</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> arr = req.url.split(<span class="string">'?'</span>);</span><br><span class="line">      url = arr[<span class="number">0</span>];</span><br><span class="line">      GET = querystring.parse(arr[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(url, GET);</span><br><span class="line"></span><br><span class="line">    res.write(<span class="string">'aaa'</span>);</span><br><span class="line">    res.end();</span><br><span class="line">  &#125;)</span><br><span class="line">  .listen(<span class="number">8081</span>);</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- form.html  post请求 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"http://localhost:8081"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    用户：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">""</span> /&gt;</span> <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"pass"</span> <span class="attr">value</span>=<span class="string">""</span> /&gt;</span> <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  server.js</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line">http</span><br><span class="line">  .createServer(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">''</span>; <span class="comment">//  接收数据</span></span><br><span class="line">    <span class="comment">//  data 有一段数据多次到达，当数据量大自动帮切段</span></span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line">    req.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`第<span class="subst">$&#123;i++&#125;</span>次收到数据`</span>);</span><br><span class="line">      str += data;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//  data 数据全部到达（一次）</span></span><br><span class="line">    req.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(str);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;)</span><br><span class="line">  .listen(<span class="number">8081</span>);</span><br></pre></td></tr></table></figure><h2 id="4、url-模块"><a href="#4、url-模块" class="headerlink" title="4、url 模块"></a>4、url 模块</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  用于URL解析、处理等操作</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">const</span> urlLib = <span class="built_in">require</span>(<span class="string">'url'</span>);</span><br><span class="line"></span><br><span class="line">http</span><br><span class="line">  .createServer(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//  req获取前台的数据</span></span><br><span class="line">    <span class="built_in">console</span>.log(req.url);</span><br><span class="line">    <span class="keyword">var</span> obj = urlLib.parse(req.url, <span class="literal">true</span>); <span class="comment">// 为true时将使用查询模块分析查询字符串，默认为false</span></span><br><span class="line">    <span class="keyword">var</span> url = obj.pathname;</span><br><span class="line">    <span class="keyword">var</span> GET = obj.query;</span><br><span class="line">    <span class="built_in">console</span>.log(url, GET);</span><br><span class="line"></span><br><span class="line">    res.write(<span class="string">'aaa'</span>);</span><br><span class="line">    res.end();</span><br><span class="line">  &#125;)</span><br><span class="line">  .listen(<span class="number">8081</span>);</span><br></pre></td></tr></table></figure><h2 id="5、express-模块"><a href="#5、express-模块" class="headerlink" title="5、express 模块"></a>5、express 模块</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> expressStatic = <span class="built_in">require</span>(<span class="string">'express-static'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> server = express();</span><br><span class="line"></span><br><span class="line">server.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'有get请求'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">server.post(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'有post请求'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">server.use(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'有use'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">server.use(<span class="string">'/a.html'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.send(<span class="string">'abc'</span>);</span><br><span class="line">  res.end();</span><br><span class="line">&#125;);</span><br><span class="line">server.use(<span class="string">'/b.html'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.send(<span class="string">'123'</span>);</span><br><span class="line">  res.end();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> users = &#123;</span><br><span class="line">  xx: <span class="string">'123456'</span>,</span><br><span class="line">  cc: <span class="string">'789012'</span>,</span><br><span class="line">&#125;;</span><br><span class="line">server.listen(<span class="number">8081</span>);</span><br><span class="line"></span><br><span class="line">server.get(<span class="string">'/login'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// var user = req.query;</span></span><br><span class="line">  <span class="keyword">var</span> user = req.query[<span class="string">'user'</span>];</span><br><span class="line">  <span class="keyword">var</span> pass = req.query[<span class="string">'pass'</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (users[user] == <span class="literal">null</span>) &#123;</span><br><span class="line">    res.send(&#123; <span class="attr">ok</span>: <span class="literal">false</span>, <span class="attr">msg</span>: <span class="string">'此用户不存在'</span> &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (users[user] != pass) &#123;</span><br><span class="line">      res.send(&#123; <span class="attr">ok</span>: <span class="literal">false</span>, <span class="attr">msg</span>: <span class="string">'密码错误'</span> &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      res.send(&#123; <span class="attr">ok</span>: <span class="literal">true</span>, <span class="attr">msg</span>: <span class="string">'成功'</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">server.use(expressStatic(<span class="string">'./www'</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//  express_router路由</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> server = express();</span><br><span class="line"></span><br><span class="line"><span class="comment">//目录  /user/</span></span><br><span class="line"><span class="keyword">var</span> routerUser = express.Router();</span><br><span class="line">routerUser.get(<span class="string">'/1.html'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.send(<span class="string">'user111'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">routerUser.get(<span class="string">'/2.html'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.send(<span class="string">'user222'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">server.use(<span class="string">'/user'</span>, routerUser);</span><br><span class="line"></span><br><span class="line"><span class="comment">//  目录2 /article/</span></span><br><span class="line"><span class="keyword">var</span> articleRouter = express.Router();</span><br><span class="line">articleRouter.get(<span class="string">'/1001.html'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.send(<span class="string">'adfasdfasdfaf'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">server.use(<span class="string">'/article'</span>, articleRouter);</span><br><span class="line"></span><br><span class="line">server.listen(<span class="number">8081</span>);</span><br></pre></td></tr></table></figure><h2 id="6、body-parser-模块"><a href="#6、body-parser-模块" class="headerlink" title="6、body-parser 模块"></a>6、body-parser 模块</h2><ul><li>中间件，用于处理 JSON, Raw, Text 和 URL 编码的数据</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> server = express();</span><br><span class="line">server.listen(<span class="number">8081</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//  在这里帮你包装了req.body，form表单提交get用req.query。提交post方式用req.body</span></span><br><span class="line"><span class="comment">//  有两个参数 extended 拓展 limit 限制</span></span><br><span class="line">server.use(bodyParser.urlencoded(&#123;&#125;));</span><br><span class="line"></span><br><span class="line"><span class="comment">// server.use(bodyParser.urlencoded(&#123;</span></span><br><span class="line"><span class="comment">//  extended: true,   //拓展模式</span></span><br><span class="line"><span class="comment">//  limit: 2*1024*1024  //默认100KB，限制成2MB</span></span><br><span class="line"><span class="comment">// &#125;));</span></span><br><span class="line"></span><br><span class="line">server.use(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(req.body);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="7、cookie-parser-和-cookie-session-模块"><a href="#7、cookie-parser-和-cookie-session-模块" class="headerlink" title="7、cookie-parser 和 cookie-session 模块"></a>7、cookie-parser 和 cookie-session 模块</h2><ul><li>解析 Cookie 的工具，通过 req.cookies 可以取到传过来的 cookie，并把它们转成对象。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> cookieParser = <span class="built_in">require</span>(<span class="string">'cookie-parser'</span>);</span><br><span class="line"><span class="keyword">const</span> cookieSession = <span class="built_in">require</span>(<span class="string">'cookie-session'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> server = express();</span><br><span class="line"></span><br><span class="line"><span class="comment">//  cookie</span></span><br><span class="line"><span class="comment">//  server.use(cookieParser(sdfasdfasdfasd));   //签名密钥</span></span><br><span class="line">server.use(cookieParser());</span><br><span class="line">server.use(</span><br><span class="line">  cookieSession(&#123;</span><br><span class="line">    name: <span class="string">'sess'</span>,</span><br><span class="line">    keys: [<span class="string">'aaa'</span>, <span class="string">'bbb'</span>, <span class="string">'ccc'</span>], <span class="comment">//加密数组，越多越难破解</span></span><br><span class="line">    maxAge: <span class="number">2</span> * <span class="number">3600</span> * <span class="number">1000</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">server.use(<span class="string">'/aaa/a.html'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//  res.cookie('test', 'xxlai');  //可以带参数</span></span><br><span class="line">  <span class="comment">//  res.cookie('test', 'xxlai', &#123;path: '/aaa', maxAge: 30*24*3600*1000&#125;);  // 某个路径下才可以访问cookie，过期时间30天</span></span><br><span class="line"></span><br><span class="line">  req.secret = <span class="string">'sdfasdfasdfasd'</span>; <span class="comment">// 加密，签名密钥</span></span><br><span class="line">  res.cookie(<span class="string">'test'</span>, <span class="string">'xxlai'</span>, &#123; <span class="attr">signed</span>: <span class="literal">true</span> &#125;); <span class="comment">// 签名不能加密，但可以防止篡改值</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//  console.log(req.cookies);</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'签名cookies:'</span>, req.signedCookies);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'无签名cookies:'</span>, req.cookies);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (req.session[<span class="string">'count'</span>] == <span class="literal">null</span>) &#123;</span><br><span class="line">    req.session[<span class="string">'count'</span>] = <span class="number">1</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    req.session[<span class="string">'count'</span>]++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(req.session[<span class="string">'count'</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//  delete req.session['count'];     //删除</span></span><br><span class="line"></span><br><span class="line">  res.send(<span class="string">'ok'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.listen(<span class="number">8081</span>);</span><br></pre></td></tr></table></figure><h2 id="8、ejs-和-jade-模板引擎"><a href="#8、ejs-和-jade-模板引擎" class="headerlink" title="8、ejs 和 jade 模板引擎"></a>8、ejs 和 jade 模板引擎</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    我的名字叫：<span class="tag">&lt;<span class="name">%=</span> <span class="attr">name</span> %&gt;</span></span><br><span class="line">    &lt;% for(var i=0; i&lt;json.arr.length; i++) &#123; %&gt;</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>用户名： <span class="tag">&lt;<span class="name">%=</span> <span class="attr">json.arr</span>[<span class="attr">i</span>]<span class="attr">.user</span> %&gt;</span> 密码: <span class="tag">&lt;<span class="name">%</span> <span class="attr">json.arr</span>[<span class="attr">i</span>]<span class="attr">.pass</span> %&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%</span></span></span><br><span class="line"><span class="tag">        <span class="attr">var</span> <span class="attr">str</span> = <span class="string">"&lt;div&gt;&lt;/div&gt;"</span></span></span><br><span class="line"><span class="tag">    %&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%-</span> <span class="attr">str</span> %&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%</span> <span class="attr">include</span> <span class="attr">..</span>/<span class="attr">a.txt</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  ejs.js</span></span><br><span class="line"><span class="keyword">const</span> ejs = <span class="built_in">require</span>(<span class="string">'ejs'</span>);</span><br><span class="line"><span class="comment">//  可以传参渲染模板，=代表是转义输出，-代表不转义输出</span></span><br><span class="line">ejs.renderFile(<span class="string">'./views/1.ejs'</span>, &#123;<span class="attr">name</span>: <span class="string">'xxlai'</span>&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'编辑失败'</span>, err);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//  test.jade</span></span><br><span class="line">doctype</span><br><span class="line">html</span><br><span class="line">    head</span><br><span class="line">        meta(charset=<span class="string">"utf-8"</span>)</span><br><span class="line">        title jade测试页面</span><br><span class="line">    body</span><br><span class="line"><span class="comment">//  jade.js</span></span><br><span class="line"><span class="keyword">const</span> jade = <span class="built_in">require</span>(<span class="string">'jade'</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//  var str = jade.render('html');   //生成 &lt;html&gt;&lt;/html&gt;</span></span><br><span class="line"><span class="comment">//  1、jade模板引擎以每行缩进作为层级关系</span></span><br><span class="line"><span class="comment">//  2、属性放在（）里，逗号分隔</span></span><br><span class="line"><span class="comment">//  3、内容空一格，直接往后堆</span></span><br><span class="line"><span class="comment">//  4、.点代表原样输出 类似style.</span></span><br><span class="line"><span class="comment">//  5、数据传递模板用#&#123;name&#125;,style和css特殊，可省略 ， span #&#123;a&#125;等价于 span=a</span></span><br><span class="line"><span class="comment">//  6、|开头的代表不是标签，原样输出</span></span><br><span class="line"><span class="comment">//  7、-开头的跟|类似，代表的也不是标签，表示这是代码，不输出。可做for循环使用。 可以只写一个-代表接下来的都是代码。不转义，有点区别=</span></span><br><span class="line"><span class="comment">//  8、加!代表不需要转义 div!=content</span></span><br><span class="line"><span class="keyword">var</span> str = jade.renderFile(<span class="string">'./views/1.jade'</span>, &#123;<span class="attr">pretty</span>: <span class="literal">true</span>, <span class="attr">name</span>: <span class="string">'xxlai'</span>, <span class="attr">a</span>: <span class="number">12</span>, <span class="attr">b</span>: <span class="number">5</span>,</span><br><span class="line">    json: &#123;<span class="attr">width</span>: <span class="string">'200px'</span>, <span class="attr">height</span>: <span class="string">'200px'</span>, <span class="attr">background</span>: <span class="string">'red'</span>&#125;,</span><br><span class="line">    arr: [<span class="string">'aaa'</span>, <span class="string">'bbb'</span>, <span class="string">'ccc'</span>],</span><br><span class="line">    content: <span class="string">'&lt;h2&gt;title&lt;/h2&gt;&lt;p&gt;asdlkfjalsadfaf&lt;/p&gt;'</span></span><br><span class="line">&#125;); <span class="comment">//  pretty格式化排版</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br><span class="line"></span><br><span class="line">fs.writeFile(<span class="string">'./build/output.html'</span>, str, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'写入失败'</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'写入成功'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="9、multer-和-path-模块"><a href="#9、multer-和-path-模块" class="headerlink" title="9、multer 和 path 模块"></a>9、multer 和 path 模块</h2><ul><li>作为中间件进行数据处理，例如对附件上传下载。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- upload.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 注意enctype有3种值，这里是用multipart --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span></span></span><br><span class="line"><span class="tag">    <span class="attr">action</span>=<span class="string">"http://localhost:8080/"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">method</span>=<span class="string">"post"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    文件：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"f1"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"上传"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  upload.js</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>);</span><br><span class="line"><span class="keyword">const</span> multer = <span class="built_in">require</span>(<span class="string">'multer'</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> pathLib = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> objMulter = multer(&#123; <span class="attr">dest</span>: <span class="string">'./www/upload/'</span> &#125;);</span><br><span class="line"><span class="keyword">var</span> server = express();</span><br><span class="line"></span><br><span class="line"><span class="comment">//  错误</span></span><br><span class="line"><span class="comment">//  server.use(bodyParser.urlencoded(&#123;extended: false&#125;));</span></span><br><span class="line">server.use(objMulter.any());</span><br><span class="line"></span><br><span class="line">server.post(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//  1.获取原始文件扩展名</span></span><br><span class="line">  <span class="comment">//  2.重命名临时文件</span></span><br><span class="line">  <span class="keyword">var</span> newName =</span><br><span class="line">    req.files[<span class="number">0</span>].path + pathLib.parse(req.files[<span class="number">0</span>].originalname).ext;</span><br><span class="line">  fs.rename(req.files[<span class="number">0</span>].path, newName, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) res.send(<span class="string">'上传失败'</span>);</span><br><span class="line">    <span class="keyword">else</span> res.send(<span class="string">'成功'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.listen(<span class="number">8080</span>);</span><br></pre></td></tr></table></figure><h2 id="10、consolidate-模块"><a href="#10、consolidate-模块" class="headerlink" title="10、consolidate 模块"></a>10、consolidate 模块</h2><ul><li>consolidate 模块可以说是一个各种模板引擎的结合体。它包括了我们之前的 jade 和 ejs。通过配置就可以使用多种模板引擎。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">static</span> = <span class="built_in">require</span>(<span class="string">'express-static'</span>);</span><br><span class="line"><span class="keyword">const</span> cookieParser = <span class="built_in">require</span>(<span class="string">'cookie-parser'</span>);</span><br><span class="line"><span class="keyword">const</span> cookieSession = <span class="built_in">require</span>(<span class="string">'cookie-session'</span>);</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>);</span><br><span class="line"><span class="keyword">const</span> multer = <span class="built_in">require</span>(<span class="string">'multer'</span>);</span><br><span class="line"><span class="keyword">const</span> consolidate = <span class="built_in">require</span>(<span class="string">'consolidate'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> server = express();</span><br><span class="line">server.listen(<span class="number">8080</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//  1.解析cookie</span></span><br><span class="line">server.use(cookieParser(<span class="string">'sdfasl43kjoifguokn4lkhoifo4k3'</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//  2.使用session</span></span><br><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">  arr.push(<span class="string">'keys_'</span> + <span class="built_in">Math</span>.random());</span><br><span class="line">&#125;</span><br><span class="line">server.use(</span><br><span class="line">  cookieSession(&#123; <span class="attr">name</span>: <span class="string">'zns_sess_id'</span>, <span class="attr">keys</span>: arr, <span class="attr">maxAge</span>: <span class="number">20</span> * <span class="number">3600</span> * <span class="number">1000</span> &#125;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">//  3.post数据</span></span><br><span class="line">server.use(bodyParser.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;));</span><br><span class="line">server.use(multer(&#123; <span class="attr">dest</span>: <span class="string">'./www/upload'</span> &#125;).any());</span><br><span class="line"></span><br><span class="line"><span class="comment">//  4、配置模板引擎</span></span><br><span class="line"><span class="comment">//  输出什么东西</span></span><br><span class="line">server.set(<span class="string">'view engine'</span>, <span class="string">'html'</span>);</span><br><span class="line"><span class="comment">//  模板文件放在哪儿</span></span><br><span class="line">server.set(<span class="string">'views'</span>, <span class="string">'./views'</span>);</span><br><span class="line"><span class="comment">//  哪种模板引擎</span></span><br><span class="line">server.set(<span class="string">'html'</span>, consolidate.ejs);</span><br><span class="line"></span><br><span class="line"><span class="comment">//  用户请求</span></span><br><span class="line"><span class="comment">// server.use('/', function (req, res, next)&#123;</span></span><br><span class="line"><span class="comment">//   console.log(req.query, req.body, req.files, req.cookies, req.session);</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"><span class="comment">//  接收用户请求</span></span><br><span class="line">server.use(<span class="string">'/index'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.render(<span class="string">'1.ejs'</span>, &#123; <span class="attr">name</span>: <span class="string">'xxlai'</span> &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//  4.static数据</span></span><br><span class="line">server.use(<span class="keyword">static</span>(<span class="string">'./www'</span>));</span><br></pre></td></tr></table></figure><h2 id="11、mysql-模块"><a href="#11、mysql-模块" class="headerlink" title="11、mysql 模块"></a>11、mysql 模块</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express=<span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line">consot mysql = <span class="built_in">require</span>(<span class="string">'mysql'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> server=express();</span><br><span class="line">server.listen(<span class="number">8080</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//  连接数据库</span></span><br><span class="line"><span class="comment">//  createConection(哪台服务器， 用户名， 密码， 库)</span></span><br><span class="line"><span class="keyword">var</span> db = mysql.createConection(&#123;</span><br><span class="line">    host: <span class="string">'localhost'</span>,</span><br><span class="line">    port: <span class="string">'3306'</span></span><br><span class="line">    user: <span class="string">'test'</span>,</span><br><span class="line">    password: <span class="string">'123456'</span>,</span><br><span class="line">    database: <span class="string">'jeecg'</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//  连接池  可以限制连接数，不用一直保持连接</span></span><br><span class="line"><span class="comment">//createPool(哪台服务器， 用户名， 密码， 库)</span></span><br><span class="line"><span class="comment">// var db = mysql.createPool(&#123;</span></span><br><span class="line"><span class="comment">//  host: 'localhost',</span></span><br><span class="line"><span class="comment">//  port: '3306'</span></span><br><span class="line"><span class="comment">//  user: 'test',</span></span><br><span class="line"><span class="comment">//  password: '123456',</span></span><br><span class="line"><span class="comment">//  database: 'jeecg'</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(db);</span><br><span class="line"></span><br><span class="line"><span class="comment">//  2、查询</span></span><br><span class="line"><span class="comment">//  query(干什么， 回调函数)</span></span><br><span class="line">db.query(<span class="string">'select * from user_table;'</span>, (err, data) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span>(err)</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'出错了'</span>, err);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'成功了'</span>, data);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//  接收用户请求，链式操作，next()走下一个步骤</span></span><br><span class="line">server.get(<span class="string">'/'</span>, (req, res, next)=&gt;&#123;</span><br><span class="line">  <span class="comment">//  查询banner的东西</span></span><br><span class="line">  db.query(<span class="string">"SELECT * FROM banner_table"</span>, (err, data)=&gt;&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">      res.status(<span class="number">500</span>).send(<span class="string">'database error'</span>).end();</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      res.banners=data;</span><br><span class="line"></span><br><span class="line">      next();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">server.get(<span class="string">'/'</span>, (req, res, next)=&gt;&#123;</span><br><span class="line">  <span class="comment">//  查询文章列表</span></span><br><span class="line">  db.query(<span class="string">'SELECT ID,title,summery FROM article_table'</span>, (err, data)=&gt;&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">      res.status(<span class="number">500</span>).send(<span class="string">'database error'</span>).end();</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      res.articles=data;</span><br><span class="line"></span><br><span class="line">      next();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">server.get(<span class="string">'/'</span>, (req, res)=&gt;&#123;</span><br><span class="line">  res.render(<span class="string">'index.ejs'</span>, &#123;<span class="attr">banners</span>: res.banners, <span class="attr">articles</span>: res.articles&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.get(<span class="string">'/article'</span>, (req, res)=&gt;&#123;</span><br><span class="line">  res.render(<span class="string">'conText.ejs'</span>, &#123;&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="12、package-管理"><a href="#12、package-管理" class="headerlink" title="12、package 管理"></a>12、package 管理</h2><ul><li>如果你觉得你有比较包可以提供给其它人使用，可以上传到<a href="https://www.npmjs.com/" title="这里" target="_blank" rel="noopener">这里</a>。你只需要注册个帐户即可，可以发布和删除。 注意有版本号区别。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  平常自己写模块化管理，需要注意引入问题，需要添加"./"，对外输出东西必须加给exports</span></span><br><span class="line"><span class="comment">//  require 1.如果有"./" 从当前目录找  2.如果没有"./" 先从系统模块，再从node_modules找</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  如果对npm命令不太熟悉，可以打npm help查看相关指令</span></span><br><span class="line"><span class="comment">//  常用命令：</span></span><br><span class="line"><span class="comment">//  npm install 名字        安装</span></span><br><span class="line"><span class="comment">//  npm uninstall 名字      卸载</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  1.注册、登录用户</span></span><br><span class="line">    npm adduser</span><br><span class="line">    npm login</span><br><span class="line"><span class="comment">//  2.检查</span></span><br><span class="line">    npm whoami</span><br><span class="line"><span class="comment">//  3.建立package</span></span><br><span class="line">    npm init</span><br><span class="line"><span class="comment">//  4.发布</span></span><br><span class="line">    npm publish</span><br><span class="line">        *再次发布——加版本号，每次发布需要修改版本号以作区分</span><br><span class="line"><span class="comment">//  5.删除发布</span></span><br><span class="line">    npm --force unpulish  <span class="comment">//  删除当前版本号，根据package.json里指定</span></span><br><span class="line">    npm unpublish 名字 --force  <span class="comment">//  删除整个包，慎重</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;此文主要是为了举例 nodejs 的一些相关包用法总结，没有 nodejs 环境可以先到&lt;a href=&quot;https://nodejs.org/en/&quot; title=&quot;官网&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官网&lt;/a&gt;下载安装。nodejs 
      
    
    </summary>
    
      <category term="nodejs" scheme="https://liwenxin-jam.github.io/categories/nodejs/"/>
    
    
      <category term="后端" scheme="https://liwenxin-jam.github.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
</feed>
